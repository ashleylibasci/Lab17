
/Users/ashleylibasci/IoTFolderLabs/Lab17/target/5.3.2/argon/Lab17.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000047cc  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b87e8  000b87e8  000087e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e57c  000b880c  0000e57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000208  2003e5e8  2003e5e8  0001e5e8  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b8878  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b887c  000b887c  0001887c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b8882  000b8882  00018882  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b88a6  000b88a6  000188a6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001496f0  00000000  00000000  000188aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00016bd1  00000000  00000000  00161f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00049320  00000000  00000000  00178b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003538  00000000  00000000  001c1e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000ba90  00000000  00000000  001c53c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00041006  00000000  00000000  001d0e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00051e31  00000000  00000000  00211e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00141d9e  00000000  00000000  00263c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009d0c  00000000  00000000  003a5a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f003 fb8f 	bl	b7774 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f003 fb97 	bl	b7790 <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e57c 	.word	0x2003e57c
   b406c:	000b880c 	.word	0x000b880c
   b4070:	2003e5e8 	.word	0x2003e5e8
   b4074:	2003e5e8 	.word	0x2003e5e8
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f003 f931 	bl	b72e8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b87c4 	.word	0x000b87c4
   b40a0:	000b87e8 	.word	0x000b87e8

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b826 	b.w	b40f4 <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f837 	bl	b411c <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f003 b8d1 	b.w	b7258 <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f002 b8ad 	b.w	b6214 <malloc>

000b40ba <_Znaj>:
   b40ba:	f002 b8ab 	b.w	b6214 <malloc>

000b40be <_ZdaPv>:
   b40be:	f002 b8b1 	b.w	b6224 <free>

000b40c2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40c2:	f002 b8af 	b.w	b6224 <free>
	...

000b40c8 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40c8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40ca:	4a03      	ldr	r2, [pc, #12]	; (b40d8 <__cxa_pure_virtual+0x10>)
   b40cc:	4903      	ldr	r1, [pc, #12]	; (b40dc <__cxa_pure_virtual+0x14>)
   b40ce:	200c      	movs	r0, #12
   b40d0:	f001 fff4 	bl	b60bc <panic_>
  while (1);
   b40d4:	e7fe      	b.n	b40d4 <__cxa_pure_virtual+0xc>
   b40d6:	bf00      	nop
   b40d8:	000b5d7d 	.word	0x000b5d7d
   b40dc:	000b78ec 	.word	0x000b78ec

000b40e0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40e0:	7800      	ldrb	r0, [r0, #0]
   b40e2:	fab0 f080 	clz	r0, r0
   b40e6:	0940      	lsrs	r0, r0, #5
   b40e8:	4770      	bx	lr

000b40ea <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ea:	2301      	movs	r3, #1
   b40ec:	7003      	strb	r3, [r0, #0]
   b40ee:	4770      	bx	lr

000b40f0 <_Z8callbackPcPhj>:
  }
}

void callback(char *topic, byte *payload, unsigned int length) {
  
   b40f0:	4770      	bx	lr
	...

000b40f4 <setup>:
{
   b40f4:	b508      	push	{r3, lr}
  Serial.begin(9600);
   b40f6:	f003 f829 	bl	b714c <_Z16_fetch_usbserialv>
   b40fa:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40fe:	f003 f819 	bl	b7134 <_ZN9USBSerial5beginEl>
  display.setup();
   b4102:	4805      	ldr	r0, [pc, #20]	; (b4118 <setup+0x24>)
   b4104:	f001 f986 	bl	b5414 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   b4108:	4803      	ldr	r0, [pc, #12]	; (b4118 <setup+0x24>)
   b410a:	f000 fde1 	bl	b4cd0 <_ZN16Adafruit_SSD130612clearDisplayEv>
}
   b410e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  display.display();
   b4112:	4801      	ldr	r0, [pc, #4]	; (b4118 <setup+0x24>)
   b4114:	f001 b84a 	b.w	b51ac <_ZN16Adafruit_SSD13067displayEv>
   b4118:	2003e648 	.word	0x2003e648

000b411c <loop>:
{
   b411c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  display.loop();
   b411e:	4811      	ldr	r0, [pc, #68]	; (b4164 <loop+0x48>)
   b4120:	f001 f9a1 	bl	b5466 <_ZN16OledWingAdafruit4loopEv>
  if (client.isConnected())
   b4124:	4810      	ldr	r0, [pc, #64]	; (b4168 <loop+0x4c>)
   b4126:	f001 fad7 	bl	b56d8 <_ZN4MQTT11isConnectedEv>
   b412a:	b128      	cbz	r0, b4138 <loop+0x1c>
    client.loop();
   b412c:	480e      	ldr	r0, [pc, #56]	; (b4168 <loop+0x4c>)
}
   b412e:	b005      	add	sp, #20
   b4130:	f85d eb04 	ldr.w	lr, [sp], #4
    client.loop();
   b4134:	f001 bca7 	b.w	b5a86 <_ZN4MQTT4loopEv>
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4138:	4668      	mov	r0, sp
   b413a:	f001 fffb 	bl	b6134 <spark_deviceID>
    client.connect(System.deviceID());
   b413e:	9900      	ldr	r1, [sp, #0]
   b4140:	4809      	ldr	r0, [pc, #36]	; (b4168 <loop+0x4c>)
   b4142:	f001 fbb9 	bl	b58b8 <_ZN4MQTT7connectEPKc>
   b4146:	4668      	mov	r0, sp
   b4148:	f002 fbd2 	bl	b68f0 <_ZN6StringD1Ev>
    client.subscribe("Lab17");
   b414c:	4907      	ldr	r1, [pc, #28]	; (b416c <loop+0x50>)
   b414e:	4806      	ldr	r0, [pc, #24]	; (b4168 <loop+0x4c>)
   b4150:	f001 fde1 	bl	b5d16 <_ZN4MQTT9subscribeEPKc>
    client.publish("Lab17", "Lab17Connected");
   b4154:	4a06      	ldr	r2, [pc, #24]	; (b4170 <loop+0x54>)
   b4156:	4905      	ldr	r1, [pc, #20]	; (b416c <loop+0x50>)
   b4158:	4803      	ldr	r0, [pc, #12]	; (b4168 <loop+0x4c>)
}
   b415a:	b005      	add	sp, #20
   b415c:	f85d eb04 	ldr.w	lr, [sp], #4
    client.publish("Lab17", "Lab17Connected");
   b4160:	f001 bc35 	b.w	b59ce <_ZN4MQTT7publishEPKcS1_>
   b4164:	2003e648 	.word	0x2003e648
   b4168:	2003e5e8 	.word	0x2003e5e8
   b416c:	000b7901 	.word	0x000b7901
   b4170:	000b7907 	.word	0x000b7907

000b4174 <_GLOBAL__sub_I_display>:
   b4174:	b507      	push	{r0, r1, r2, lr}
SYSTEM_THREAD(ENABLED);
   b4176:	2100      	movs	r1, #0
   b4178:	2001      	movs	r0, #1
   b417a:	f001 ffbf 	bl	b60fc <system_thread_set_state>
OledWingAdafruit display;
   b417e:	2107      	movs	r1, #7
   b4180:	4807      	ldr	r0, [pc, #28]	; (b41a0 <_GLOBAL__sub_I_display+0x2c>)
   b4182:	f001 f919 	bl	b53b8 <_ZN16OledWingAdafruitC1Ei>
MQTT client("lab.thewcl.com", 1883, callback);
   b4186:	2300      	movs	r3, #0
   b4188:	9300      	str	r3, [sp, #0]
   b418a:	4906      	ldr	r1, [pc, #24]	; (b41a4 <_GLOBAL__sub_I_display+0x30>)
   b418c:	4b06      	ldr	r3, [pc, #24]	; (b41a8 <_GLOBAL__sub_I_display+0x34>)
   b418e:	4807      	ldr	r0, [pc, #28]	; (b41ac <_GLOBAL__sub_I_display+0x38>)
   b4190:	f240 725b 	movw	r2, #1883	; 0x75b
   b4194:	f001 f9c4 	bl	b5520 <_ZN4MQTTC1EPKctPFvPcPhjEb>
   b4198:	b003      	add	sp, #12
   b419a:	f85d fb04 	ldr.w	pc, [sp], #4
   b419e:	bf00      	nop
   b41a0:	2003e648 	.word	0x2003e648
   b41a4:	000b7916 	.word	0x000b7916
   b41a8:	000b40f1 	.word	0x000b40f1
   b41ac:	2003e5e8 	.word	0x2003e5e8

000b41b0 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b41b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b41b4:	b085      	sub	sp, #20
   b41b6:	461f      	mov	r7, r3
   b41b8:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b41bc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b41c0:	eba8 0902 	sub.w	r9, r8, r2
   b41c4:	eba7 0a01 	sub.w	sl, r7, r1
   b41c8:	f1b9 0f00 	cmp.w	r9, #0
   b41cc:	bfb8      	it	lt
   b41ce:	f1c9 0900 	rsblt	r9, r9, #0
   b41d2:	f1ba 0f00 	cmp.w	sl, #0
   b41d6:	bfb8      	it	lt
   b41d8:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b41dc:	45d1      	cmp	r9, sl
        uint16_t color) {
   b41de:	4683      	mov	fp, r0
   b41e0:	460c      	mov	r4, r1
   b41e2:	4615      	mov	r5, r2
    if (steep) {
   b41e4:	dd04      	ble.n	b41f0 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b41e6:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b41e8:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b41ea:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b41ec:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b41ee:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b41f0:	42bc      	cmp	r4, r7
   b41f2:	dd05      	ble.n	b4200 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b41f4:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b41f6:	4645      	mov	r5, r8
   b41f8:	4690      	mov	r8, r2
    if (x0 > x1) {
   b41fa:	4622      	mov	r2, r4
   b41fc:	463c      	mov	r4, r7
   b41fe:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4200:	1b3e      	subs	r6, r7, r4
   b4202:	b2b2      	uxth	r2, r6
   b4204:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b4206:	eba8 0205 	sub.w	r2, r8, r5
   b420a:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b420e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b4212:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4216:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b421a:	4545      	cmp	r5, r8
   b421c:	bfb4      	ite	lt
   b421e:	2201      	movlt	r2, #1
   b4220:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b4224:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b4226:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b4228:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b422a:	42bc      	cmp	r4, r7
   b422c:	dc1c      	bgt.n	b4268 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b422e:	f8db 2000 	ldr.w	r2, [fp]
   b4232:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4234:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4236:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b423a:	bfc7      	ittee	gt
   b423c:	4629      	movgt	r1, r5
   b423e:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b4240:	462a      	movle	r2, r5
   b4242:	4621      	movle	r1, r4
   b4244:	4658      	mov	r0, fp
   b4246:	47c0      	blx	r8
        }
        err -= dy;
   b4248:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b424a:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b424c:	1ab6      	subs	r6, r6, r2
   b424e:	b2b1      	uxth	r1, r6
   b4250:	b236      	sxth	r6, r6
        if (err < 0) {
   b4252:	2e00      	cmp	r6, #0
   b4254:	da05      	bge.n	b4262 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4256:	9a02      	ldr	r2, [sp, #8]
   b4258:	4415      	add	r5, r2
            err += dx;
   b425a:	9a00      	ldr	r2, [sp, #0]
   b425c:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b425e:	b22d      	sxth	r5, r5
            err += dx;
   b4260:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b4262:	3401      	adds	r4, #1
   b4264:	b224      	sxth	r4, r4
   b4266:	e7e0      	b.n	b422a <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4268:	b005      	add	sp, #20
   b426a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b426e <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b426e:	4770      	bx	lr

000b4270 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b4270:	b410      	push	{r4}
    drawPixel(x, y, color);
   b4272:	6804      	ldr	r4, [r0, #0]
   b4274:	6924      	ldr	r4, [r4, #16]
   b4276:	46a4      	mov	ip, r4
}
   b4278:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b427c:	4760      	bx	ip

000b427e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b427e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b4280:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b4282:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b4286:	9502      	str	r5, [sp, #8]
   b4288:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b428a:	46a4      	mov	ip, r4
}
   b428c:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b428e:	4760      	bx	ip

000b4290 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4290:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b4292:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4294:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b4298:	9502      	str	r5, [sp, #8]
   b429a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b429c:	46a4      	mov	ip, r4
}
   b429e:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b42a0:	4760      	bx	ip

000b42a2 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b42a2:	b470      	push	{r4, r5, r6}
   b42a4:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b42a8:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b42ac:	6804      	ldr	r4, [r0, #0]
   b42ae:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b42b2:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b42b4:	46a4      	mov	ip, r4
}
   b42b6:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b42b8:	4760      	bx	ip

000b42ba <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b42ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b42be:	461c      	mov	r4, r3
    startWrite();
   b42c0:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b42c2:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b42c6:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b42c8:	4605      	mov	r5, r0
   b42ca:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b42cc:	3c01      	subs	r4, #1
   b42ce:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b42d0:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b42d2:	b224      	sxth	r4, r4
    startWrite();
   b42d4:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b42d6:	682b      	ldr	r3, [r5, #0]
   b42d8:	f8cd 8004 	str.w	r8, [sp, #4]
   b42dc:	9400      	str	r4, [sp, #0]
   b42de:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b42e0:	4628      	mov	r0, r5
   b42e2:	463b      	mov	r3, r7
   b42e4:	4632      	mov	r2, r6
   b42e6:	4639      	mov	r1, r7
   b42e8:	47a0      	blx	r4
    endWrite();
   b42ea:	682b      	ldr	r3, [r5, #0]
   b42ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b42ee:	4628      	mov	r0, r5
}
   b42f0:	b002      	add	sp, #8
   b42f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b42f6:	4718      	bx	r3

000b42f8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b42f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b42fc:	461d      	mov	r5, r3
    startWrite();
   b42fe:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b4300:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4304:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b4306:	4604      	mov	r4, r0
   b4308:	4617      	mov	r7, r2
   b430a:	460e      	mov	r6, r1
    startWrite();
   b430c:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b430e:	e9cd 7800 	strd	r7, r8, [sp]
   b4312:	6822      	ldr	r2, [r4, #0]
   b4314:	1e6b      	subs	r3, r5, #1
   b4316:	4433      	add	r3, r6
   b4318:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b431a:	4620      	mov	r0, r4
   b431c:	b21b      	sxth	r3, r3
   b431e:	463a      	mov	r2, r7
   b4320:	4631      	mov	r1, r6
   b4322:	47a8      	blx	r5
    endWrite();
   b4324:	6823      	ldr	r3, [r4, #0]
   b4326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4328:	4620      	mov	r0, r4
}
   b432a:	b002      	add	sp, #8
   b432c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4330:	4718      	bx	r3

000b4332 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4332:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4336:	461e      	mov	r6, r3
    startWrite();
   b4338:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b433a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b433e:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4340:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4344:	460c      	mov	r4, r1
   b4346:	4605      	mov	r5, r0
   b4348:	4617      	mov	r7, r2
    startWrite();
   b434a:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b434c:	4426      	add	r6, r4
   b434e:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b4350:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b4352:	da0b      	bge.n	b436c <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4354:	f8cd 8000 	str.w	r8, [sp]
   b4358:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b435c:	4621      	mov	r1, r4
   b435e:	464b      	mov	r3, r9
   b4360:	463a      	mov	r2, r7
   b4362:	4628      	mov	r0, r5
   b4364:	3401      	adds	r4, #1
   b4366:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b4368:	b224      	sxth	r4, r4
   b436a:	e7f0      	b.n	b434e <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b436e:	4628      	mov	r0, r5
}
   b4370:	b002      	add	sp, #8
   b4372:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4376:	4718      	bx	r3

000b4378 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b4378:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b437a:	6802      	ldr	r2, [r0, #0]
   b437c:	9101      	str	r1, [sp, #4]
   b437e:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4382:	9100      	str	r1, [sp, #0]
   b4384:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b4386:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b438a:	2200      	movs	r2, #0
   b438c:	4611      	mov	r1, r2
   b438e:	47a0      	blx	r4
}
   b4390:	b002      	add	sp, #8
   b4392:	bd10      	pop	{r4, pc}

000b4394 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4394:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b4398:	4299      	cmp	r1, r3
        uint16_t color) {
   b439a:	4616      	mov	r6, r2
   b439c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b43a0:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b43a4:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b43a6:	4680      	mov	r8, r0
   b43a8:	460d      	mov	r5, r1
   b43aa:	461c      	mov	r4, r3
    if(x0 == x1){
   b43ac:	d113      	bne.n	b43d6 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b43ae:	42be      	cmp	r6, r7
   b43b0:	bfc8      	it	gt
   b43b2:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b43b4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b43b8:	bfc4      	itt	gt
   b43ba:	463e      	movgt	r6, r7
   b43bc:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b43be:	1c7b      	adds	r3, r7, #1
   b43c0:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b43c2:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b43c4:	b21b      	sxth	r3, r3
   b43c6:	4632      	mov	r2, r6
   b43c8:	4629      	mov	r1, r5
   b43ca:	4640      	mov	r0, r8
   b43cc:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b43ce:	b003      	add	sp, #12
   b43d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b43d4:	4760      	bx	ip
    } else if(y0 == y1){
   b43d6:	42be      	cmp	r6, r7
   b43d8:	d10a      	bne.n	b43f0 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b43da:	4299      	cmp	r1, r3
   b43dc:	bfc2      	ittt	gt
   b43de:	460b      	movgt	r3, r1
   b43e0:	4625      	movgt	r5, r4
   b43e2:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b43e4:	1c63      	adds	r3, r4, #1
   b43e6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b43ea:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b43ec:	1b5b      	subs	r3, r3, r5
   b43ee:	e7e9      	b.n	b43c4 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b43f0:	6953      	ldr	r3, [r2, #20]
   b43f2:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b43f4:	e9cd 7900 	strd	r7, r9, [sp]
   b43f8:	f8d8 3000 	ldr.w	r3, [r8]
   b43fc:	4640      	mov	r0, r8
   b43fe:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b4400:	4632      	mov	r2, r6
   b4402:	4623      	mov	r3, r4
   b4404:	4629      	mov	r1, r5
   b4406:	47b8      	blx	r7
        endWrite();
   b4408:	f8d8 3000 	ldr.w	r3, [r8]
   b440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b440e:	4640      	mov	r0, r8
}
   b4410:	b003      	add	sp, #12
   b4412:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b4416:	4718      	bx	r3

000b4418 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4418:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b441c:	461d      	mov	r5, r3
    startWrite();
   b441e:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4420:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b4424:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4426:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b442a:	4604      	mov	r4, r0
   b442c:	460f      	mov	r7, r1
   b442e:	4616      	mov	r6, r2
    startWrite();
   b4430:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b4432:	6823      	ldr	r3, [r4, #0]
   b4434:	f8cd 8000 	str.w	r8, [sp]
   b4438:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b443c:	4632      	mov	r2, r6
   b443e:	462b      	mov	r3, r5
   b4440:	4639      	mov	r1, r7
   b4442:	4620      	mov	r0, r4
   b4444:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b4446:	6823      	ldr	r3, [r4, #0]
   b4448:	f8cd 8000 	str.w	r8, [sp]
   b444c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b4450:	4432      	add	r2, r6
   b4452:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4456:	4639      	mov	r1, r7
   b4458:	462b      	mov	r3, r5
   b445a:	4620      	mov	r0, r4
   b445c:	b212      	sxth	r2, r2
   b445e:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b4460:	6823      	ldr	r3, [r4, #0]
   b4462:	f8cd 8000 	str.w	r8, [sp]
   b4466:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b446a:	4632      	mov	r2, r6
   b446c:	464b      	mov	r3, r9
   b446e:	4639      	mov	r1, r7
   b4470:	4620      	mov	r0, r4
   b4472:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b4474:	1e6b      	subs	r3, r5, #1
   b4476:	19d9      	adds	r1, r3, r7
   b4478:	6823      	ldr	r3, [r4, #0]
   b447a:	f8cd 8000 	str.w	r8, [sp]
   b447e:	6a1d      	ldr	r5, [r3, #32]
   b4480:	4620      	mov	r0, r4
   b4482:	464b      	mov	r3, r9
   b4484:	4632      	mov	r2, r6
   b4486:	b209      	sxth	r1, r1
   b4488:	47a8      	blx	r5
    endWrite();
   b448a:	6823      	ldr	r3, [r4, #0]
   b448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b448e:	4620      	mov	r0, r4
}
   b4490:	b002      	add	sp, #8
   b4492:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4496:	4718      	bx	r3

000b4498 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b4498:	4770      	bx	lr

000b449a <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b449a:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b449e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b44a2:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b44a4:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b44a6:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b44aa:	bf59      	ittee	pl
   b44ac:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b44ae:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b44b0:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b44b2:	81c3      	strhmi	r3, [r0, #14]
}
   b44b4:	4770      	bx	lr
	...

000b44b8 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b44b8:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b44ba:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b44bc:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b44be:	4a07      	ldr	r2, [pc, #28]	; (b44dc <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b44c0:	4d07      	ldr	r5, [pc, #28]	; (b44e0 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b44c2:	8101      	strh	r1, [r0, #8]
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b44c4:	2400      	movs	r4, #0
    _width    = WIDTH;
   b44c6:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b44c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b44cc:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b44d0:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b44d2:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b44d4:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b44d6:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b44d8:	6204      	str	r4, [r0, #32]
}
   b44da:	bd30      	pop	{r4, r5, pc}
   b44dc:	01000101 	.word	0x01000101
   b44e0:	000b7e30 	.word	0x000b7e30

000b44e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b44e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b44e8:	b089      	sub	sp, #36	; 0x24
   b44ea:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b44ee:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b44f0:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b44f4:	9304      	str	r3, [sp, #16]
   b44f6:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b44fa:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b44fc:	9305      	str	r3, [sp, #20]
   b44fe:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b4502:	4604      	mov	r4, r0
    startWrite();
   b4504:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b4506:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b450a:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b450e:	bf48      	it	mi
   b4510:	f108 020e 	addmi.w	r2, r8, #14
   b4514:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b4518:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b451a:	4635      	mov	r5, r6
   b451c:	9b03      	ldr	r3, [sp, #12]
   b451e:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b4520:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b4524:	189a      	adds	r2, r3, r2
   b4526:	9b05      	ldr	r3, [sp, #20]
   b4528:	428b      	cmp	r3, r1
   b452a:	b212      	sxth	r2, r2
   b452c:	dd27      	ble.n	b457e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b452e:	9b04      	ldr	r3, [sp, #16]
   b4530:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b4532:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4536:	9306      	str	r3, [sp, #24]
   b4538:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b453c:	4580      	cmp	r8, r0
   b453e:	fa1f f189 	uxth.w	r1, r9
   b4542:	dd17      	ble.n	b4574 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b4544:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4546:	bf05      	ittet	eq
   b4548:	9b06      	ldreq	r3, [sp, #24]
   b454a:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b454c:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b454e:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b4550:	bf18      	it	ne
   b4552:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b4554:	062b      	lsls	r3, r5, #24
   b4556:	d50a      	bpl.n	b456e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b4558:	9b02      	ldr	r3, [sp, #8]
   b455a:	6820      	ldr	r0, [r4, #0]
   b455c:	9207      	str	r2, [sp, #28]
   b455e:	4419      	add	r1, r3
   b4560:	6983      	ldr	r3, [r0, #24]
   b4562:	b209      	sxth	r1, r1
   b4564:	461f      	mov	r7, r3
   b4566:	4620      	mov	r0, r4
   b4568:	4653      	mov	r3, sl
   b456a:	47b8      	blx	r7
   b456c:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b456e:	f109 0901 	add.w	r9, r9, #1
   b4572:	e7e1      	b.n	b4538 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b4574:	9b01      	ldr	r3, [sp, #4]
   b4576:	3301      	adds	r3, #1
   b4578:	9301      	str	r3, [sp, #4]
   b457a:	445e      	add	r6, fp
   b457c:	e7ce      	b.n	b451c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b457e:	6823      	ldr	r3, [r4, #0]
   b4580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4582:	4620      	mov	r0, r4
}
   b4584:	b009      	add	sp, #36	; 0x24
   b4586:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b458a:	4718      	bx	r3

000b458c <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b458c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4590:	ed2d 8b02 	vpush	{d8}
   b4594:	b091      	sub	sp, #68	; 0x44
   b4596:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b4598:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b459a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b459e:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b45a2:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b45a6:	9103      	str	r1, [sp, #12]
   b45a8:	461f      	mov	r7, r3
   b45aa:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b45ae:	9304      	str	r3, [sp, #16]
   b45b0:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b45b2:	2a00      	cmp	r2, #0
   b45b4:	f040 80c5 	bne.w	b4742 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b45b8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b45bc:	428b      	cmp	r3, r1
   b45be:	f340 814c 	ble.w	b485a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b45c2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b45c6:	42b3      	cmp	r3, r6
   b45c8:	f340 8147 	ble.w	b485a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b45cc:	2306      	movs	r3, #6
   b45ce:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b45d2:	2b00      	cmp	r3, #0
   b45d4:	f340 8141 	ble.w	b485a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b45d8:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b45dc:	2b00      	cmp	r3, #0
   b45de:	f340 813c 	ble.w	b485a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b45e2:	7f03      	ldrb	r3, [r0, #28]
   b45e4:	b91b      	cbnz	r3, b45ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b45e6:	2faf      	cmp	r7, #175	; 0xaf
   b45e8:	bf84      	itt	hi
   b45ea:	3701      	addhi	r7, #1
   b45ec:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b45ee:	f8db 3000 	ldr.w	r3, [fp]
   b45f2:	4658      	mov	r0, fp
   b45f4:	695b      	ldr	r3, [r3, #20]
   b45f6:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b45f8:	2205      	movs	r2, #5
   b45fa:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b45fc:	2200      	movs	r2, #0
   b45fe:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4600:	4a98      	ldr	r2, [pc, #608]	; (b4864 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b4602:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b4606:	18d3      	adds	r3, r2, r3
   b4608:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b460a:	b2b3      	uxth	r3, r6
   b460c:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b460e:	9a05      	ldr	r2, [sp, #20]
   b4610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4612:	5c9b      	ldrb	r3, [r3, r2]
   b4614:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4616:	b2ab      	uxth	r3, r5
   b4618:	930b      	str	r3, [sp, #44]	; 0x2c
   b461a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b461e:	9308      	str	r3, [sp, #32]
   b4620:	9b03      	ldr	r3, [sp, #12]
   b4622:	fb02 f905 	mul.w	r9, r2, r5
   b4626:	fa19 f983 	uxtah	r9, r9, r3
   b462a:	fa0f f389 	sxth.w	r3, r9
   b462e:	ee08 3a10 	vmov	s16, r3
   b4632:	2308      	movs	r3, #8
   b4634:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b4636:	9b03      	ldr	r3, [sp, #12]
   b4638:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b463c:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b4640:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b4644:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b4646:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b464a:	07d2      	lsls	r2, r2, #31
   b464c:	d552      	bpl.n	b46f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b464e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4650:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4654:	d13e      	bne.n	b46d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b4656:	2c01      	cmp	r4, #1
   b4658:	d13c      	bne.n	b46d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b465a:	699b      	ldr	r3, [r3, #24]
   b465c:	9906      	ldr	r1, [sp, #24]
   b465e:	461f      	mov	r7, r3
   b4660:	9b04      	ldr	r3, [sp, #16]
   b4662:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b4664:	b212      	sxth	r2, r2
   b4666:	4651      	mov	r1, sl
   b4668:	4658      	mov	r0, fp
   b466a:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b466c:	f109 0301 	add.w	r3, r9, #1
   b4670:	fa4f f983 	sxtb.w	r9, r3
   b4674:	9b07      	ldr	r3, [sp, #28]
   b4676:	085b      	lsrs	r3, r3, #1
   b4678:	9307      	str	r3, [sp, #28]
   b467a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b467c:	3b01      	subs	r3, #1
   b467e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4682:	930a      	str	r3, [sp, #40]	; 0x28
   b4684:	d1de      	bne.n	b4644 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4686:	9f05      	ldr	r7, [sp, #20]
   b4688:	3701      	adds	r7, #1
   b468a:	b27b      	sxtb	r3, r7
   b468c:	9305      	str	r3, [sp, #20]
   b468e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4690:	3b01      	subs	r3, #1
   b4692:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4696:	9309      	str	r3, [sp, #36]	; 0x24
   b4698:	d1b9      	bne.n	b460e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b469a:	9b04      	ldr	r3, [sp, #16]
   b469c:	4543      	cmp	r3, r8
   b469e:	d00f      	beq.n	b46c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b46a0:	2d01      	cmp	r5, #1
   b46a2:	f8db 3000 	ldr.w	r3, [fp]
   b46a6:	d13b      	bne.n	b4720 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b46a8:	2c01      	cmp	r4, #1
   b46aa:	d139      	bne.n	b4720 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b46ac:	9908      	ldr	r1, [sp, #32]
   b46ae:	f8cd 8000 	str.w	r8, [sp]
   b46b2:	3105      	adds	r1, #5
   b46b4:	6a1c      	ldr	r4, [r3, #32]
   b46b6:	4632      	mov	r2, r6
   b46b8:	2308      	movs	r3, #8
   b46ba:	b209      	sxth	r1, r1
   b46bc:	4658      	mov	r0, fp
   b46be:	47a0      	blx	r4
        endWrite();
   b46c0:	f8db 3000 	ldr.w	r3, [fp]
   b46c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46c6:	4658      	mov	r0, fp
}
   b46c8:	b011      	add	sp, #68	; 0x44
   b46ca:	ecbd 8b02 	vpop	{d8}
   b46ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b46d2:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b46d4:	9906      	ldr	r1, [sp, #24]
   b46d6:	fb14 f202 	smulbb	r2, r4, r2
   b46da:	440a      	add	r2, r1
   b46dc:	9904      	ldr	r1, [sp, #16]
   b46de:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b46e0:	9400      	str	r4, [sp, #0]
   b46e2:	69db      	ldr	r3, [r3, #28]
   b46e4:	ee18 1a10 	vmov	r1, s16
   b46e8:	461f      	mov	r7, r3
   b46ea:	b212      	sxth	r2, r2
   b46ec:	462b      	mov	r3, r5
   b46ee:	4658      	mov	r0, fp
   b46f0:	47b8      	blx	r7
   b46f2:	e7bb      	b.n	b466c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b46f4:	9a04      	ldr	r2, [sp, #16]
   b46f6:	4542      	cmp	r2, r8
   b46f8:	d0b8      	beq.n	b466c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b46fa:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b46fc:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4700:	d107      	bne.n	b4712 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b4702:	2c01      	cmp	r4, #1
   b4704:	d105      	bne.n	b4712 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b4706:	699b      	ldr	r3, [r3, #24]
   b4708:	9906      	ldr	r1, [sp, #24]
   b470a:	461f      	mov	r7, r3
   b470c:	440a      	add	r2, r1
   b470e:	4643      	mov	r3, r8
   b4710:	e7a8      	b.n	b4664 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4712:	9906      	ldr	r1, [sp, #24]
   b4714:	f8cd 8004 	str.w	r8, [sp, #4]
   b4718:	fb14 f202 	smulbb	r2, r4, r2
   b471c:	440a      	add	r2, r1
   b471e:	e7df      	b.n	b46e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b4720:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4722:	f8cd 8004 	str.w	r8, [sp, #4]
   b4726:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b472a:	9a08      	ldr	r2, [sp, #32]
   b472c:	00e4      	lsls	r4, r4, #3
   b472e:	440a      	add	r2, r1
   b4730:	4611      	mov	r1, r2
   b4732:	9400      	str	r4, [sp, #0]
   b4734:	69dc      	ldr	r4, [r3, #28]
   b4736:	4632      	mov	r2, r6
   b4738:	462b      	mov	r3, r5
   b473a:	b209      	sxth	r1, r1
   b473c:	4658      	mov	r0, fp
   b473e:	47a0      	blx	r4
        endWrite();
   b4740:	e7be      	b.n	b46c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4742:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b4744:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b4746:	6812      	ldr	r2, [r2, #0]
   b4748:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b474a:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b474c:	b2ff      	uxtb	r7, r7
   b474e:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b4752:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b4756:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b4758:	789a      	ldrb	r2, [r3, #2]
   b475a:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b475c:	78da      	ldrb	r2, [r3, #3]
   b475e:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b4760:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4762:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b4766:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b476a:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b476c:	d801      	bhi.n	b4772 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b476e:	2c01      	cmp	r4, #1
   b4770:	d957      	bls.n	b4822 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b4772:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b4776:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b4778:	fa0f f38a 	sxth.w	r3, sl
   b477c:	9307      	str	r3, [sp, #28]
        startWrite();
   b477e:	f8db 3000 	ldr.w	r3, [fp]
   b4782:	4658      	mov	r0, fp
   b4784:	695b      	ldr	r3, [r3, #20]
   b4786:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4788:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b478a:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b478e:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4790:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4794:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b4796:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4798:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b479a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b479c:	429f      	cmp	r7, r3
   b479e:	d28f      	bcs.n	b46c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b47a0:	9b07      	ldr	r3, [sp, #28]
   b47a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b47a4:	443b      	add	r3, r7
   b47a6:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b47aa:	2200      	movs	r2, #0
   b47ac:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b47ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b47b0:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b47b2:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b47b6:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b47ba:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b47be:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b47c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b47c2:	9905      	ldr	r1, [sp, #20]
   b47c4:	4291      	cmp	r1, r2
   b47c6:	d241      	bcs.n	b484c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b47c8:	1c5a      	adds	r2, r3, #1
   b47ca:	b2d2      	uxtb	r2, r2
   b47cc:	075b      	lsls	r3, r3, #29
   b47ce:	920d      	str	r2, [sp, #52]	; 0x34
   b47d0:	d107      	bne.n	b47e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b47d2:	9b06      	ldr	r3, [sp, #24]
   b47d4:	9906      	ldr	r1, [sp, #24]
   b47d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b47d8:	3301      	adds	r3, #1
   b47da:	b29b      	uxth	r3, r3
   b47dc:	f812 9001 	ldrb.w	r9, [r2, r1]
   b47e0:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b47e2:	f019 0f80 	tst.w	r9, #128	; 0x80
   b47e6:	d012      	beq.n	b480e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b47e8:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b47ea:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b47ee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b47f2:	d11a      	bne.n	b482a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b47f4:	2c01      	cmp	r4, #1
   b47f6:	d118      	bne.n	b482a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b47f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b47fa:	699b      	ldr	r3, [r3, #24]
   b47fc:	4411      	add	r1, r2
   b47fe:	9a05      	ldr	r2, [sp, #20]
   b4800:	4411      	add	r1, r2
   b4802:	461e      	mov	r6, r3
   b4804:	4652      	mov	r2, sl
   b4806:	9b04      	ldr	r3, [sp, #16]
   b4808:	b209      	sxth	r1, r1
   b480a:	4658      	mov	r0, fp
   b480c:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b480e:	9e05      	ldr	r6, [sp, #20]
   b4810:	3601      	adds	r6, #1
   b4812:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b4814:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b4818:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b481a:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b481e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b4820:	e7ce      	b.n	b47c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b4822:	2300      	movs	r3, #0
   b4824:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b4828:	e7a9      	b.n	b477e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b482a:	9805      	ldr	r0, [sp, #20]
   b482c:	9a08      	ldr	r2, [sp, #32]
   b482e:	4402      	add	r2, r0
   b4830:	fb02 1105 	mla	r1, r2, r5, r1
   b4834:	9a04      	ldr	r2, [sp, #16]
   b4836:	e9cd 4200 	strd	r4, r2, [sp]
   b483a:	69db      	ldr	r3, [r3, #28]
   b483c:	ee18 2a10 	vmov	r2, s16
   b4840:	461e      	mov	r6, r3
   b4842:	b209      	sxth	r1, r1
   b4844:	462b      	mov	r3, r5
   b4846:	4658      	mov	r0, fp
   b4848:	47b0      	blx	r6
   b484a:	e7e0      	b.n	b480e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b484c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b484e:	3701      	adds	r7, #1
   b4850:	4498      	add	r8, r3
   b4852:	fa5f f888 	uxtb.w	r8, r8
   b4856:	b2ff      	uxtb	r7, r7
   b4858:	e79f      	b.n	b479a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b485a:	b011      	add	sp, #68	; 0x44
   b485c:	ecbd 8b02 	vpop	{d8}
   b4860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4864:	000b7925 	.word	0x000b7925

000b4868 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b4868:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b486a:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b486c:	b085      	sub	sp, #20
   b486e:	4604      	mov	r4, r0
   b4870:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b4872:	2a00      	cmp	r2, #0
   b4874:	d134      	bne.n	b48e0 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b4876:	290a      	cmp	r1, #10
   b4878:	d108      	bne.n	b488c <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b487a:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b487c:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b487e:	7e42      	ldrb	r2, [r0, #25]
   b4880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b4884:	8263      	strh	r3, [r4, #18]
}
   b4886:	2001      	movs	r0, #1
   b4888:	b005      	add	sp, #20
   b488a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b488c:	290d      	cmp	r1, #13
   b488e:	d0fa      	beq.n	b4886 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4890:	7ee1      	ldrb	r1, [r4, #27]
   b4892:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4894:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4896:	b171      	cbz	r1, b48b6 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b4898:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b489c:	2106      	movs	r1, #6
   b489e:	fb11 6100 	smlabb	r1, r1, r0, r6
   b48a2:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b48a6:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b48a8:	bfc1      	itttt	gt
   b48aa:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b48ae:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b48b0:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b48b4:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b48b6:	8ae2      	ldrh	r2, [r4, #22]
   b48b8:	9201      	str	r2, [sp, #4]
   b48ba:	8aa2      	ldrh	r2, [r4, #20]
   b48bc:	9200      	str	r2, [sp, #0]
   b48be:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b48c2:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b48c6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b48ca:	4620      	mov	r0, r4
   b48cc:	f7ff fe5e 	bl	b458c <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b48d0:	7e23      	ldrb	r3, [r4, #24]
   b48d2:	8a22      	ldrh	r2, [r4, #16]
   b48d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b48d8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b48dc:	8223      	strh	r3, [r4, #16]
   b48de:	e7d2      	b.n	b4886 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b48e0:	290a      	cmp	r1, #10
   b48e2:	d107      	bne.n	b48f4 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b48e4:	2300      	movs	r3, #0
   b48e6:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b48e8:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b48ea:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b48ec:	8a43      	ldrh	r3, [r0, #18]
   b48ee:	fb01 3302 	mla	r3, r1, r2, r3
   b48f2:	e7c7      	b.n	b4884 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b48f4:	290d      	cmp	r1, #13
   b48f6:	d0c6      	beq.n	b4886 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b48f8:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b48fa:	42a9      	cmp	r1, r5
   b48fc:	d3c3      	bcc.n	b4886 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b48fe:	7a51      	ldrb	r1, [r2, #9]
   b4900:	4299      	cmp	r1, r3
   b4902:	d3c0      	bcc.n	b4886 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b4904:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b4906:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b4908:	b2ed      	uxtb	r5, r5
   b490a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b490e:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b4910:	b328      	cbz	r0, b495e <_ZN12Adafruit_GFX5writeEh+0xf6>
   b4912:	78e9      	ldrb	r1, [r5, #3]
   b4914:	b319      	cbz	r1, b495e <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4916:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4918:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b491a:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b491c:	b191      	cbz	r1, b4944 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b491e:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b4922:	4408      	add	r0, r1
   b4924:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4928:	fb06 1100 	mla	r1, r6, r0, r1
   b492c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b4930:	4281      	cmp	r1, r0
   b4932:	dd07      	ble.n	b4944 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b4934:	2000      	movs	r0, #0
   b4936:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4938:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b493c:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b493e:	fb02 1207 	mla	r2, r2, r7, r1
   b4942:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4944:	8ae2      	ldrh	r2, [r4, #22]
   b4946:	9201      	str	r2, [sp, #4]
   b4948:	8aa2      	ldrh	r2, [r4, #20]
   b494a:	9200      	str	r2, [sp, #0]
   b494c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b4950:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4954:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4958:	4620      	mov	r0, r4
   b495a:	f7ff fe17 	bl	b458c <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b495e:	7929      	ldrb	r1, [r5, #4]
   b4960:	7e22      	ldrb	r2, [r4, #24]
   b4962:	8a23      	ldrh	r3, [r4, #16]
   b4964:	fb01 3302 	mla	r3, r1, r2, r3
   b4968:	e7b8      	b.n	b48dc <_ZN12Adafruit_GFX5writeEh+0x74>

000b496a <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b496a:	4770      	bx	lr

000b496c <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b496c:	b510      	push	{r4, lr}
  }
   b496e:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4970:	4604      	mov	r4, r0
  }
   b4972:	f7ff fba6 	bl	b40c2 <_ZdlPvj>
   b4976:	4620      	mov	r0, r4
   b4978:	bd10      	pop	{r4, pc}

000b497a <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b497a:	b40e      	push	{r1, r2, r3}
   b497c:	b503      	push	{r0, r1, lr}
   b497e:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4980:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4982:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4986:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4988:	f001 fec9 	bl	b671e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b498c:	b002      	add	sp, #8
   b498e:	f85d eb04 	ldr.w	lr, [sp], #4
   b4992:	b003      	add	sp, #12
   b4994:	4770      	bx	lr
	...

000b4998 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4998:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b499a:	4604      	mov	r4, r0
   b499c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b499e:	7922      	ldrb	r2, [r4, #4]
   b49a0:	68a3      	ldr	r3, [r4, #8]
   b49a2:	b132      	cbz	r2, b49b2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b49a4:	b9a3      	cbnz	r3, b49d0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b49a6:	490b      	ldr	r1, [pc, #44]	; (b49d4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b49a8:	b002      	add	sp, #8
   b49aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b49ae:	f001 be85 	b.w	b66bc <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b49b2:	4a09      	ldr	r2, [pc, #36]	; (b49d8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b49b4:	7b26      	ldrb	r6, [r4, #12]
   b49b6:	4d09      	ldr	r5, [pc, #36]	; (b49dc <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b49b8:	4909      	ldr	r1, [pc, #36]	; (b49e0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b49ba:	7b64      	ldrb	r4, [r4, #13]
   b49bc:	2e01      	cmp	r6, #1
   b49be:	bf18      	it	ne
   b49c0:	4629      	movne	r1, r5
   b49c2:	e9cd 1400 	strd	r1, r4, [sp]
   b49c6:	4907      	ldr	r1, [pc, #28]	; (b49e4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b49c8:	f7ff ffd7 	bl	b497a <_ZN5Print6printfEPKcz>
  }
   b49cc:	b002      	add	sp, #8
   b49ce:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b49d0:	4a05      	ldr	r2, [pc, #20]	; (b49e8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b49d2:	e7ef      	b.n	b49b4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b49d4:	000b7e91 	.word	0x000b7e91
   b49d8:	000b7e88 	.word	0x000b7e88
   b49dc:	000b7e8d 	.word	0x000b7e8d
   b49e0:	000b7e89 	.word	0x000b7e89
   b49e4:	000b7ea7 	.word	0x000b7ea7
   b49e8:	000b7e80 	.word	0x000b7e80

000b49ec <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b49ec:	b510      	push	{r4, lr}
   b49ee:	4b04      	ldr	r3, [pc, #16]	; (b4a00 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b49f0:	6003      	str	r3, [r0, #0]
   b49f2:	4604      	mov	r4, r0
  if(buffer) {
   b49f4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b49f6:	b108      	cbz	r0, b49fc <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b49f8:	f001 fc14 	bl	b6224 <free>
    buffer = NULL;
  }
}
   b49fc:	4620      	mov	r0, r4
   b49fe:	bd10      	pop	{r4, pc}
   b4a00:	000b8380 	.word	0x000b8380

000b4a04 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4a04:	b510      	push	{r4, lr}
   b4a06:	4604      	mov	r4, r0
}
   b4a08:	f7ff fff0 	bl	b49ec <_ZN16Adafruit_SSD1306D1Ev>
   b4a0c:	4620      	mov	r0, r4
   b4a0e:	2150      	movs	r1, #80	; 0x50
   b4a10:	f7ff fb57 	bl	b40c2 <_ZdlPvj>
   b4a14:	4620      	mov	r0, r4
   b4a16:	bd10      	pop	{r4, pc}

000b4a18 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4a18:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4a1a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4a1c:	db4b      	blt.n	b4ab6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4a1e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b4a22:	428c      	cmp	r4, r1
   b4a24:	dd47      	ble.n	b4ab6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4a26:	2a00      	cmp	r2, #0
   b4a28:	db45      	blt.n	b4ab6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4a2a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b4a2e:	4294      	cmp	r4, r2
   b4a30:	dd41      	ble.n	b4ab6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b4a32:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b4a34:	2c02      	cmp	r4, #2
   b4a36:	d01f      	beq.n	b4a78 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b4a38:	2c03      	cmp	r4, #3
   b4a3a:	d026      	beq.n	b4a8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b4a3c:	2c01      	cmp	r4, #1
   b4a3e:	d104      	bne.n	b4a4a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b4a40:	8904      	ldrh	r4, [r0, #8]
   b4a42:	43d2      	mvns	r2, r2
   b4a44:	4414      	add	r4, r2
      break;
   b4a46:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b4a48:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b4a4a:	2b01      	cmp	r3, #1
   b4a4c:	d023      	beq.n	b4a96 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b4a4e:	2b02      	cmp	r3, #2
   b4a50:	d032      	beq.n	b4ab8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b4a52:	bb83      	cbnz	r3, b4ab6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b4a54:	2a00      	cmp	r2, #0
   b4a56:	4613      	mov	r3, r2
   b4a58:	8904      	ldrh	r4, [r0, #8]
   b4a5a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4a5c:	bfb8      	it	lt
   b4a5e:	1dd3      	addlt	r3, r2, #7
   b4a60:	10db      	asrs	r3, r3, #3
   b4a62:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4a66:	f002 0207 	and.w	r2, r2, #7
   b4a6a:	2301      	movs	r3, #1
   b4a6c:	4093      	lsls	r3, r2
   b4a6e:	5c42      	ldrb	r2, [r0, r1]
   b4a70:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4a74:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b4a76:	e01e      	b.n	b4ab6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b4a78:	8904      	ldrh	r4, [r0, #8]
   b4a7a:	3c01      	subs	r4, #1
   b4a7c:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b4a7e:	8944      	ldrh	r4, [r0, #10]
   b4a80:	43d2      	mvns	r2, r2
   b4a82:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b4a84:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b4a86:	b212      	sxth	r2, r2
      break;
   b4a88:	e7df      	b.n	b4a4a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b4a8a:	8944      	ldrh	r4, [r0, #10]
   b4a8c:	3c01      	subs	r4, #1
   b4a8e:	1a64      	subs	r4, r4, r1
      break;
   b4a90:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b4a92:	b222      	sxth	r2, r4
      break;
   b4a94:	e7d9      	b.n	b4a4a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b4a96:	2a00      	cmp	r2, #0
   b4a98:	8904      	ldrh	r4, [r0, #8]
   b4a9a:	4613      	mov	r3, r2
   b4a9c:	bfb8      	it	lt
   b4a9e:	1dd3      	addlt	r3, r2, #7
   b4aa0:	10db      	asrs	r3, r3, #3
   b4aa2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4aa6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b4aa8:	f002 0007 	and.w	r0, r2, #7
   b4aac:	2201      	movs	r2, #1
   b4aae:	4082      	lsls	r2, r0
   b4ab0:	5c58      	ldrb	r0, [r3, r1]
   b4ab2:	4302      	orrs	r2, r0
   b4ab4:	545a      	strb	r2, [r3, r1]
}
   b4ab6:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4ab8:	2a00      	cmp	r2, #0
   b4aba:	4613      	mov	r3, r2
   b4abc:	8904      	ldrh	r4, [r0, #8]
   b4abe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4ac0:	bfb8      	it	lt
   b4ac2:	1dd3      	addlt	r3, r2, #7
   b4ac4:	10db      	asrs	r3, r3, #3
   b4ac6:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4aca:	f002 0207 	and.w	r2, r2, #7
   b4ace:	2301      	movs	r3, #1
   b4ad0:	fa03 f202 	lsl.w	r2, r3, r2
   b4ad4:	5c43      	ldrb	r3, [r0, r1]
   b4ad6:	405a      	eors	r2, r3
   b4ad8:	e7cc      	b.n	b4a74 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b4adc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b4adc:	b570      	push	{r4, r5, r6, lr}
   b4ade:	4604      	mov	r4, r0
   b4ae0:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4ae2:	2600      	movs	r6, #0
   b4ae4:	f7ff fce8 	bl	b44b8 <_ZN12Adafruit_GFXC1Ess>
   b4ae8:	4b11      	ldr	r3, [pc, #68]	; (b4b30 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b4aea:	6023      	str	r3, [r4, #0]
   b4aec:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b4aee:	b915      	cbnz	r5, b4af6 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b4af0:	f002 fcc2 	bl	b7478 <_Z19__fetch_global_Wirev>
   b4af4:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4af6:	23ff      	movs	r3, #255	; 0xff
   b4af8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b4afc:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b4b00:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b4b04:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b4b08:	4b0a      	ldr	r3, [pc, #40]	; (b4b34 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b4b0a:	63a3      	str	r3, [r4, #56]	; 0x38
   b4b0c:	2301      	movs	r3, #1
   b4b0e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b4b12:	9b05      	ldr	r3, [sp, #20]
   b4b14:	64a3      	str	r3, [r4, #72]	; 0x48
   b4b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b4b1a:	9b06      	ldr	r3, [sp, #24]
   b4b1c:	86a2      	strh	r2, [r4, #52]	; 0x34
   b4b1e:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b4b22:	6426      	str	r6, [r4, #64]	; 0x40
   b4b24:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b4b28:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b4b2a:	4620      	mov	r0, r4
   b4b2c:	bd70      	pop	{r4, r5, r6, pc}
   b4b2e:	bf00      	nop
   b4b30:	000b8380 	.word	0x000b8380
   b4b34:	000b7ecc 	.word	0x000b7ecc

000b4b38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4b3a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4b3c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4b3e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4b40:	b190      	cbz	r0, b4b68 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b4b42:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4b46:	f001 fc3f 	bl	b63c8 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4b4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4b4c:	6803      	ldr	r3, [r0, #0]
   b4b4e:	2100      	movs	r1, #0
   b4b50:	689b      	ldr	r3, [r3, #8]
   b4b52:	4798      	blx	r3
    WIRE_WRITE(c);
   b4b54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4b56:	6803      	ldr	r3, [r0, #0]
   b4b58:	4629      	mov	r1, r5
   b4b5a:	689b      	ldr	r3, [r3, #8]
   b4b5c:	4798      	blx	r3
    wire->endTransmission();
   b4b5e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b4b60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b4b64:	f001 bc37 	b.w	b63d6 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4b68:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4b6c:	4601      	mov	r1, r0
   b4b6e:	b298      	uxth	r0, r3
   b4b70:	f002 fc3b 	bl	b73ea <digitalWrite>
  if(spi) {
   b4b74:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4b76:	b120      	cbz	r0, b4b82 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b4b78:	4629      	mov	r1, r5
}
   b4b7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b4b7e:	f001 beb1 	b.w	b68e4 <_ZN8SPIClass8transferEh>
   b4b82:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4b84:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4b86:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4b8a:	ea05 0107 	and.w	r1, r5, r7
   b4b8e:	b280      	uxth	r0, r0
   b4b90:	f002 fc2b 	bl	b73ea <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4b94:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4b98:	2101      	movs	r1, #1
   b4b9a:	b280      	uxth	r0, r0
   b4b9c:	f002 fc25 	bl	b73ea <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4ba0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4ba4:	2100      	movs	r1, #0
   b4ba6:	b280      	uxth	r0, r0
   b4ba8:	f002 fc1f 	bl	b73ea <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4bac:	3e01      	subs	r6, #1
   b4bae:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b4bb2:	d1e8      	bne.n	b4b86 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b4bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4bb6 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4bb6:	b538      	push	{r3, r4, r5, lr}
   b4bb8:	4604      	mov	r4, r0
  TRANSACTION_START
   b4bba:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4bbc:	460d      	mov	r5, r1
  TRANSACTION_START
   b4bbe:	b180      	cbz	r0, b4be2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b4bc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4bc2:	f001 fbf3 	bl	b63ac <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b4bc6:	2d00      	cmp	r5, #0
   b4bc8:	4620      	mov	r0, r4
   b4bca:	bf14      	ite	ne
   b4bcc:	21a7      	movne	r1, #167	; 0xa7
   b4bce:	21a6      	moveq	r1, #166	; 0xa6
   b4bd0:	f7ff ffb2 	bl	b4b38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b4bd4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4bd6:	b188      	cbz	r0, b4bfc <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b4bd8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b4bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4bde:	f001 bbe5 	b.w	b63ac <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b4be2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4be4:	b118      	cbz	r0, b4bee <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b4be6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4bea:	f001 fe0d 	bl	b6808 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4bee:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4bf2:	2100      	movs	r1, #0
   b4bf4:	b280      	uxth	r0, r0
   b4bf6:	f002 fbf8 	bl	b73ea <digitalWrite>
   b4bfa:	e7e4      	b.n	b4bc6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b4bfc:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4c00:	2101      	movs	r1, #1
   b4c02:	b280      	uxth	r0, r0
   b4c04:	f002 fbf1 	bl	b73ea <digitalWrite>
   b4c08:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4c0a:	b118      	cbz	r0, b4c14 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b4c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b4c10:	f001 bde0 	b.w	b67d4 <_ZN8SPIClass14endTransactionEv>
}
   b4c14:	bd38      	pop	{r3, r4, r5, pc}

000b4c16 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4c16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4c1a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4c1c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4c1e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4c20:	188f      	adds	r7, r1, r2
   b4c22:	b340      	cbz	r0, b4c76 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b4c24:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4c28:	f001 fbce 	bl	b63c8 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4c2c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c2e:	6803      	ldr	r3, [r0, #0]
   b4c30:	2100      	movs	r1, #0
   b4c32:	689b      	ldr	r3, [r3, #8]
   b4c34:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b4c36:	2601      	movs	r6, #1
    while(n--) {
   b4c38:	42af      	cmp	r7, r5
        wire->endTransmission();
   b4c3a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b4c3c:	d017      	beq.n	b4c6e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b4c3e:	2e1f      	cmp	r6, #31
   b4c40:	d90c      	bls.n	b4c5c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b4c42:	f001 fbc8 	bl	b63d6 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b4c46:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4c4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c4c:	f001 fbbc 	bl	b63c8 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4c50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c52:	6803      	ldr	r3, [r0, #0]
   b4c54:	2100      	movs	r1, #0
   b4c56:	689b      	ldr	r3, [r3, #8]
   b4c58:	4798      	blx	r3
        bytesOut = 1;
   b4c5a:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4c5c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c5e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4c62:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b4c64:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4c66:	689b      	ldr	r3, [r3, #8]
   b4c68:	4798      	blx	r3
      bytesOut++;
   b4c6a:	b2f6      	uxtb	r6, r6
    while(n--) {
   b4c6c:	e7e4      	b.n	b4c38 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b4c6e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b4c72:	f001 bbb0 	b.w	b63d6 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4c76:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4c7a:	4601      	mov	r1, r0
   b4c7c:	b298      	uxth	r0, r3
   b4c7e:	f002 fbb4 	bl	b73ea <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4c82:	42bd      	cmp	r5, r7
   b4c84:	d022      	beq.n	b4ccc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b4c86:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4c88:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b4c8c:	b118      	cbz	r0, b4c96 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b4c8e:	4649      	mov	r1, r9
   b4c90:	f001 fe28 	bl	b68e4 <_ZN8SPIClass8transferEh>
   b4c94:	e7f5      	b.n	b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b4c96:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4c98:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4c9c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4ca0:	ea09 0108 	and.w	r1, r9, r8
   b4ca4:	b280      	uxth	r0, r0
   b4ca6:	f002 fba0 	bl	b73ea <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4caa:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4cae:	2101      	movs	r1, #1
   b4cb0:	b280      	uxth	r0, r0
   b4cb2:	f002 fb9a 	bl	b73ea <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4cb6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4cba:	2100      	movs	r1, #0
   b4cbc:	b280      	uxth	r0, r0
   b4cbe:	f002 fb94 	bl	b73ea <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4cc2:	3e01      	subs	r6, #1
   b4cc4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b4cc8:	d1e8      	bne.n	b4c9c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b4cca:	e7da      	b.n	b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b4ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4cd0 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b4cd0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b4cd4:	1dda      	adds	r2, r3, #7
   b4cd6:	bf48      	it	mi
   b4cd8:	f103 020e 	addmi.w	r2, r3, #14
   b4cdc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4ce0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4ce2:	10d2      	asrs	r2, r2, #3
   b4ce4:	435a      	muls	r2, r3
   b4ce6:	2100      	movs	r1, #0
   b4ce8:	f002 bd52 	b.w	b7790 <memset>

000b4cec <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b4cec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4cf0:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4cf2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b4cf4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b4cf8:	4604      	mov	r4, r0
   b4cfa:	460f      	mov	r7, r1
   b4cfc:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4cfe:	b1c3      	cbz	r3, b4d32 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b4d00:	4620      	mov	r0, r4
   b4d02:	f7ff ffe5 	bl	b4cd0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b4d06:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b4d0a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b4d0e:	2820      	cmp	r0, #32
   b4d10:	dc21      	bgt.n	b4d56 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b4d12:	2320      	movs	r3, #32
   b4d14:	2201      	movs	r2, #1
   b4d16:	3820      	subs	r0, #32
   b4d18:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b4d1c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b4d20:	2373      	movs	r3, #115	; 0x73
   b4d22:	3973      	subs	r1, #115	; 0x73
   b4d24:	9300      	str	r3, [sp, #0]
   b4d26:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b4d2a:	4b89      	ldr	r3, [pc, #548]	; (b4f50 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b4d2c:	f340 024f 	sbfx	r2, r0, #1, #16
   b4d30:	e021      	b.n	b4d76 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4d32:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b4d36:	1dd8      	adds	r0, r3, #7
   b4d38:	bf48      	it	mi
   b4d3a:	f103 000e 	addmi.w	r0, r3, #14
   b4d3e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b4d42:	10c0      	asrs	r0, r0, #3
   b4d44:	4358      	muls	r0, r3
   b4d46:	f001 fa65 	bl	b6214 <malloc>
   b4d4a:	62e0      	str	r0, [r4, #44]	; 0x2c
   b4d4c:	2800      	cmp	r0, #0
   b4d4e:	d1d7      	bne.n	b4d00 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b4d50:	b004      	add	sp, #16
   b4d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b4d56:	3840      	subs	r0, #64	; 0x40
   b4d58:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b4d5c:	fa02 f280 	sxtah	r2, r2, r0
   b4d60:	2340      	movs	r3, #64	; 0x40
   b4d62:	2001      	movs	r0, #1
   b4d64:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b4d68:	2352      	movs	r3, #82	; 0x52
   b4d6a:	3952      	subs	r1, #82	; 0x52
   b4d6c:	9300      	str	r3, [sp, #0]
   b4d6e:	4b79      	ldr	r3, [pc, #484]	; (b4f54 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b4d70:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b4d74:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b4d76:	4620      	mov	r0, r4
   b4d78:	f341 014f 	sbfx	r1, r1, #1, #16
   b4d7c:	f7ff fbb2 	bl	b44e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b4d80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b4d82:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b4d86:	2800      	cmp	r0, #0
   b4d88:	d078      	beq.n	b4e7c <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b4d8a:	2d00      	cmp	r5, #0
   b4d8c:	d174      	bne.n	b4e78 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b4d8e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b4d92:	2b20      	cmp	r3, #32
   b4d94:	bf0c      	ite	eq
   b4d96:	253c      	moveq	r5, #60	; 0x3c
   b4d98:	253d      	movne	r5, #61	; 0x3d
   b4d9a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b4d9e:	f1b8 0f00 	cmp.w	r8, #0
   b4da2:	d001      	beq.n	b4da8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b4da4:	f001 fb06 	bl	b63b4 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b4da8:	b1fe      	cbz	r6, b4dea <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b4daa:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4dae:	2800      	cmp	r0, #0
   b4db0:	db1b      	blt.n	b4dea <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b4db2:	2101      	movs	r1, #1
   b4db4:	b280      	uxth	r0, r0
   b4db6:	f002 fb07 	bl	b73c8 <pinMode>
    digitalWrite(rstPin, HIGH);
   b4dba:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4dbe:	2101      	movs	r1, #1
   b4dc0:	b280      	uxth	r0, r0
   b4dc2:	f002 fb12 	bl	b73ea <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b4dc6:	2001      	movs	r0, #1
   b4dc8:	f001 fa5c 	bl	b6284 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b4dcc:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4dd0:	2100      	movs	r1, #0
   b4dd2:	b280      	uxth	r0, r0
   b4dd4:	f002 fb09 	bl	b73ea <digitalWrite>
    delay(10);                  // Wait 10 ms
   b4dd8:	200a      	movs	r0, #10
   b4dda:	f001 fa53 	bl	b6284 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b4dde:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4de2:	2101      	movs	r1, #1
   b4de4:	b280      	uxth	r0, r0
   b4de6:	f002 fb00 	bl	b73ea <digitalWrite>
  TRANSACTION_START
   b4dea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4dec:	2800      	cmp	r0, #0
   b4dee:	d074      	beq.n	b4eda <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b4df0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4df2:	f001 fadb 	bl	b63ac <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b4df6:	2204      	movs	r2, #4
   b4df8:	4957      	ldr	r1, [pc, #348]	; (b4f58 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b4dfa:	4620      	mov	r0, r4
   b4dfc:	f7ff ff0b 	bl	b4c16 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b4e00:	8961      	ldrh	r1, [r4, #10]
   b4e02:	3901      	subs	r1, #1
   b4e04:	b2c9      	uxtb	r1, r1
   b4e06:	4620      	mov	r0, r4
   b4e08:	f7ff fe96 	bl	b4b38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b4e0c:	4953      	ldr	r1, [pc, #332]	; (b4f5c <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b4e0e:	2204      	movs	r2, #4
   b4e10:	4620      	mov	r0, r4
   b4e12:	f7ff ff00 	bl	b4c16 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b4e16:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4e1a:	2b01      	cmp	r3, #1
   b4e1c:	bf0c      	ite	eq
   b4e1e:	2110      	moveq	r1, #16
   b4e20:	2114      	movne	r1, #20
   b4e22:	4620      	mov	r0, r4
   b4e24:	f7ff fe88 	bl	b4b38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b4e28:	2204      	movs	r2, #4
   b4e2a:	494d      	ldr	r1, [pc, #308]	; (b4f60 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b4e2c:	4620      	mov	r0, r4
   b4e2e:	f7ff fef2 	bl	b4c16 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b4e32:	68a3      	ldr	r3, [r4, #8]
   b4e34:	4a4b      	ldr	r2, [pc, #300]	; (b4f64 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b4e36:	4293      	cmp	r3, r2
   b4e38:	d15c      	bne.n	b4ef4 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b4e3a:	494b      	ldr	r1, [pc, #300]	; (b4f68 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b4e3c:	2204      	movs	r2, #4
   b4e3e:	4620      	mov	r0, r4
   b4e40:	f7ff fee9 	bl	b4c16 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b4e44:	21d9      	movs	r1, #217	; 0xd9
   b4e46:	4620      	mov	r0, r4
   b4e48:	f7ff fe76 	bl	b4b38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b4e4c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4e50:	2b01      	cmp	r3, #1
   b4e52:	bf0c      	ite	eq
   b4e54:	2122      	moveq	r1, #34	; 0x22
   b4e56:	21f1      	movne	r1, #241	; 0xf1
   b4e58:	4620      	mov	r0, r4
   b4e5a:	f7ff fe6d 	bl	b4b38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b4e5e:	4620      	mov	r0, r4
   b4e60:	4942      	ldr	r1, [pc, #264]	; (b4f6c <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b4e62:	2206      	movs	r2, #6
   b4e64:	f7ff fed7 	bl	b4c16 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b4e68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4e6a:	2800      	cmp	r0, #0
   b4e6c:	d063      	beq.n	b4f36 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b4e6e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b4e70:	f001 fa9c 	bl	b63ac <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b4e74:	2001      	movs	r0, #1
   b4e76:	e76b      	b.n	b4d50 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b4e78:	b26d      	sxtb	r5, r5
   b4e7a:	e78e      	b.n	b4d9a <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b4e7c:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b4e80:	2101      	movs	r1, #1
   b4e82:	b280      	uxth	r0, r0
   b4e84:	f002 faa0 	bl	b73c8 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b4e88:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4e8c:	2101      	movs	r1, #1
   b4e8e:	b280      	uxth	r0, r0
   b4e90:	f002 fa9a 	bl	b73c8 <pinMode>
    SSD1306_DESELECT
   b4e94:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4e98:	2101      	movs	r1, #1
   b4e9a:	b280      	uxth	r0, r0
   b4e9c:	f002 faa5 	bl	b73ea <digitalWrite>
    if(spi) { // Hardware SPI
   b4ea0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b4ea2:	b13d      	cbz	r5, b4eb4 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b4ea4:	f1b8 0f00 	cmp.w	r8, #0
   b4ea8:	f43f af7e 	beq.w	b4da8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b4eac:	4628      	mov	r0, r5
   b4eae:	f001 fc7d 	bl	b67ac <_ZN8SPIClass5beginEv>
   b4eb2:	e779      	b.n	b4da8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b4eb4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4eb8:	2101      	movs	r1, #1
   b4eba:	b280      	uxth	r0, r0
   b4ebc:	f002 fa84 	bl	b73c8 <pinMode>
      pinMode(clkPin , OUTPUT);
   b4ec0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4ec4:	2101      	movs	r1, #1
   b4ec6:	b280      	uxth	r0, r0
   b4ec8:	f002 fa7e 	bl	b73c8 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b4ecc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4ed0:	4629      	mov	r1, r5
   b4ed2:	b280      	uxth	r0, r0
   b4ed4:	f002 fa89 	bl	b73ea <digitalWrite>
   b4ed8:	e766      	b.n	b4da8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b4eda:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4edc:	b118      	cbz	r0, b4ee6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b4ede:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4ee2:	f001 fc91 	bl	b6808 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4ee6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4eea:	2100      	movs	r1, #0
   b4eec:	b280      	uxth	r0, r0
   b4eee:	f002 fa7c 	bl	b73ea <digitalWrite>
   b4ef2:	e780      	b.n	b4df6 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b4ef4:	4a1e      	ldr	r2, [pc, #120]	; (b4f70 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b4ef6:	4293      	cmp	r3, r2
   b4ef8:	d10e      	bne.n	b4f18 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b4efa:	491e      	ldr	r1, [pc, #120]	; (b4f74 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b4efc:	2203      	movs	r2, #3
   b4efe:	4620      	mov	r0, r4
   b4f00:	f7ff fe89 	bl	b4c16 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b4f04:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4f08:	2b01      	cmp	r3, #1
   b4f0a:	bf0c      	ite	eq
   b4f0c:	219f      	moveq	r1, #159	; 0x9f
   b4f0e:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b4f10:	4620      	mov	r0, r4
   b4f12:	f7ff fe11 	bl	b4b38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b4f16:	e795      	b.n	b4e44 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b4f18:	4a17      	ldr	r2, [pc, #92]	; (b4f78 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b4f1a:	4293      	cmp	r3, r2
   b4f1c:	d192      	bne.n	b4e44 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b4f1e:	4917      	ldr	r1, [pc, #92]	; (b4f7c <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b4f20:	2203      	movs	r2, #3
   b4f22:	4620      	mov	r0, r4
   b4f24:	f7ff fe77 	bl	b4c16 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b4f28:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4f2c:	2b01      	cmp	r3, #1
   b4f2e:	bf0c      	ite	eq
   b4f30:	2110      	moveq	r1, #16
   b4f32:	21af      	movne	r1, #175	; 0xaf
   b4f34:	e7ec      	b.n	b4f10 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b4f36:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4f3a:	2101      	movs	r1, #1
   b4f3c:	b280      	uxth	r0, r0
   b4f3e:	f002 fa54 	bl	b73ea <digitalWrite>
   b4f42:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4f44:	2800      	cmp	r0, #0
   b4f46:	d095      	beq.n	b4e74 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b4f48:	f001 fc44 	bl	b67d4 <_ZN8SPIClass14endTransactionEv>
   b4f4c:	e792      	b.n	b4e74 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b4f4e:	bf00      	nop
   b4f50:	000b8198 	.word	0x000b8198
   b4f54:	000b7ed8 	.word	0x000b7ed8
   b4f58:	000b83e0 	.word	0x000b83e0
   b4f5c:	000b83e4 	.word	0x000b83e4
   b4f60:	000b83e8 	.word	0x000b83e8
   b4f64:	00200080 	.word	0x00200080
   b4f68:	000b83f2 	.word	0x000b83f2
   b4f6c:	000b83ec 	.word	0x000b83ec
   b4f70:	00400080 	.word	0x00400080
   b4f74:	000b83f6 	.word	0x000b83f6
   b4f78:	00100060 	.word	0x00100060
   b4f7c:	000b83f9 	.word	0x000b83f9

000b4f80 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4f80:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b4f82:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4f84:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b4f88:	db3d      	blt.n	b5006 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4f8a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b4f8e:	4294      	cmp	r4, r2
   b4f90:	dd39      	ble.n	b5006 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b4f92:	2900      	cmp	r1, #0
      w += x;
   b4f94:	bfbe      	ittt	lt
   b4f96:	185b      	addlt	r3, r3, r1
   b4f98:	b21b      	sxthlt	r3, r3
      x  = 0;
   b4f9a:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b4f9c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b4fa0:	18ce      	adds	r6, r1, r3
   b4fa2:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b4fa4:	bfc4      	itt	gt
   b4fa6:	1a63      	subgt	r3, r4, r1
   b4fa8:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b4faa:	2b00      	cmp	r3, #0
   b4fac:	dd2b      	ble.n	b5006 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b4fae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4fb0:	10d6      	asrs	r6, r2, #3
   b4fb2:	fb14 1106 	smlabb	r1, r4, r6, r1
   b4fb6:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b4fb8:	f002 0007 	and.w	r0, r2, #7
   b4fbc:	2201      	movs	r2, #1
   b4fbe:	4082      	lsls	r2, r0
      switch(color) {
   b4fc0:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b4fc2:	b2d2      	uxtb	r2, r2
      switch(color) {
   b4fc4:	d016      	beq.n	b4ff4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b4fc6:	2d02      	cmp	r5, #2
   b4fc8:	d00b      	beq.n	b4fe2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b4fca:	b9e5      	cbnz	r5, b5006 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b4fcc:	43d2      	mvns	r2, r2
   b4fce:	b2d2      	uxtb	r2, r2
   b4fd0:	440b      	add	r3, r1
   b4fd2:	4299      	cmp	r1, r3
   b4fd4:	d017      	beq.n	b5006 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4fd6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4fda:	4010      	ands	r0, r2
   b4fdc:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4fe0:	e7f7      	b.n	b4fd2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b4fe2:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b4fe4:	4299      	cmp	r1, r3
   b4fe6:	d00e      	beq.n	b5006 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4fe8:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4fec:	4050      	eors	r0, r2
   b4fee:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4ff2:	e7f7      	b.n	b4fe4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b4ff4:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b4ff6:	4299      	cmp	r1, r3
   b4ff8:	d005      	beq.n	b5006 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4ffa:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4ffe:	4310      	orrs	r0, r2
   b5000:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5004:	e7f7      	b.n	b4ff6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5006:	bd70      	pop	{r4, r5, r6, pc}

000b5008 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5008:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b500a:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b500c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5010:	db76      	blt.n	b5100 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5012:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5016:	42b1      	cmp	r1, r6
   b5018:	da72      	bge.n	b5100 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b501a:	2a00      	cmp	r2, #0
      __h += __y;
   b501c:	bfbe      	ittt	lt
   b501e:	189b      	addlt	r3, r3, r2
   b5020:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5022:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5024:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5028:	18d7      	adds	r7, r2, r3
   b502a:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b502c:	bfc4      	itt	gt
   b502e:	1aa3      	subgt	r3, r4, r2
   b5030:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b5032:	2b00      	cmp	r3, #0
   b5034:	dd64      	ble.n	b5100 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5036:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b503a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b503c:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b5040:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b5044:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5046:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b504a:	d023      	beq.n	b5094 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b504c:	f1c2 0208 	rsb	r2, r2, #8
   b5050:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5052:	492d      	ldr	r1, [pc, #180]	; (b5108 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5054:	4293      	cmp	r3, r2
   b5056:	bf3c      	itt	cc
   b5058:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b505c:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5060:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5062:	bf3c      	itt	cc
   b5064:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5068:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b506c:	2d01      	cmp	r5, #1
   b506e:	d007      	beq.n	b5080 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5070:	2d02      	cmp	r5, #2
   b5072:	d02e      	beq.n	b50d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5074:	b94d      	cbnz	r5, b508a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b5076:	f817 c006 	ldrb.w	ip, [r7, r6]
   b507a:	ea2c 0101 	bic.w	r1, ip, r1
   b507e:	e003      	b.n	b5088 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b5080:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5084:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b5088:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b508a:	4293      	cmp	r3, r2
   b508c:	d338      	bcc.n	b5100 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b508e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b5092:	440c      	add	r4, r1
        h -= mod;
   b5094:	1a9a      	subs	r2, r3, r2
   b5096:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b5098:	2a07      	cmp	r2, #7
   b509a:	d90e      	bls.n	b50ba <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b509c:	2d02      	cmp	r5, #2
   b509e:	d11d      	bne.n	b50dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b50a0:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b50a2:	7821      	ldrb	r1, [r4, #0]
   b50a4:	43c9      	mvns	r1, r1
   b50a6:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b50a8:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b50aa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b50ae:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b50b0:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b50b2:	440c      	add	r4, r1
            } while(h >= 8);
   b50b4:	d8f5      	bhi.n	b50a2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b50b6:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b50ba:	b30a      	cbz	r2, b5100 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b50bc:	4b13      	ldr	r3, [pc, #76]	; (b510c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b50be:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b50c0:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b50c2:	d01a      	beq.n	b50fa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b50c4:	2d02      	cmp	r5, #2
   b50c6:	d01c      	beq.n	b5102 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b50c8:	b9d5      	cbnz	r5, b5100 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b50ca:	7822      	ldrb	r2, [r4, #0]
   b50cc:	ea22 0303 	bic.w	r3, r2, r3
   b50d0:	e015      	b.n	b50fe <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b50d2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b50d6:	ea81 010c 	eor.w	r1, r1, ip
   b50da:	e7d5      	b.n	b5088 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b50dc:	1e29      	subs	r1, r5, #0
   b50de:	bf18      	it	ne
   b50e0:	2101      	movne	r1, #1
   b50e2:	4249      	negs	r1, r1
   b50e4:	b2c9      	uxtb	r1, r1
   b50e6:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b50e8:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b50ea:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b50ec:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b50f0:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b50f2:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b50f4:	4434      	add	r4, r6
            } while(h >= 8);
   b50f6:	d8f7      	bhi.n	b50e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b50f8:	e7dd      	b.n	b50b6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b50fa:	7822      	ldrb	r2, [r4, #0]
   b50fc:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b50fe:	7023      	strb	r3, [r4, #0]
}
   b5100:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b5102:	7822      	ldrb	r2, [r4, #0]
   b5104:	4053      	eors	r3, r2
   b5106:	e7fa      	b.n	b50fe <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b5108:	000b83d0 	.word	0x000b83d0
   b510c:	000b83d8 	.word	0x000b83d8

000b5110 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5110:	b470      	push	{r4, r5, r6}
   b5112:	4614      	mov	r4, r2
  switch(rotation) {
   b5114:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5116:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b511a:	2a02      	cmp	r2, #2
   b511c:	d00d      	beq.n	b513a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b511e:	2a03      	cmp	r2, #3
   b5120:	d018      	beq.n	b5154 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b5122:	2a01      	cmp	r2, #1
   b5124:	d111      	bne.n	b514a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5126:	8902      	ldrh	r2, [r0, #8]
   b5128:	43e4      	mvns	r4, r4
   b512a:	4414      	add	r4, r2
   b512c:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b512e:	9603      	str	r6, [sp, #12]
   b5130:	460a      	mov	r2, r1
   b5132:	4621      	mov	r1, r4
}
   b5134:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5136:	f7ff bf67 	b.w	b5008 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b513a:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b513c:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b513e:	43e4      	mvns	r4, r4
    x -= (w-1);
   b5140:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b5142:	4414      	add	r4, r2
    x -= (w-1);
   b5144:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b5146:	b224      	sxth	r4, r4
    x -= (w-1);
   b5148:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b514a:	9603      	str	r6, [sp, #12]
   b514c:	4622      	mov	r2, r4
}
   b514e:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b5150:	f7ff bf16 	b.w	b4f80 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b5154:	8945      	ldrh	r5, [r0, #10]
   b5156:	4419      	add	r1, r3
   b5158:	1a69      	subs	r1, r5, r1
   b515a:	b209      	sxth	r1, r1
    break;
   b515c:	e7e7      	b.n	b512e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b515e <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b515e:	b430      	push	{r4, r5}
   b5160:	4614      	mov	r4, r2
  switch(rotation) {
   b5162:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5164:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b5168:	2a02      	cmp	r2, #2
   b516a:	d00d      	beq.n	b5188 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b516c:	2a03      	cmp	r2, #3
   b516e:	d018      	beq.n	b51a2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b5170:	2a01      	cmp	r2, #1
   b5172:	d111      	bne.n	b5198 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b5174:	18e2      	adds	r2, r4, r3
   b5176:	8904      	ldrh	r4, [r0, #8]
   b5178:	1aa4      	subs	r4, r4, r2
   b517a:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b517c:	9502      	str	r5, [sp, #8]
   b517e:	460a      	mov	r2, r1
   b5180:	4621      	mov	r1, r4
}
   b5182:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5184:	f7ff befc 	b.w	b4f80 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b5188:	8902      	ldrh	r2, [r0, #8]
   b518a:	43c9      	mvns	r1, r1
   b518c:	4411      	add	r1, r2
    y -= (h-1);
   b518e:	18e2      	adds	r2, r4, r3
   b5190:	8944      	ldrh	r4, [r0, #10]
   b5192:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b5194:	b209      	sxth	r1, r1
    y -= (h-1);
   b5196:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b5198:	9502      	str	r5, [sp, #8]
   b519a:	4622      	mov	r2, r4
}
   b519c:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b519e:	f7ff bf33 	b.w	b5008 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b51a2:	8942      	ldrh	r2, [r0, #10]
   b51a4:	43c9      	mvns	r1, r1
   b51a6:	4411      	add	r1, r2
   b51a8:	b209      	sxth	r1, r1
    break;
   b51aa:	e7e7      	b.n	b517c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b51ac <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b51ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b51b0:	4604      	mov	r4, r0
  TRANSACTION_START
   b51b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b51b4:	2800      	cmp	r0, #0
   b51b6:	d042      	beq.n	b523e <_ZN16Adafruit_SSD13067displayEv+0x92>
   b51b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b51ba:	f001 f8f7 	bl	b63ac <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b51be:	4947      	ldr	r1, [pc, #284]	; (b52dc <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b51c0:	2205      	movs	r2, #5
   b51c2:	4620      	mov	r0, r4
   b51c4:	f7ff fd27 	bl	b4c16 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b51c8:	8921      	ldrh	r1, [r4, #8]
   b51ca:	3901      	subs	r1, #1
   b51cc:	4620      	mov	r0, r4
   b51ce:	b2c9      	uxtb	r1, r1
   b51d0:	f7ff fcb2 	bl	b4b38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b51d4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b51d8:	1dde      	adds	r6, r3, #7
   b51da:	bf48      	it	mi
   b51dc:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b51e0:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b51e4:	8923      	ldrh	r3, [r4, #8]
   b51e6:	10f6      	asrs	r6, r6, #3
   b51e8:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b51ec:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b51f0:	2800      	cmp	r0, #0
   b51f2:	d03a      	beq.n	b526a <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b51f4:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b51f8:	f001 f8e6 	bl	b63c8 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b51fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b51fe:	6803      	ldr	r3, [r0, #0]
   b5200:	2140      	movs	r1, #64	; 0x40
   b5202:	689b      	ldr	r3, [r3, #8]
   b5204:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5206:	2701      	movs	r7, #1
    while(count--) {
   b5208:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b520a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b520c:	d024      	beq.n	b5258 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b520e:	2f1f      	cmp	r7, #31
   b5210:	d90c      	bls.n	b522c <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b5212:	f001 f8e0 	bl	b63d6 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5216:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b521a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b521c:	f001 f8d4 	bl	b63c8 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b5220:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5222:	6803      	ldr	r3, [r0, #0]
   b5224:	2140      	movs	r1, #64	; 0x40
   b5226:	689b      	ldr	r3, [r3, #8]
   b5228:	4798      	blx	r3
        bytesOut = 1;
   b522a:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b522c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b522e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5232:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5234:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b5236:	689b      	ldr	r3, [r3, #8]
   b5238:	4798      	blx	r3
      bytesOut++;
   b523a:	b2ff      	uxtb	r7, r7
    while(count--) {
   b523c:	e7e4      	b.n	b5208 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b523e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5240:	b118      	cbz	r0, b524a <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b5242:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5246:	f001 fadf 	bl	b6808 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b524a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b524e:	2100      	movs	r1, #0
   b5250:	b280      	uxth	r0, r0
   b5252:	f002 f8ca 	bl	b73ea <digitalWrite>
   b5256:	e7b2      	b.n	b51be <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b5258:	f001 f8bd 	bl	b63d6 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b525c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b525e:	b378      	cbz	r0, b52c0 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b5260:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5262:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5266:	f001 b8a1 	b.w	b63ac <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b526a:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b526e:	2101      	movs	r1, #1
   b5270:	b280      	uxth	r0, r0
   b5272:	f002 f8ba 	bl	b73ea <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b5276:	42ae      	cmp	r6, r5
   b5278:	d0f0      	beq.n	b525c <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b527a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b527c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5280:	b118      	cbz	r0, b528a <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b5282:	4649      	mov	r1, r9
   b5284:	f001 fb2e 	bl	b68e4 <_ZN8SPIClass8transferEh>
   b5288:	e7f5      	b.n	b5276 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b528a:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b528c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5290:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5294:	ea09 0108 	and.w	r1, r9, r8
   b5298:	b280      	uxth	r0, r0
   b529a:	f002 f8a6 	bl	b73ea <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b529e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b52a2:	2101      	movs	r1, #1
   b52a4:	b280      	uxth	r0, r0
   b52a6:	f002 f8a0 	bl	b73ea <digitalWrite>
      digitalWrite(clkPin , LOW);
   b52aa:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b52ae:	2100      	movs	r1, #0
   b52b0:	b280      	uxth	r0, r0
   b52b2:	f002 f89a 	bl	b73ea <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b52b6:	3f01      	subs	r7, #1
   b52b8:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b52bc:	d1e8      	bne.n	b5290 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b52be:	e7da      	b.n	b5276 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b52c0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b52c4:	2101      	movs	r1, #1
   b52c6:	b280      	uxth	r0, r0
   b52c8:	f002 f88f 	bl	b73ea <digitalWrite>
   b52cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b52ce:	b118      	cbz	r0, b52d8 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b52d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b52d4:	f001 ba7e 	b.w	b67d4 <_ZN8SPIClass14endTransactionEv>
}
   b52d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b52dc:	000b83fc 	.word	0x000b83fc

000b52e0 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b52e0:	2100      	movs	r1, #0
   b52e2:	220a      	movs	r2, #10
   b52e4:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b52e8:	4770      	bx	lr

000b52ea <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b52ea:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b52ec:	b510      	push	{r4, lr}
   b52ee:	4604      	mov	r4, r0
    this->pin = pin;
   b52f0:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b52f2:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b52f4:	b288      	uxth	r0, r1
   b52f6:	f002 f891 	bl	b741c <digitalRead>
   b52fa:	b108      	cbz	r0, b5300 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b52fc:	2303      	movs	r3, #3
   b52fe:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5300:	f000 fd44 	bl	b5d8c <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b5304:	6020      	str	r0, [r4, #0]
#endif
}
   b5306:	bd10      	pop	{r4, pc}

000b5308 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b5308:	b538      	push	{r3, r4, r5, lr}
   b530a:	460c      	mov	r4, r1
   b530c:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b530e:	4611      	mov	r1, r2
   b5310:	b2a0      	uxth	r0, r4
   b5312:	f002 f859 	bl	b73c8 <pinMode>
  
  this->attach(pin);
   b5316:	4621      	mov	r1, r4
   b5318:	4628      	mov	r0, r5
}
   b531a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b531e:	f7ff bfe4 	b.w	b52ea <_ZN8Debounce6attachEi>

000b5322 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b5322:	b538      	push	{r3, r4, r5, lr}
   b5324:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b5326:	79c0      	ldrb	r0, [r0, #7]
   b5328:	f002 f878 	bl	b741c <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b532c:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b532e:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b5330:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b5334:	bf18      	it	ne
   b5336:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5338:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b533c:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b533e:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5340:	d00a      	beq.n	b5358 <_ZN8Debounce6updateEv+0x36>
   b5342:	f000 fd23 	bl	b5d8c <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b5346:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b5348:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b534a:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b534e:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b5350:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b5352:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b5356:	bd38      	pop	{r3, r4, r5, pc}
   b5358:	f000 fd18 	bl	b5d8c <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b535c:	6823      	ldr	r3, [r4, #0]
   b535e:	1ac0      	subs	r0, r0, r3
   b5360:	88a3      	ldrh	r3, [r4, #4]
   b5362:	4298      	cmp	r0, r3
   b5364:	d3f4      	bcc.n	b5350 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b5366:	79a3      	ldrb	r3, [r4, #6]
   b5368:	f003 0301 	and.w	r3, r3, #1
   b536c:	42ab      	cmp	r3, r5
   b536e:	d0ef      	beq.n	b5350 <_ZN8Debounce6updateEv+0x2e>
   b5370:	f000 fd0c 	bl	b5d8c <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b5374:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b5376:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b5378:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b537c:	f043 0308 	orr.w	r3, r3, #8
   b5380:	e7e5      	b.n	b534e <_ZN8Debounce6updateEv+0x2c>
	...

000b5384 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b5384:	b510      	push	{r4, lr}
   b5386:	4b06      	ldr	r3, [pc, #24]	; (b53a0 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b5388:	6003      	str	r3, [r0, #0]
   b538a:	4604      	mov	r4, r0
	if (mutex) {
   b538c:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b538e:	b108      	cbz	r0, b5394 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b5390:	f000 fccc 	bl	b5d2c <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b5394:	4620      	mov	r0, r4
   b5396:	f7ff fb29 	bl	b49ec <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b539a:	4620      	mov	r0, r4
   b539c:	bd10      	pop	{r4, pc}
   b539e:	bf00      	nop
   b53a0:	000b840c 	.word	0x000b840c

000b53a4 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b53a4:	b510      	push	{r4, lr}
   b53a6:	4604      	mov	r4, r0
}
   b53a8:	f7ff ffec 	bl	b5384 <_ZN16OledWingAdafruitD1Ev>
   b53ac:	4620      	mov	r0, r4
   b53ae:	2170      	movs	r1, #112	; 0x70
   b53b0:	f7fe fe87 	bl	b40c2 <_ZdlPvj>
   b53b4:	4620      	mov	r0, r4
   b53b6:	bd10      	pop	{r4, pc}

000b53b8 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b53b8:	b530      	push	{r4, r5, lr}
   b53ba:	b085      	sub	sp, #20
   b53bc:	4604      	mov	r4, r0
   b53be:	460d      	mov	r5, r1
   b53c0:	f002 f85a 	bl	b7478 <_Z19__fetch_global_Wirev>
   b53c4:	4a10      	ldr	r2, [pc, #64]	; (b5408 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b53c6:	4911      	ldr	r1, [pc, #68]	; (b540c <_ZN16OledWingAdafruitC1Ei+0x54>)
   b53c8:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b53cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b53d0:	2180      	movs	r1, #128	; 0x80
   b53d2:	4603      	mov	r3, r0
   b53d4:	9200      	str	r2, [sp, #0]
   b53d6:	4620      	mov	r0, r4
   b53d8:	2220      	movs	r2, #32
   b53da:	f7ff fb7f 	bl	b4adc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b53de:	4b0c      	ldr	r3, [pc, #48]	; (b5410 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b53e0:	6023      	str	r3, [r4, #0]
   b53e2:	2300      	movs	r3, #0
   b53e4:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b53e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b53ec:	f7ff ff78 	bl	b52e0 <_ZN8DebounceC1Ev>
   b53f0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b53f4:	f7ff ff74 	bl	b52e0 <_ZN8DebounceC1Ev>
   b53f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b53fc:	f7ff ff70 	bl	b52e0 <_ZN8DebounceC1Ev>
}
   b5400:	4620      	mov	r0, r4
   b5402:	b005      	add	sp, #20
   b5404:	bd30      	pop	{r4, r5, pc}
   b5406:	bf00      	nop
   b5408:	00061a80 	.word	0x00061a80
   b540c:	000186a0 	.word	0x000186a0
   b5410:	000b840c 	.word	0x000b840c

000b5414 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b5414:	b513      	push	{r0, r1, r4, lr}
   b5416:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b5418:	3050      	adds	r0, #80	; 0x50
   b541a:	f000 fc7f 	bl	b5d1c <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b541e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5420:	07d9      	lsls	r1, r3, #31
   b5422:	d505      	bpl.n	b5430 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b5424:	2202      	movs	r2, #2
   b5426:	2104      	movs	r1, #4
   b5428:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b542c:	f7ff ff6c 	bl	b5308 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b5430:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5432:	079a      	lsls	r2, r3, #30
   b5434:	d505      	bpl.n	b5442 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b5436:	2200      	movs	r2, #0
   b5438:	2103      	movs	r1, #3
   b543a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b543e:	f7ff ff63 	bl	b5308 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b5442:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5444:	075b      	lsls	r3, r3, #29
   b5446:	d505      	bpl.n	b5454 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b5448:	2202      	movs	r2, #2
   b544a:	4611      	mov	r1, r2
   b544c:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5450:	f7ff ff5a 	bl	b5308 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b5454:	2301      	movs	r3, #1
   b5456:	9300      	str	r3, [sp, #0]
   b5458:	223c      	movs	r2, #60	; 0x3c
   b545a:	2102      	movs	r1, #2
   b545c:	4620      	mov	r0, r4
   b545e:	f7ff fc45 	bl	b4cec <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b5462:	b002      	add	sp, #8
   b5464:	bd10      	pop	{r4, pc}

000b5466 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b5466:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b5468:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b546a:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b546c:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b546e:	d502      	bpl.n	b5476 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b5470:	3058      	adds	r0, #88	; 0x58
   b5472:	f7ff ff56 	bl	b5322 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b5476:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5478:	079a      	lsls	r2, r3, #30
   b547a:	d503      	bpl.n	b5484 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b547c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5480:	f7ff ff4f 	bl	b5322 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b5484:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5486:	075b      	lsls	r3, r3, #29
   b5488:	d505      	bpl.n	b5496 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b548a:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b548e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b5492:	f7ff bf46 	b.w	b5322 <_ZN8Debounce6updateEv>
}
   b5496:	bd10      	pop	{r4, pc}

000b5498 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b5498:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b549c:	b510      	push	{r4, lr}
   b549e:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b54a0:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b54a2:	b113      	cbz	r3, b54aa <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b54a4:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b54a6:	f000 fc49 	bl	b5d3c <os_mutex_lock>
#endif
#endif
#endif
        }
   b54aa:	4620      	mov	r0, r4
   b54ac:	bd10      	pop	{r4, pc}

000b54ae <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b54ae:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b54b0:	6803      	ldr	r3, [r0, #0]
   b54b2:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b54b6:	4604      	mov	r4, r0
            if (mqtt->thread)
   b54b8:	b112      	cbz	r2, b54c0 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b54ba:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b54bc:	f000 fc46 	bl	b5d4c <os_mutex_unlock>
#endif
#endif
#endif
        }
   b54c0:	4620      	mov	r0, r4
   b54c2:	bd10      	pop	{r4, pc}

000b54c4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b54c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54c6:	461f      	mov	r7, r3
   b54c8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b54cc:	4604      	mov	r4, r0
   b54ce:	460d      	mov	r5, r1
   b54d0:	4616      	mov	r6, r2
    if (thread) {
   b54d2:	b12b      	cbz	r3, b54e0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b54d4:	2301      	movs	r3, #1
   b54d6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b54da:	3058      	adds	r0, #88	; 0x58
   b54dc:	f000 fc1e 	bl	b5d1c <os_mutex_create>
    }
    this->callback = callback;
   b54e0:	9b08      	ldr	r3, [sp, #32]
   b54e2:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b54e4:	2300      	movs	r3, #0
   b54e6:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b54e8:	b106      	cbz	r6, b54ec <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b54ea:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b54ec:	b125      	cbz	r5, b54f8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b54ee:	4629      	mov	r1, r5
   b54f0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b54f4:	f001 fa5b 	bl	b69ae <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b54f8:	9b06      	ldr	r3, [sp, #24]
   b54fa:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b54fc:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b54fe:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b5500:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5504:	2bff      	cmp	r3, #255	; 0xff
   b5506:	bfb8      	it	lt
   b5508:	23ff      	movlt	r3, #255	; 0xff
   b550a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b550e:	b108      	cbz	r0, b5514 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b5510:	f7fe fdd5 	bl	b40be <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b5514:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b5518:	f7fe fdcf 	bl	b40ba <_Znaj>
   b551c:	61e0      	str	r0, [r4, #28]
}
   b551e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5520 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b5520:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5524:	4604      	mov	r4, r0
            bool thread) {
   b5526:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b5528:	4617      	mov	r7, r2
   b552a:	4698      	mov	r8, r3
   b552c:	460e      	mov	r6, r1
            bool thread) {
   b552e:	f001 fd3f 	bl	b6fb0 <_ZN9TCPClientC1Ev>
   b5532:	490d      	ldr	r1, [pc, #52]	; (b5568 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b5534:	61e5      	str	r5, [r4, #28]
   b5536:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b553a:	f001 fa24 	bl	b6986 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b553e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b5542:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b5544:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b5548:	22ff      	movs	r2, #255	; 0xff
   b554a:	230f      	movs	r3, #15
   b554c:	e9cd 3200 	strd	r3, r2, [sp]
   b5550:	4620      	mov	r0, r4
            bool thread) {
   b5552:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b5556:	463b      	mov	r3, r7
   b5558:	462a      	mov	r2, r5
   b555a:	4631      	mov	r1, r6
   b555c:	f7ff ffb2 	bl	b54c4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b5560:	4620      	mov	r0, r4
   b5562:	b004      	add	sp, #16
   b5564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5568:	000b7e88 	.word	0x000b7e88

000b556c <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b556c:	b510      	push	{r4, lr}
   b556e:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b5570:	4620      	mov	r0, r4
   b5572:	f001 fc79 	bl	b6e68 <_ZN9TCPClient9availableEv>
   b5576:	2800      	cmp	r0, #0
   b5578:	d0fa      	beq.n	b5570 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b557a:	4620      	mov	r0, r4
   b557c:	f001 fa5e 	bl	b6a3c <_ZN9TCPClient4readEv>
}
   b5580:	b2c0      	uxtb	r0, r0
   b5582:	bd10      	pop	{r4, pc}

000b5584 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b5584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5588:	4605      	mov	r5, r0
   b558a:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b558c:	f7ff ffee 	bl	b556c <_ZN4MQTT8readByteEv>
   b5590:	69eb      	ldr	r3, [r5, #28]
   b5592:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b5594:	69eb      	ldr	r3, [r5, #28]
   b5596:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b559a:	f04f 0901 	mov.w	r9, #1
   b559e:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b55a2:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b55a4:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b55a6:	4628      	mov	r0, r5
   b55a8:	f7ff ffe0 	bl	b556c <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b55ac:	4626      	mov	r6, r4
   b55ae:	69eb      	ldr	r3, [r5, #28]
   b55b0:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b55b2:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b55b6:	fb13 f309 	smulbb	r3, r3, r9
   b55ba:	441f      	add	r7, r3
        buffer[len++] = digit;
   b55bc:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b55be:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b55c0:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b55c2:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b55c4:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b55c8:	d4ed      	bmi.n	b55a6 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b55ca:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b55cc:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b55d0:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b55d4:	d11e      	bne.n	b5614 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b55d6:	4628      	mov	r0, r5
   b55d8:	f7ff ffc8 	bl	b556c <_ZN4MQTT8readByteEv>
   b55dc:	69eb      	ldr	r3, [r5, #28]
   b55de:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b55e0:	4628      	mov	r0, r5
   b55e2:	f7ff ffc3 	bl	b556c <_ZN4MQTT8readByteEv>
   b55e6:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b55e8:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b55ea:	b2b6      	uxth	r6, r6
   b55ec:	69eb      	ldr	r3, [r5, #28]
   b55ee:	b2a4      	uxth	r4, r4
   b55f0:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b55f2:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b55f4:	b2b6      	uxth	r6, r6
   b55f6:	42be      	cmp	r6, r7
   b55f8:	d20e      	bcs.n	b5618 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b55fa:	4628      	mov	r0, r5
   b55fc:	f7ff ffb6 	bl	b556c <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b5600:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b5604:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b5606:	bf84      	itt	hi
   b5608:	69eb      	ldrhi	r3, [r5, #28]
   b560a:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b560c:	3401      	adds	r4, #1
   b560e:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b5610:	3601      	adds	r6, #1
   b5612:	e7ef      	b.n	b55f4 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b5614:	2600      	movs	r6, #0
   b5616:	e7ed      	b.n	b55f4 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b5618:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b561c:	42a3      	cmp	r3, r4
   b561e:	bf2c      	ite	cs
   b5620:	4620      	movcs	r0, r4
   b5622:	2000      	movcc	r0, #0
   b5624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5628 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5628:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b562c:	4615      	mov	r5, r2
   b562e:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b5630:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5632:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b5634:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b5636:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b5638:	a802      	add	r0, sp, #8
        digit = len % 128;
   b563a:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b563e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b5642:	f103 0401 	add.w	r4, r3, #1
   b5646:	4403      	add	r3, r0
            digit |= 0x80;
   b5648:	bf88      	it	hi
   b564a:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b564e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b5652:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b5656:	b2e4      	uxtb	r4, r4
   b5658:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b565c:	d81e      	bhi.n	b569c <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b565e:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b5662:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b5666:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b5668:	4622      	mov	r2, r4
   b566a:	a901      	add	r1, sp, #4
   b566c:	4428      	add	r0, r5
    buf[4-llen] = header;
   b566e:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b5672:	f002 f87f 	bl	b7774 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b5676:	1c72      	adds	r2, r6, #1
   b5678:	4422      	add	r2, r4
   b567a:	4641      	mov	r1, r8
   b567c:	4638      	mov	r0, r7
   b567e:	f001 f9c8 	bl	b6a12 <_ZN9TCPClient5writeEPKhj>
   b5682:	4605      	mov	r5, r0
   b5684:	f000 fb82 	bl	b5d8c <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b5688:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b568a:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b568c:	4432      	add	r2, r6
   b568e:	b2a8      	uxth	r0, r5
}
   b5690:	1a13      	subs	r3, r2, r0
   b5692:	4258      	negs	r0, r3
   b5694:	4158      	adcs	r0, r3
   b5696:	b002      	add	sp, #8
   b5698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b569c:	4623      	mov	r3, r4
   b569e:	e7ca      	b.n	b5636 <_ZN4MQTT5writeEhPht+0xe>

000b56a0 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b56a0:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b56a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   b56a4:	4605      	mov	r5, r0
    pos += 2;
   b56a6:	b298      	uxth	r0, r3
   b56a8:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b56aa:	5cce      	ldrb	r6, [r1, r3]
   b56ac:	b29c      	uxth	r4, r3
   b56ae:	b156      	cbz	r6, b56c6 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b56b0:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b56b4:	4584      	cmp	ip, r0
   b56b6:	f103 0701 	add.w	r7, r3, #1
   b56ba:	d904      	bls.n	b56c6 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b56bc:	1c44      	adds	r4, r0, #1
   b56be:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b56c0:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b56c2:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b56c4:	e7f1      	b.n	b56aa <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b56c6:	b299      	uxth	r1, r3
   b56c8:	1a41      	subs	r1, r0, r1
   b56ca:	440a      	add	r2, r1
   b56cc:	0a21      	lsrs	r1, r4, #8
   b56ce:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b56d2:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b56d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b56d8 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b56d8:	b538      	push	{r3, r4, r5, lr}
   b56da:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b56dc:	f001 fae6 	bl	b6cac <_ZN9TCPClient9connectedEv>
   b56e0:	2800      	cmp	r0, #0
   b56e2:	bf14      	ite	ne
   b56e4:	2501      	movne	r5, #1
   b56e6:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b56e8:	d102      	bne.n	b56f0 <_ZN4MQTT11isConnectedEv+0x18>
   b56ea:	4620      	mov	r0, r4
   b56ec:	f001 fc16 	bl	b6f1c <_ZN9TCPClient4stopEv>
    return rc;
}
   b56f0:	4628      	mov	r0, r5
   b56f2:	bd38      	pop	{r3, r4, r5, pc}

000b56f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b56f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b56f8:	b088      	sub	sp, #32
   b56fa:	4604      	mov	r4, r0
   b56fc:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b5700:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5704:	4689      	mov	r9, r1
   b5706:	4617      	mov	r7, r2
   b5708:	461e      	mov	r6, r3
    if (!isConnected()) {
   b570a:	f7ff ffe5 	bl	b56d8 <_ZN4MQTT11isConnectedEv>
   b570e:	4605      	mov	r5, r0
   b5710:	2800      	cmp	r0, #0
   b5712:	f040 80cd 	bne.w	b58b0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b5716:	4621      	mov	r1, r4
   b5718:	a801      	add	r0, sp, #4
   b571a:	f7ff febd 	bl	b5498 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b571e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5720:	2900      	cmp	r1, #0
   b5722:	f040 8088 	bne.w	b5836 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b5726:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b572a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b572c:	462b      	mov	r3, r5
   b572e:	4620      	mov	r0, r4
   b5730:	f001 fa3e 	bl	b6bb0 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b5734:	2800      	cmp	r0, #0
   b5736:	d07a      	beq.n	b582e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b5738:	2301      	movs	r3, #1
   b573a:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b573c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b5740:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b5742:	2b04      	cmp	r3, #4
   b5744:	4b5b      	ldr	r3, [pc, #364]	; (b58b4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b5746:	f040 8081 	bne.w	b584c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b574a:	6818      	ldr	r0, [r3, #0]
   b574c:	8899      	ldrh	r1, [r3, #4]
   b574e:	799b      	ldrb	r3, [r3, #6]
   b5750:	f8ad 100c 	strh.w	r1, [sp, #12]
   b5754:	f88d 300e 	strb.w	r3, [sp, #14]
   b5758:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b575a:	f8c2 0005 	str.w	r0, [r2, #5]
   b575e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b5762:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b5766:	f8a2 1009 	strh.w	r1, [r2, #9]
   b576a:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b576c:	230c      	movs	r3, #12
            if (willTopic) {
   b576e:	f1b8 0f00 	cmp.w	r8, #0
   b5772:	f000 8081 	beq.w	b5878 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b5776:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b577a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b577e:	0140      	lsls	r0, r0, #5
   b5780:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b5784:	f040 0006 	orr.w	r0, r0, #6
   b5788:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b578a:	f1ba 0f00 	cmp.w	sl, #0
   b578e:	d101      	bne.n	b5794 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b5790:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b5794:	b11f      	cbz	r7, b579e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b5796:	2e00      	cmp	r6, #0
   b5798:	d170      	bne.n	b587c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b579a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b579e:	69e2      	ldr	r2, [r4, #28]
   b57a0:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b57a2:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b57a4:	69e1      	ldr	r1, [r4, #28]
   b57a6:	1c58      	adds	r0, r3, #1
   b57a8:	1212      	asrs	r2, r2, #8
   b57aa:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b57ac:	1c9a      	adds	r2, r3, #2
   b57ae:	69e1      	ldr	r1, [r4, #28]
   b57b0:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b57b2:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b57b4:	3303      	adds	r3, #3
   b57b6:	69e2      	ldr	r2, [r4, #28]
   b57b8:	4649      	mov	r1, r9
   b57ba:	4620      	mov	r0, r4
   b57bc:	f7ff ff70 	bl	b56a0 <_ZN4MQTT11writeStringEPKcPht>
   b57c0:	4603      	mov	r3, r0
            if (willTopic) {
   b57c2:	f1b8 0f00 	cmp.w	r8, #0
   b57c6:	d00b      	beq.n	b57e0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b57c8:	69e2      	ldr	r2, [r4, #28]
   b57ca:	4641      	mov	r1, r8
   b57cc:	4620      	mov	r0, r4
   b57ce:	f7ff ff67 	bl	b56a0 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b57d2:	69e2      	ldr	r2, [r4, #28]
   b57d4:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b57d6:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b57d8:	4620      	mov	r0, r4
   b57da:	f7ff ff61 	bl	b56a0 <_ZN4MQTT11writeStringEPKcPht>
   b57de:	4603      	mov	r3, r0
            if(user != NULL) {
   b57e0:	b167      	cbz	r7, b57fc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b57e2:	69e2      	ldr	r2, [r4, #28]
   b57e4:	4639      	mov	r1, r7
   b57e6:	4620      	mov	r0, r4
   b57e8:	f7ff ff5a 	bl	b56a0 <_ZN4MQTT11writeStringEPKcPht>
   b57ec:	4603      	mov	r3, r0
                if(pass != NULL) {
   b57ee:	b12e      	cbz	r6, b57fc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b57f0:	69e2      	ldr	r2, [r4, #28]
   b57f2:	4631      	mov	r1, r6
   b57f4:	4620      	mov	r0, r4
   b57f6:	f7ff ff53 	bl	b56a0 <_ZN4MQTT11writeStringEPKcPht>
   b57fa:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b57fc:	3b05      	subs	r3, #5
   b57fe:	69e2      	ldr	r2, [r4, #28]
   b5800:	b29b      	uxth	r3, r3
   b5802:	2110      	movs	r1, #16
   b5804:	4620      	mov	r0, r4
   b5806:	f7ff ff0f 	bl	b5628 <_ZN4MQTT5writeEhPht>
   b580a:	f000 fabf 	bl	b5d8c <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b580e:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b5812:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b5816:	4620      	mov	r0, r4
   b5818:	f001 fb26 	bl	b6e68 <_ZN9TCPClient9availableEv>
   b581c:	bb88      	cbnz	r0, b5882 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b581e:	f000 fab5 	bl	b5d8c <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b5822:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b5824:	1ac0      	subs	r0, r0, r3
   b5826:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5828:	4373      	muls	r3, r6
   b582a:	4298      	cmp	r0, r3
   b582c:	d9f3      	bls.n	b5816 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b582e:	4620      	mov	r0, r4
   b5830:	f001 fb74 	bl	b6f1c <_ZN9TCPClient4stopEv>
   b5834:	e035      	b.n	b58a2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b5836:	a802      	add	r0, sp, #8
   b5838:	f000 fe4e 	bl	b64d8 <_ZN9IPAddressC1EPKh>
   b583c:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5840:	462b      	mov	r3, r5
   b5842:	a902      	add	r1, sp, #8
   b5844:	4620      	mov	r0, r4
   b5846:	f001 fa93 	bl	b6d70 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b584a:	e773      	b.n	b5734 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b584c:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b5850:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b5854:	7bdb      	ldrb	r3, [r3, #15]
   b5856:	f10d 0c08 	add.w	ip, sp, #8
   b585a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b585e:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b5862:	ab02      	add	r3, sp, #8
   b5864:	cb03      	ldmia	r3!, {r0, r1}
   b5866:	f8c2 0005 	str.w	r0, [r2, #5]
   b586a:	f8c2 1009 	str.w	r1, [r2, #9]
   b586e:	f89c 3000 	ldrb.w	r3, [ip]
   b5872:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b5874:	230e      	movs	r3, #14
   b5876:	e77a      	b.n	b576e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b5878:	2002      	movs	r0, #2
   b587a:	e786      	b.n	b578a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b587c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b5880:	e78d      	b.n	b579e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b5882:	a902      	add	r1, sp, #8
   b5884:	4620      	mov	r0, r4
   b5886:	f7ff fe7d 	bl	b5584 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b588a:	2804      	cmp	r0, #4
   b588c:	d1cf      	bne.n	b582e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b588e:	69e3      	ldr	r3, [r4, #28]
   b5890:	78de      	ldrb	r6, [r3, #3]
   b5892:	2e00      	cmp	r6, #0
   b5894:	d1cb      	bne.n	b582e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b5896:	f000 fa79 	bl	b5d8c <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b589a:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b589c:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b589e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b58a2:	a801      	add	r0, sp, #4
   b58a4:	f7ff fe03 	bl	b54ae <_ZN4MQTT11MutexLockerD1Ev>
}
   b58a8:	4628      	mov	r0, r5
   b58aa:	b008      	add	sp, #32
   b58ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b58b0:	2500      	movs	r5, #0
   b58b2:	e7f9      	b.n	b58a8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b58b4:	000b78c8 	.word	0x000b78c8

000b58b8 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b58b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b58ba:	2301      	movs	r3, #1
   b58bc:	2204      	movs	r2, #4
   b58be:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b58c2:	2300      	movs	r3, #0
   b58c4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b58c8:	e9cd 3300 	strd	r3, r3, [sp]
   b58cc:	461a      	mov	r2, r3
   b58ce:	f7ff ff11 	bl	b56f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b58d2:	b007      	add	sp, #28
   b58d4:	f85d fb04 	ldr.w	pc, [sp], #4

000b58d8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b58d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b58dc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b58e0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b58e4:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b58e8:	4604      	mov	r4, r0
   b58ea:	468b      	mov	fp, r1
   b58ec:	4616      	mov	r6, r2
   b58ee:	461f      	mov	r7, r3
    if (isConnected()) {
   b58f0:	f7ff fef2 	bl	b56d8 <_ZN4MQTT11isConnectedEv>
   b58f4:	4682      	mov	sl, r0
   b58f6:	2800      	cmp	r0, #0
   b58f8:	d051      	beq.n	b599e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b58fa:	4621      	mov	r1, r4
   b58fc:	a801      	add	r0, sp, #4
   b58fe:	f7ff fdcb 	bl	b5498 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b5902:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b5906:	69e0      	ldr	r0, [r4, #28]
   b5908:	2100      	movs	r1, #0
   b590a:	f001 ff41 	bl	b7790 <memset>
        length = writeString(topic, buffer, length);
   b590e:	2305      	movs	r3, #5
   b5910:	69e2      	ldr	r2, [r4, #28]
   b5912:	4659      	mov	r1, fp
   b5914:	4620      	mov	r0, r4
   b5916:	f7ff fec3 	bl	b56a0 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b591a:	1e6b      	subs	r3, r5, #1
   b591c:	2b01      	cmp	r3, #1
   b591e:	d815      	bhi.n	b594c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b5920:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5922:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b5924:	3101      	adds	r1, #1
   b5926:	b289      	uxth	r1, r1
   b5928:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b592a:	0a09      	lsrs	r1, r1, #8
   b592c:	5419      	strb	r1, [r3, r0]
   b592e:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b5930:	69e3      	ldr	r3, [r4, #28]
   b5932:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5934:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b5936:	3002      	adds	r0, #2
   b5938:	5499      	strb	r1, [r3, r2]
   b593a:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b593c:	f1b8 0f00 	cmp.w	r8, #0
   b5940:	d004      	beq.n	b594c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b5942:	8c23      	ldrh	r3, [r4, #32]
   b5944:	1c5a      	adds	r2, r3, #1
   b5946:	8422      	strh	r2, [r4, #32]
   b5948:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b594c:	2100      	movs	r1, #0
   b594e:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5950:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b5952:	69e2      	ldr	r2, [r4, #28]
   b5954:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5956:	d90a      	bls.n	b596e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b5958:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b595c:	459c      	cmp	ip, r3
   b595e:	d906      	bls.n	b596e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b5960:	f816 c001 	ldrb.w	ip, [r6, r1]
   b5964:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5968:	3101      	adds	r1, #1
   b596a:	b289      	uxth	r1, r1
   b596c:	e7ef      	b.n	b594e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b596e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b5972:	2900      	cmp	r1, #0
   b5974:	bf0c      	ite	eq
   b5976:	2130      	moveq	r1, #48	; 0x30
   b5978:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b597a:	f1b9 0f00 	cmp.w	r9, #0
   b597e:	d001      	beq.n	b5984 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b5980:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b5984:	2d02      	cmp	r5, #2
   b5986:	d10e      	bne.n	b59a6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b5988:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b598c:	3b05      	subs	r3, #5
   b598e:	b29b      	uxth	r3, r3
   b5990:	4620      	mov	r0, r4
   b5992:	f7ff fe49 	bl	b5628 <_ZN4MQTT5writeEhPht>
   b5996:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b5998:	a801      	add	r0, sp, #4
   b599a:	f7ff fd88 	bl	b54ae <_ZN4MQTT11MutexLockerD1Ev>
}
   b599e:	4650      	mov	r0, sl
   b59a0:	b003      	add	sp, #12
   b59a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b59a6:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b59a8:	bf08      	it	eq
   b59aa:	f041 0102 	orreq.w	r1, r1, #2
   b59ae:	e7ed      	b.n	b598c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b59b0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b59b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b59b2:	9c08      	ldr	r4, [sp, #32]
   b59b4:	9403      	str	r4, [sp, #12]
   b59b6:	2400      	movs	r4, #0
   b59b8:	9402      	str	r4, [sp, #8]
   b59ba:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b59be:	9401      	str	r4, [sp, #4]
   b59c0:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b59c4:	9400      	str	r4, [sp, #0]
   b59c6:	f7ff ff87 	bl	b58d8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b59ca:	b004      	add	sp, #16
   b59cc:	bd10      	pop	{r4, pc}

000b59ce <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b59ce:	b530      	push	{r4, r5, lr}
   b59d0:	b087      	sub	sp, #28
   b59d2:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b59d4:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b59d6:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b59d8:	9204      	str	r2, [sp, #16]
   b59da:	f7fe fb29 	bl	b4030 <strlen>
   b59de:	2500      	movs	r5, #0
   b59e0:	4603      	mov	r3, r0
   b59e2:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b59e6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b59ea:	9500      	str	r5, [sp, #0]
   b59ec:	4620      	mov	r0, r4
   b59ee:	f7ff ffdf 	bl	b59b0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b59f2:	b007      	add	sp, #28
   b59f4:	bd30      	pop	{r4, r5, pc}

000b59f6 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b59f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b59f8:	4604      	mov	r4, r0
   b59fa:	460e      	mov	r6, r1
    if (isConnected()) {
   b59fc:	f7ff fe6c 	bl	b56d8 <_ZN4MQTT11isConnectedEv>
   b5a00:	4605      	mov	r5, r0
   b5a02:	b1c8      	cbz	r0, b5a38 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b5a04:	4621      	mov	r1, r4
   b5a06:	a801      	add	r0, sp, #4
   b5a08:	f7ff fd46 	bl	b5498 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b5a0c:	69e3      	ldr	r3, [r4, #28]
   b5a0e:	2262      	movs	r2, #98	; 0x62
   b5a10:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b5a12:	69e3      	ldr	r3, [r4, #28]
   b5a14:	2202      	movs	r2, #2
   b5a16:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5a18:	69e3      	ldr	r3, [r4, #28]
   b5a1a:	0a32      	lsrs	r2, r6, #8
   b5a1c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5a1e:	69e3      	ldr	r3, [r4, #28]
   b5a20:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b5a22:	69e1      	ldr	r1, [r4, #28]
   b5a24:	2204      	movs	r2, #4
   b5a26:	4620      	mov	r0, r4
   b5a28:	f000 fff3 	bl	b6a12 <_ZN9TCPClient5writeEPKhj>
   b5a2c:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5a2e:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5a30:	bf18      	it	ne
   b5a32:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5a34:	f7ff fd3b 	bl	b54ae <_ZN4MQTT11MutexLockerD1Ev>
}
   b5a38:	4628      	mov	r0, r5
   b5a3a:	b002      	add	sp, #8
   b5a3c:	bd70      	pop	{r4, r5, r6, pc}

000b5a3e <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b5a3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5a40:	4604      	mov	r4, r0
   b5a42:	460e      	mov	r6, r1
    if (isConnected()) {
   b5a44:	f7ff fe48 	bl	b56d8 <_ZN4MQTT11isConnectedEv>
   b5a48:	4605      	mov	r5, r0
   b5a4a:	b1c8      	cbz	r0, b5a80 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b5a4c:	4621      	mov	r1, r4
   b5a4e:	a801      	add	r0, sp, #4
   b5a50:	f7ff fd22 	bl	b5498 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b5a54:	69e3      	ldr	r3, [r4, #28]
   b5a56:	2272      	movs	r2, #114	; 0x72
   b5a58:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b5a5a:	69e3      	ldr	r3, [r4, #28]
   b5a5c:	2202      	movs	r2, #2
   b5a5e:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5a60:	69e3      	ldr	r3, [r4, #28]
   b5a62:	0a32      	lsrs	r2, r6, #8
   b5a64:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5a66:	69e3      	ldr	r3, [r4, #28]
   b5a68:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b5a6a:	69e1      	ldr	r1, [r4, #28]
   b5a6c:	2204      	movs	r2, #4
   b5a6e:	4620      	mov	r0, r4
   b5a70:	f000 ffcf 	bl	b6a12 <_ZN9TCPClient5writeEPKhj>
   b5a74:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5a76:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5a78:	bf18      	it	ne
   b5a7a:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5a7c:	f7ff fd17 	bl	b54ae <_ZN4MQTT11MutexLockerD1Ev>
}
   b5a80:	4628      	mov	r0, r5
   b5a82:	b002      	add	sp, #8
   b5a84:	bd70      	pop	{r4, r5, r6, pc}

000b5a86 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b5a86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a8a:	ed2d 8b02 	vpush	{d8}
   b5a8e:	b087      	sub	sp, #28
   b5a90:	af00      	add	r7, sp, #0
   b5a92:	4604      	mov	r4, r0
    if (isConnected()) {
   b5a94:	f7ff fe20 	bl	b56d8 <_ZN4MQTT11isConnectedEv>
   b5a98:	4681      	mov	r9, r0
   b5a9a:	b1f8      	cbz	r0, b5adc <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b5a9c:	4621      	mov	r1, r4
   b5a9e:	f107 0014 	add.w	r0, r7, #20
   b5aa2:	f7ff fcf9 	bl	b5498 <_ZN4MQTT11MutexLockerC1EPS_>
   b5aa6:	f000 f971 	bl	b5d8c <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b5aaa:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5ab0:	4353      	muls	r3, r2
   b5ab2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b5ab4:	1a82      	subs	r2, r0, r2
   b5ab6:	429a      	cmp	r2, r3
   b5ab8:	4606      	mov	r6, r0
   b5aba:	d803      	bhi.n	b5ac4 <_ZN4MQTT4loopEv+0x3e>
   b5abc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5abe:	1a82      	subs	r2, r0, r2
   b5ac0:	4293      	cmp	r3, r2
   b5ac2:	d221      	bcs.n	b5b08 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b5ac4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b5ac8:	b17b      	cbz	r3, b5aea <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b5aca:	4620      	mov	r0, r4
   b5acc:	f001 fa26 	bl	b6f1c <_ZN9TCPClient4stopEv>
                return false;
   b5ad0:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b5ad4:	f107 0014 	add.w	r0, r7, #20
   b5ad8:	f7ff fce9 	bl	b54ae <_ZN4MQTT11MutexLockerD1Ev>
}
   b5adc:	4648      	mov	r0, r9
   b5ade:	371c      	adds	r7, #28
   b5ae0:	46bd      	mov	sp, r7
   b5ae2:	ecbd 8b02 	vpop	{d8}
   b5ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b5aea:	69e2      	ldr	r2, [r4, #28]
   b5aec:	21c0      	movs	r1, #192	; 0xc0
   b5aee:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b5af0:	69e2      	ldr	r2, [r4, #28]
   b5af2:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b5af4:	69e1      	ldr	r1, [r4, #28]
   b5af6:	2202      	movs	r2, #2
   b5af8:	4620      	mov	r0, r4
   b5afa:	f000 ff8a 	bl	b6a12 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b5afe:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b5b02:	2301      	movs	r3, #1
   b5b04:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b5b08:	4620      	mov	r0, r4
   b5b0a:	f001 f9ad 	bl	b6e68 <_ZN9TCPClient9availableEv>
   b5b0e:	2800      	cmp	r0, #0
   b5b10:	d0e0      	beq.n	b5ad4 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b5b12:	f107 0113 	add.w	r1, r7, #19
   b5b16:	4620      	mov	r0, r4
   b5b18:	f7ff fd34 	bl	b5584 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b5b1c:	4683      	mov	fp, r0
   b5b1e:	2800      	cmp	r0, #0
   b5b20:	d0d8      	beq.n	b5ad4 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b5b22:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b5b24:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b5b26:	7819      	ldrb	r1, [r3, #0]
   b5b28:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b5b2c:	2a30      	cmp	r2, #48	; 0x30
   b5b2e:	d17f      	bne.n	b5c30 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b5b30:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b5b34:	f1ba 0f00 	cmp.w	sl, #0
   b5b38:	d0cc      	beq.n	b5ad4 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5b3a:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b5b3e:	466a      	mov	r2, sp
   b5b40:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5b44:	eb03 020c 	add.w	r2, r3, ip
   b5b48:	7851      	ldrb	r1, [r2, #1]
   b5b4a:	7895      	ldrb	r5, [r2, #2]
   b5b4c:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b5b50:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b5b52:	f105 0208 	add.w	r2, r5, #8
   b5b56:	4669      	mov	r1, sp
   b5b58:	08d2      	lsrs	r2, r2, #3
   b5b5a:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b5b5e:	4695      	mov	sp, r2
   b5b60:	f10c 0203 	add.w	r2, ip, #3
   b5b64:	60fa      	str	r2, [r7, #12]
   b5b66:	eb03 0e02 	add.w	lr, r3, r2
   b5b6a:	eb0d 0205 	add.w	r2, sp, r5
   b5b6e:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b5b70:	f8c7 d008 	str.w	sp, [r7, #8]
   b5b74:	607a      	str	r2, [r7, #4]
   b5b76:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b5b7a:	428a      	cmp	r2, r1
   b5b7c:	d006      	beq.n	b5b8c <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b5b7e:	460a      	mov	r2, r1
   b5b80:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b5b84:	f802 8b01 	strb.w	r8, [r2], #1
   b5b88:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b5b8a:	e7f4      	b.n	b5b76 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b5b8c:	2200      	movs	r2, #0
   b5b8e:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5b90:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b94:	68f9      	ldr	r1, [r7, #12]
   b5b96:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b5b9a:	ebab 020c 	sub.w	r2, fp, ip
   b5b9e:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5ba0:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b5ba4:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5ba8:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5baa:	d125      	bne.n	b5bf8 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5bac:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5bb0:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b5bb2:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5bb4:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b5bb8:	f10c 0105 	add.w	r1, ip, #5
   b5bbc:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b5bbe:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5bc0:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b5bc4:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b5bc6:	69e3      	ldr	r3, [r4, #28]
   b5bc8:	2240      	movs	r2, #64	; 0x40
   b5bca:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b5bcc:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5bce:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b5bd2:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b5bd6:	69e3      	ldr	r3, [r4, #28]
   b5bd8:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b5bdc:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b5bde:	69e3      	ldr	r3, [r4, #28]
   b5be0:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b5be4:	69e1      	ldr	r1, [r4, #28]
   b5be6:	2204      	movs	r2, #4
   b5be8:	4620      	mov	r0, r4
   b5bea:	f000 ff12 	bl	b6a12 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b5bee:	6266      	str	r6, [r4, #36]	; 0x24
   b5bf0:	ee18 3a10 	vmov	r3, s16
   b5bf4:	469d      	mov	sp, r3
   b5bf6:	e76d      	b.n	b5ad4 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b5bf8:	f1b8 0f04 	cmp.w	r8, #4
   b5bfc:	d115      	bne.n	b5c2a <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5bfe:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5c02:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5c04:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5c06:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b5c0a:	f10c 0105 	add.w	r1, ip, #5
   b5c0e:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5c10:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5c12:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5c16:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b5c18:	69e3      	ldr	r3, [r4, #28]
   b5c1a:	2250      	movs	r2, #80	; 0x50
   b5c1c:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b5c1e:	69e3      	ldr	r3, [r4, #28]
   b5c20:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5c22:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b5c26:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b5c28:	e7d5      	b.n	b5bd6 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b5c2a:	4419      	add	r1, r3
   b5c2c:	47d0      	blx	sl
   b5c2e:	e7df      	b.n	b5bf0 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b5c30:	2a50      	cmp	r2, #80	; 0x50
   b5c32:	d108      	bne.n	b5c46 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b5c34:	789a      	ldrb	r2, [r3, #2]
   b5c36:	78d9      	ldrb	r1, [r3, #3]
   b5c38:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b5c3c:	b289      	uxth	r1, r1
   b5c3e:	4620      	mov	r0, r4
   b5c40:	f7ff fed9 	bl	b59f6 <_ZN4MQTT14publishReleaseEt>
   b5c44:	e746      	b.n	b5ad4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b5c46:	2a40      	cmp	r2, #64	; 0x40
   b5c48:	d112      	bne.n	b5c70 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b5c4a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b5c4c:	2a00      	cmp	r2, #0
   b5c4e:	f43f af41 	beq.w	b5ad4 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b5c52:	f1bb 0f04 	cmp.w	fp, #4
   b5c56:	f47f af3d 	bne.w	b5ad4 <_ZN4MQTT4loopEv+0x4e>
   b5c5a:	f011 0f06 	tst.w	r1, #6
   b5c5e:	f47f af39 	bne.w	b5ad4 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b5c62:	7899      	ldrb	r1, [r3, #2]
   b5c64:	78d8      	ldrb	r0, [r3, #3]
   b5c66:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b5c6a:	b280      	uxth	r0, r0
   b5c6c:	4790      	blx	r2
   b5c6e:	e731      	b.n	b5ad4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b5c70:	2a60      	cmp	r2, #96	; 0x60
   b5c72:	d108      	bne.n	b5c86 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b5c74:	789a      	ldrb	r2, [r3, #2]
   b5c76:	78d9      	ldrb	r1, [r3, #3]
   b5c78:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b5c7c:	b289      	uxth	r1, r1
   b5c7e:	4620      	mov	r0, r4
   b5c80:	f7ff fedd 	bl	b5a3e <_ZN4MQTT15publishCompleteEt>
   b5c84:	e726      	b.n	b5ad4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b5c86:	2a70      	cmp	r2, #112	; 0x70
   b5c88:	d0df      	beq.n	b5c4a <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b5c8a:	2a90      	cmp	r2, #144	; 0x90
   b5c8c:	f43f af22 	beq.w	b5ad4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b5c90:	2ac0      	cmp	r2, #192	; 0xc0
   b5c92:	d10a      	bne.n	b5caa <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b5c94:	22d0      	movs	r2, #208	; 0xd0
   b5c96:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b5c98:	69e3      	ldr	r3, [r4, #28]
   b5c9a:	2200      	movs	r2, #0
   b5c9c:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b5c9e:	69e1      	ldr	r1, [r4, #28]
   b5ca0:	2202      	movs	r2, #2
   b5ca2:	4620      	mov	r0, r4
   b5ca4:	f000 feb5 	bl	b6a12 <_ZN9TCPClient5writeEPKhj>
   b5ca8:	e714      	b.n	b5ad4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b5caa:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b5cac:	bf04      	itt	eq
   b5cae:	2300      	moveq	r3, #0
   b5cb0:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b5cb4:	e70e      	b.n	b5ad4 <_ZN4MQTT4loopEv+0x4e>

000b5cb6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b5cb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5cb8:	4604      	mov	r4, r0
   b5cba:	460f      	mov	r7, r1
   b5cbc:	4616      	mov	r6, r2
    if (isConnected()) {
   b5cbe:	f7ff fd0b 	bl	b56d8 <_ZN4MQTT11isConnectedEv>
   b5cc2:	4605      	mov	r5, r0
   b5cc4:	b310      	cbz	r0, b5d0c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b5cc6:	4621      	mov	r1, r4
   b5cc8:	a801      	add	r0, sp, #4
   b5cca:	f7ff fbe5 	bl	b5498 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b5cce:	8c23      	ldrh	r3, [r4, #32]
   b5cd0:	3301      	adds	r3, #1
   b5cd2:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b5cd4:	b1eb      	cbz	r3, b5d12 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b5cd6:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b5cd8:	8c23      	ldrh	r3, [r4, #32]
   b5cda:	69e2      	ldr	r2, [r4, #28]
   b5cdc:	0a1b      	lsrs	r3, r3, #8
   b5cde:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b5ce0:	69e3      	ldr	r3, [r4, #28]
   b5ce2:	8c22      	ldrh	r2, [r4, #32]
   b5ce4:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b5ce6:	69e2      	ldr	r2, [r4, #28]
   b5ce8:	2307      	movs	r3, #7
   b5cea:	4639      	mov	r1, r7
   b5cec:	4620      	mov	r0, r4
   b5cee:	f7ff fcd7 	bl	b56a0 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b5cf2:	69e3      	ldr	r3, [r4, #28]
   b5cf4:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b5cf6:	3804      	subs	r0, #4
   b5cf8:	b283      	uxth	r3, r0
   b5cfa:	69e2      	ldr	r2, [r4, #28]
   b5cfc:	2182      	movs	r1, #130	; 0x82
   b5cfe:	4620      	mov	r0, r4
   b5d00:	f7ff fc92 	bl	b5628 <_ZN4MQTT5writeEhPht>
   b5d04:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b5d06:	a801      	add	r0, sp, #4
   b5d08:	f7ff fbd1 	bl	b54ae <_ZN4MQTT11MutexLockerD1Ev>
}
   b5d0c:	4628      	mov	r0, r5
   b5d0e:	b003      	add	sp, #12
   b5d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b5d12:	2301      	movs	r3, #1
   b5d14:	e7df      	b.n	b5cd6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b5d16 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b5d16:	2200      	movs	r2, #0
   b5d18:	f7ff bfcd 	b.w	b5cb6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b5d1c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5d1c:	b508      	push	{r3, lr}
   b5d1e:	4b02      	ldr	r3, [pc, #8]	; (b5d28 <os_mutex_create+0xc>)
   b5d20:	681b      	ldr	r3, [r3, #0]
   b5d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5d24:	9301      	str	r3, [sp, #4]
   b5d26:	bd08      	pop	{r3, pc}
   b5d28:	00030248 	.word	0x00030248

000b5d2c <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b5d2c:	b508      	push	{r3, lr}
   b5d2e:	4b02      	ldr	r3, [pc, #8]	; (b5d38 <os_mutex_destroy+0xc>)
   b5d30:	681b      	ldr	r3, [r3, #0]
   b5d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5d34:	9301      	str	r3, [sp, #4]
   b5d36:	bd08      	pop	{r3, pc}
   b5d38:	00030248 	.word	0x00030248

000b5d3c <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b5d3c:	b508      	push	{r3, lr}
   b5d3e:	4b02      	ldr	r3, [pc, #8]	; (b5d48 <os_mutex_lock+0xc>)
   b5d40:	681b      	ldr	r3, [r3, #0]
   b5d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5d44:	9301      	str	r3, [sp, #4]
   b5d46:	bd08      	pop	{r3, pc}
   b5d48:	00030248 	.word	0x00030248

000b5d4c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b5d4c:	b508      	push	{r3, lr}
   b5d4e:	4b02      	ldr	r3, [pc, #8]	; (b5d58 <os_mutex_unlock+0xc>)
   b5d50:	681b      	ldr	r3, [r3, #0]
   b5d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5d54:	9301      	str	r3, [sp, #4]
   b5d56:	bd08      	pop	{r3, pc}
   b5d58:	00030248 	.word	0x00030248

000b5d5c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5d5c:	b508      	push	{r3, lr}
   b5d5e:	4b02      	ldr	r3, [pc, #8]	; (b5d68 <os_mutex_recursive_create+0xc>)
   b5d60:	681b      	ldr	r3, [r3, #0]
   b5d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5d64:	9301      	str	r3, [sp, #4]
   b5d66:	bd08      	pop	{r3, pc}
   b5d68:	00030248 	.word	0x00030248

000b5d6c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5d6c:	b508      	push	{r3, lr}
   b5d6e:	4b02      	ldr	r3, [pc, #8]	; (b5d78 <HAL_RNG_GetRandomNumber+0xc>)
   b5d70:	681b      	ldr	r3, [r3, #0]
   b5d72:	685b      	ldr	r3, [r3, #4]
   b5d74:	9301      	str	r3, [sp, #4]
   b5d76:	bd08      	pop	{r3, pc}
   b5d78:	00030218 	.word	0x00030218

000b5d7c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5d7c:	b508      	push	{r3, lr}
   b5d7e:	4b02      	ldr	r3, [pc, #8]	; (b5d88 <HAL_Delay_Microseconds+0xc>)
   b5d80:	681b      	ldr	r3, [r3, #0]
   b5d82:	68db      	ldr	r3, [r3, #12]
   b5d84:	9301      	str	r3, [sp, #4]
   b5d86:	bd08      	pop	{r3, pc}
   b5d88:	00030218 	.word	0x00030218

000b5d8c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5d8c:	b508      	push	{r3, lr}
   b5d8e:	4b02      	ldr	r3, [pc, #8]	; (b5d98 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5d90:	681b      	ldr	r3, [r3, #0]
   b5d92:	695b      	ldr	r3, [r3, #20]
   b5d94:	9301      	str	r3, [sp, #4]
   b5d96:	bd08      	pop	{r3, pc}
   b5d98:	00030218 	.word	0x00030218

000b5d9c <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b5d9c:	b508      	push	{r3, lr}
   b5d9e:	4b02      	ldr	r3, [pc, #8]	; (b5da8 <hal_gpio_mode+0xc>)
   b5da0:	681b      	ldr	r3, [r3, #0]
   b5da2:	689b      	ldr	r3, [r3, #8]
   b5da4:	9301      	str	r3, [sp, #4]
   b5da6:	bd08      	pop	{r3, pc}
   b5da8:	0003022c 	.word	0x0003022c

000b5dac <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b5dac:	b508      	push	{r3, lr}
   b5dae:	4b02      	ldr	r3, [pc, #8]	; (b5db8 <hal_gpio_get_mode+0xc>)
   b5db0:	681b      	ldr	r3, [r3, #0]
   b5db2:	68db      	ldr	r3, [r3, #12]
   b5db4:	9301      	str	r3, [sp, #4]
   b5db6:	bd08      	pop	{r3, pc}
   b5db8:	0003022c 	.word	0x0003022c

000b5dbc <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b5dbc:	b508      	push	{r3, lr}
   b5dbe:	4b02      	ldr	r3, [pc, #8]	; (b5dc8 <hal_gpio_write+0xc>)
   b5dc0:	681b      	ldr	r3, [r3, #0]
   b5dc2:	691b      	ldr	r3, [r3, #16]
   b5dc4:	9301      	str	r3, [sp, #4]
   b5dc6:	bd08      	pop	{r3, pc}
   b5dc8:	0003022c 	.word	0x0003022c

000b5dcc <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b5dcc:	b508      	push	{r3, lr}
   b5dce:	4b02      	ldr	r3, [pc, #8]	; (b5dd8 <hal_gpio_read+0xc>)
   b5dd0:	681b      	ldr	r3, [r3, #0]
   b5dd2:	695b      	ldr	r3, [r3, #20]
   b5dd4:	9301      	str	r3, [sp, #4]
   b5dd6:	bd08      	pop	{r3, pc}
   b5dd8:	0003022c 	.word	0x0003022c

000b5ddc <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b5ddc:	b508      	push	{r3, lr}
   b5dde:	4b02      	ldr	r3, [pc, #8]	; (b5de8 <hal_i2c_set_speed+0xc>)
   b5de0:	681b      	ldr	r3, [r3, #0]
   b5de2:	681b      	ldr	r3, [r3, #0]
   b5de4:	9301      	str	r3, [sp, #4]
   b5de6:	bd08      	pop	{r3, pc}
   b5de8:	00030228 	.word	0x00030228

000b5dec <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5dec:	b508      	push	{r3, lr}
   b5dee:	4b02      	ldr	r3, [pc, #8]	; (b5df8 <hal_i2c_begin+0xc>)
   b5df0:	681b      	ldr	r3, [r3, #0]
   b5df2:	68db      	ldr	r3, [r3, #12]
   b5df4:	9301      	str	r3, [sp, #4]
   b5df6:	bd08      	pop	{r3, pc}
   b5df8:	00030228 	.word	0x00030228

000b5dfc <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5dfc:	b508      	push	{r3, lr}
   b5dfe:	4b02      	ldr	r3, [pc, #8]	; (b5e08 <hal_i2c_begin_transmission+0xc>)
   b5e00:	681b      	ldr	r3, [r3, #0]
   b5e02:	699b      	ldr	r3, [r3, #24]
   b5e04:	9301      	str	r3, [sp, #4]
   b5e06:	bd08      	pop	{r3, pc}
   b5e08:	00030228 	.word	0x00030228

000b5e0c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5e0c:	b508      	push	{r3, lr}
   b5e0e:	4b02      	ldr	r3, [pc, #8]	; (b5e18 <hal_i2c_end_transmission+0xc>)
   b5e10:	681b      	ldr	r3, [r3, #0]
   b5e12:	69db      	ldr	r3, [r3, #28]
   b5e14:	9301      	str	r3, [sp, #4]
   b5e16:	bd08      	pop	{r3, pc}
   b5e18:	00030228 	.word	0x00030228

000b5e1c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5e1c:	b508      	push	{r3, lr}
   b5e1e:	4b02      	ldr	r3, [pc, #8]	; (b5e28 <hal_i2c_write+0xc>)
   b5e20:	681b      	ldr	r3, [r3, #0]
   b5e22:	6a1b      	ldr	r3, [r3, #32]
   b5e24:	9301      	str	r3, [sp, #4]
   b5e26:	bd08      	pop	{r3, pc}
   b5e28:	00030228 	.word	0x00030228

000b5e2c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5e2c:	b508      	push	{r3, lr}
   b5e2e:	4b02      	ldr	r3, [pc, #8]	; (b5e38 <hal_i2c_available+0xc>)
   b5e30:	681b      	ldr	r3, [r3, #0]
   b5e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5e34:	9301      	str	r3, [sp, #4]
   b5e36:	bd08      	pop	{r3, pc}
   b5e38:	00030228 	.word	0x00030228

000b5e3c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5e3c:	b508      	push	{r3, lr}
   b5e3e:	4b02      	ldr	r3, [pc, #8]	; (b5e48 <hal_i2c_read+0xc>)
   b5e40:	681b      	ldr	r3, [r3, #0]
   b5e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5e44:	9301      	str	r3, [sp, #4]
   b5e46:	bd08      	pop	{r3, pc}
   b5e48:	00030228 	.word	0x00030228

000b5e4c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5e4c:	b508      	push	{r3, lr}
   b5e4e:	4b02      	ldr	r3, [pc, #8]	; (b5e58 <hal_i2c_peek+0xc>)
   b5e50:	681b      	ldr	r3, [r3, #0]
   b5e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5e54:	9301      	str	r3, [sp, #4]
   b5e56:	bd08      	pop	{r3, pc}
   b5e58:	00030228 	.word	0x00030228

000b5e5c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5e5c:	b508      	push	{r3, lr}
   b5e5e:	4b02      	ldr	r3, [pc, #8]	; (b5e68 <hal_i2c_flush+0xc>)
   b5e60:	681b      	ldr	r3, [r3, #0]
   b5e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5e64:	9301      	str	r3, [sp, #4]
   b5e66:	bd08      	pop	{r3, pc}
   b5e68:	00030228 	.word	0x00030228

000b5e6c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5e6c:	b508      	push	{r3, lr}
   b5e6e:	4b02      	ldr	r3, [pc, #8]	; (b5e78 <hal_i2c_is_enabled+0xc>)
   b5e70:	681b      	ldr	r3, [r3, #0]
   b5e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5e74:	9301      	str	r3, [sp, #4]
   b5e76:	bd08      	pop	{r3, pc}
   b5e78:	00030228 	.word	0x00030228

000b5e7c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5e7c:	b508      	push	{r3, lr}
   b5e7e:	4b02      	ldr	r3, [pc, #8]	; (b5e88 <hal_i2c_init+0xc>)
   b5e80:	681b      	ldr	r3, [r3, #0]
   b5e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5e84:	9301      	str	r3, [sp, #4]
   b5e86:	bd08      	pop	{r3, pc}
   b5e88:	00030228 	.word	0x00030228

000b5e8c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5e8c:	b508      	push	{r3, lr}
   b5e8e:	4b02      	ldr	r3, [pc, #8]	; (b5e98 <if_index_to_name+0xc>)
   b5e90:	681b      	ldr	r3, [r3, #0]
   b5e92:	695b      	ldr	r3, [r3, #20]
   b5e94:	9301      	str	r3, [sp, #4]
   b5e96:	bd08      	pop	{r3, pc}
   b5e98:	0003026c 	.word	0x0003026c

000b5e9c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5e9c:	b508      	push	{r3, lr}
   b5e9e:	4b02      	ldr	r3, [pc, #8]	; (b5ea8 <inet_inet_ntop+0xc>)
   b5ea0:	681b      	ldr	r3, [r3, #0]
   b5ea2:	695b      	ldr	r3, [r3, #20]
   b5ea4:	9301      	str	r3, [sp, #4]
   b5ea6:	bd08      	pop	{r3, pc}
   b5ea8:	00030264 	.word	0x00030264

000b5eac <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5eac:	b508      	push	{r3, lr}
   b5eae:	4b02      	ldr	r3, [pc, #8]	; (b5eb8 <inet_htonl+0xc>)
   b5eb0:	681b      	ldr	r3, [r3, #0]
   b5eb2:	6a1b      	ldr	r3, [r3, #32]
   b5eb4:	9301      	str	r3, [sp, #4]
   b5eb6:	bd08      	pop	{r3, pc}
   b5eb8:	00030264 	.word	0x00030264

000b5ebc <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5ebc:	b508      	push	{r3, lr}
   b5ebe:	4b02      	ldr	r3, [pc, #8]	; (b5ec8 <inet_htons+0xc>)
   b5ec0:	681b      	ldr	r3, [r3, #0]
   b5ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5ec4:	9301      	str	r3, [sp, #4]
   b5ec6:	bd08      	pop	{r3, pc}
   b5ec8:	00030264 	.word	0x00030264

000b5ecc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5ecc:	b508      	push	{r3, lr}
   b5ece:	4b02      	ldr	r3, [pc, #8]	; (b5ed8 <netdb_freeaddrinfo+0xc>)
   b5ed0:	681b      	ldr	r3, [r3, #0]
   b5ed2:	689b      	ldr	r3, [r3, #8]
   b5ed4:	9301      	str	r3, [sp, #4]
   b5ed6:	bd08      	pop	{r3, pc}
   b5ed8:	00030268 	.word	0x00030268

000b5edc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5edc:	b508      	push	{r3, lr}
   b5ede:	4b02      	ldr	r3, [pc, #8]	; (b5ee8 <netdb_getaddrinfo+0xc>)
   b5ee0:	681b      	ldr	r3, [r3, #0]
   b5ee2:	68db      	ldr	r3, [r3, #12]
   b5ee4:	9301      	str	r3, [sp, #4]
   b5ee6:	bd08      	pop	{r3, pc}
   b5ee8:	00030268 	.word	0x00030268

000b5eec <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5eec:	b508      	push	{r3, lr}
   b5eee:	4b02      	ldr	r3, [pc, #8]	; (b5ef8 <sock_setsockopt+0xc>)
   b5ef0:	681b      	ldr	r3, [r3, #0]
   b5ef2:	699b      	ldr	r3, [r3, #24]
   b5ef4:	9301      	str	r3, [sp, #4]
   b5ef6:	bd08      	pop	{r3, pc}
   b5ef8:	00030238 	.word	0x00030238

000b5efc <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5efc:	b508      	push	{r3, lr}
   b5efe:	4b02      	ldr	r3, [pc, #8]	; (b5f08 <sock_close+0xc>)
   b5f00:	681b      	ldr	r3, [r3, #0]
   b5f02:	69db      	ldr	r3, [r3, #28]
   b5f04:	9301      	str	r3, [sp, #4]
   b5f06:	bd08      	pop	{r3, pc}
   b5f08:	00030238 	.word	0x00030238

000b5f0c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5f0c:	b508      	push	{r3, lr}
   b5f0e:	4b02      	ldr	r3, [pc, #8]	; (b5f18 <sock_connect+0xc>)
   b5f10:	681b      	ldr	r3, [r3, #0]
   b5f12:	6a1b      	ldr	r3, [r3, #32]
   b5f14:	9301      	str	r3, [sp, #4]
   b5f16:	bd08      	pop	{r3, pc}
   b5f18:	00030238 	.word	0x00030238

000b5f1c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5f1c:	b508      	push	{r3, lr}
   b5f1e:	4b02      	ldr	r3, [pc, #8]	; (b5f28 <sock_recv+0xc>)
   b5f20:	681b      	ldr	r3, [r3, #0]
   b5f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f24:	9301      	str	r3, [sp, #4]
   b5f26:	bd08      	pop	{r3, pc}
   b5f28:	00030238 	.word	0x00030238

000b5f2c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5f2c:	b508      	push	{r3, lr}
   b5f2e:	4b02      	ldr	r3, [pc, #8]	; (b5f38 <sock_send+0xc>)
   b5f30:	681b      	ldr	r3, [r3, #0]
   b5f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f34:	9301      	str	r3, [sp, #4]
   b5f36:	bd08      	pop	{r3, pc}
   b5f38:	00030238 	.word	0x00030238

000b5f3c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5f3c:	b508      	push	{r3, lr}
   b5f3e:	4b02      	ldr	r3, [pc, #8]	; (b5f48 <sock_socket+0xc>)
   b5f40:	681b      	ldr	r3, [r3, #0]
   b5f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5f44:	9301      	str	r3, [sp, #4]
   b5f46:	bd08      	pop	{r3, pc}
   b5f48:	00030238 	.word	0x00030238

000b5f4c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5f4c:	b508      	push	{r3, lr}
   b5f4e:	4b02      	ldr	r3, [pc, #8]	; (b5f58 <hal_spi_begin+0xc>)
   b5f50:	681b      	ldr	r3, [r3, #0]
   b5f52:	681b      	ldr	r3, [r3, #0]
   b5f54:	9301      	str	r3, [sp, #4]
   b5f56:	bd08      	pop	{r3, pc}
   b5f58:	00030230 	.word	0x00030230

000b5f5c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5f5c:	b508      	push	{r3, lr}
   b5f5e:	4b02      	ldr	r3, [pc, #8]	; (b5f68 <hal_spi_transfer+0xc>)
   b5f60:	681b      	ldr	r3, [r3, #0]
   b5f62:	695b      	ldr	r3, [r3, #20]
   b5f64:	9301      	str	r3, [sp, #4]
   b5f66:	bd08      	pop	{r3, pc}
   b5f68:	00030230 	.word	0x00030230

000b5f6c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5f6c:	b508      	push	{r3, lr}
   b5f6e:	4b02      	ldr	r3, [pc, #8]	; (b5f78 <hal_spi_init+0xc>)
   b5f70:	681b      	ldr	r3, [r3, #0]
   b5f72:	69db      	ldr	r3, [r3, #28]
   b5f74:	9301      	str	r3, [sp, #4]
   b5f76:	bd08      	pop	{r3, pc}
   b5f78:	00030230 	.word	0x00030230

000b5f7c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5f7c:	b508      	push	{r3, lr}
   b5f7e:	4b02      	ldr	r3, [pc, #8]	; (b5f88 <hal_spi_is_enabled+0xc>)
   b5f80:	681b      	ldr	r3, [r3, #0]
   b5f82:	6a1b      	ldr	r3, [r3, #32]
   b5f84:	9301      	str	r3, [sp, #4]
   b5f86:	bd08      	pop	{r3, pc}
   b5f88:	00030230 	.word	0x00030230

000b5f8c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5f8c:	b508      	push	{r3, lr}
   b5f8e:	4b02      	ldr	r3, [pc, #8]	; (b5f98 <hal_spi_info+0xc>)
   b5f90:	681b      	ldr	r3, [r3, #0]
   b5f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5f94:	9301      	str	r3, [sp, #4]
   b5f96:	bd08      	pop	{r3, pc}
   b5f98:	00030230 	.word	0x00030230

000b5f9c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5f9c:	b508      	push	{r3, lr}
   b5f9e:	4b02      	ldr	r3, [pc, #8]	; (b5fa8 <hal_spi_set_settings+0xc>)
   b5fa0:	681b      	ldr	r3, [r3, #0]
   b5fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5fa4:	9301      	str	r3, [sp, #4]
   b5fa6:	bd08      	pop	{r3, pc}
   b5fa8:	00030230 	.word	0x00030230

000b5fac <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5fac:	b508      	push	{r3, lr}
   b5fae:	4b02      	ldr	r3, [pc, #8]	; (b5fb8 <hal_spi_acquire+0xc>)
   b5fb0:	681b      	ldr	r3, [r3, #0]
   b5fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5fb4:	9301      	str	r3, [sp, #4]
   b5fb6:	bd08      	pop	{r3, pc}
   b5fb8:	00030230 	.word	0x00030230

000b5fbc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5fbc:	b508      	push	{r3, lr}
   b5fbe:	4b02      	ldr	r3, [pc, #8]	; (b5fc8 <hal_spi_release+0xc>)
   b5fc0:	681b      	ldr	r3, [r3, #0]
   b5fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5fc4:	9301      	str	r3, [sp, #4]
   b5fc6:	bd08      	pop	{r3, pc}
   b5fc8:	00030230 	.word	0x00030230

000b5fcc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5fcc:	b508      	push	{r3, lr}
   b5fce:	4b02      	ldr	r3, [pc, #8]	; (b5fd8 <hal_usart_write+0xc>)
   b5fd0:	681b      	ldr	r3, [r3, #0]
   b5fd2:	68db      	ldr	r3, [r3, #12]
   b5fd4:	9301      	str	r3, [sp, #4]
   b5fd6:	bd08      	pop	{r3, pc}
   b5fd8:	0003023c 	.word	0x0003023c

000b5fdc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5fdc:	b508      	push	{r3, lr}
   b5fde:	4b02      	ldr	r3, [pc, #8]	; (b5fe8 <hal_usart_available+0xc>)
   b5fe0:	681b      	ldr	r3, [r3, #0]
   b5fe2:	691b      	ldr	r3, [r3, #16]
   b5fe4:	9301      	str	r3, [sp, #4]
   b5fe6:	bd08      	pop	{r3, pc}
   b5fe8:	0003023c 	.word	0x0003023c

000b5fec <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5fec:	b508      	push	{r3, lr}
   b5fee:	4b02      	ldr	r3, [pc, #8]	; (b5ff8 <hal_usart_read+0xc>)
   b5ff0:	681b      	ldr	r3, [r3, #0]
   b5ff2:	695b      	ldr	r3, [r3, #20]
   b5ff4:	9301      	str	r3, [sp, #4]
   b5ff6:	bd08      	pop	{r3, pc}
   b5ff8:	0003023c 	.word	0x0003023c

000b5ffc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5ffc:	b508      	push	{r3, lr}
   b5ffe:	4b02      	ldr	r3, [pc, #8]	; (b6008 <hal_usart_peek+0xc>)
   b6000:	681b      	ldr	r3, [r3, #0]
   b6002:	699b      	ldr	r3, [r3, #24]
   b6004:	9301      	str	r3, [sp, #4]
   b6006:	bd08      	pop	{r3, pc}
   b6008:	0003023c 	.word	0x0003023c

000b600c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b600c:	b508      	push	{r3, lr}
   b600e:	4b02      	ldr	r3, [pc, #8]	; (b6018 <hal_usart_flush+0xc>)
   b6010:	681b      	ldr	r3, [r3, #0]
   b6012:	69db      	ldr	r3, [r3, #28]
   b6014:	9301      	str	r3, [sp, #4]
   b6016:	bd08      	pop	{r3, pc}
   b6018:	0003023c 	.word	0x0003023c

000b601c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b601c:	b508      	push	{r3, lr}
   b601e:	4b02      	ldr	r3, [pc, #8]	; (b6028 <hal_usart_is_enabled+0xc>)
   b6020:	681b      	ldr	r3, [r3, #0]
   b6022:	6a1b      	ldr	r3, [r3, #32]
   b6024:	9301      	str	r3, [sp, #4]
   b6026:	bd08      	pop	{r3, pc}
   b6028:	0003023c 	.word	0x0003023c

000b602c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b602c:	b508      	push	{r3, lr}
   b602e:	4b02      	ldr	r3, [pc, #8]	; (b6038 <hal_usart_available_data_for_write+0xc>)
   b6030:	681b      	ldr	r3, [r3, #0]
   b6032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6034:	9301      	str	r3, [sp, #4]
   b6036:	bd08      	pop	{r3, pc}
   b6038:	0003023c 	.word	0x0003023c

000b603c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b603c:	b508      	push	{r3, lr}
   b603e:	4b02      	ldr	r3, [pc, #8]	; (b6048 <hal_usart_init_ex+0xc>)
   b6040:	681b      	ldr	r3, [r3, #0]
   b6042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6044:	9301      	str	r3, [sp, #4]
   b6046:	bd08      	pop	{r3, pc}
   b6048:	0003023c 	.word	0x0003023c

000b604c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b604c:	b508      	push	{r3, lr}
   b604e:	4b02      	ldr	r3, [pc, #8]	; (b6058 <HAL_USB_USART_Init+0xc>)
   b6050:	681b      	ldr	r3, [r3, #0]
   b6052:	681b      	ldr	r3, [r3, #0]
   b6054:	9301      	str	r3, [sp, #4]
   b6056:	bd08      	pop	{r3, pc}
   b6058:	0003024c 	.word	0x0003024c

000b605c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b605c:	b508      	push	{r3, lr}
   b605e:	4b02      	ldr	r3, [pc, #8]	; (b6068 <HAL_USB_USART_Begin+0xc>)
   b6060:	681b      	ldr	r3, [r3, #0]
   b6062:	685b      	ldr	r3, [r3, #4]
   b6064:	9301      	str	r3, [sp, #4]
   b6066:	bd08      	pop	{r3, pc}
   b6068:	0003024c 	.word	0x0003024c

000b606c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b606c:	b508      	push	{r3, lr}
   b606e:	4b02      	ldr	r3, [pc, #8]	; (b6078 <HAL_USB_USART_Available_Data+0xc>)
   b6070:	681b      	ldr	r3, [r3, #0]
   b6072:	691b      	ldr	r3, [r3, #16]
   b6074:	9301      	str	r3, [sp, #4]
   b6076:	bd08      	pop	{r3, pc}
   b6078:	0003024c 	.word	0x0003024c

000b607c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b607c:	b508      	push	{r3, lr}
   b607e:	4b02      	ldr	r3, [pc, #8]	; (b6088 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6080:	681b      	ldr	r3, [r3, #0]
   b6082:	695b      	ldr	r3, [r3, #20]
   b6084:	9301      	str	r3, [sp, #4]
   b6086:	bd08      	pop	{r3, pc}
   b6088:	0003024c 	.word	0x0003024c

000b608c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b608c:	b508      	push	{r3, lr}
   b608e:	4b02      	ldr	r3, [pc, #8]	; (b6098 <HAL_USB_USART_Receive_Data+0xc>)
   b6090:	681b      	ldr	r3, [r3, #0]
   b6092:	699b      	ldr	r3, [r3, #24]
   b6094:	9301      	str	r3, [sp, #4]
   b6096:	bd08      	pop	{r3, pc}
   b6098:	0003024c 	.word	0x0003024c

000b609c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b609c:	b508      	push	{r3, lr}
   b609e:	4b02      	ldr	r3, [pc, #8]	; (b60a8 <HAL_USB_USART_Send_Data+0xc>)
   b60a0:	681b      	ldr	r3, [r3, #0]
   b60a2:	69db      	ldr	r3, [r3, #28]
   b60a4:	9301      	str	r3, [sp, #4]
   b60a6:	bd08      	pop	{r3, pc}
   b60a8:	0003024c 	.word	0x0003024c

000b60ac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b60ac:	b508      	push	{r3, lr}
   b60ae:	4b02      	ldr	r3, [pc, #8]	; (b60b8 <HAL_USB_USART_Flush_Data+0xc>)
   b60b0:	681b      	ldr	r3, [r3, #0]
   b60b2:	6a1b      	ldr	r3, [r3, #32]
   b60b4:	9301      	str	r3, [sp, #4]
   b60b6:	bd08      	pop	{r3, pc}
   b60b8:	0003024c 	.word	0x0003024c

000b60bc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b60bc:	b508      	push	{r3, lr}
   b60be:	4b02      	ldr	r3, [pc, #8]	; (b60c8 <panic_+0xc>)
   b60c0:	681b      	ldr	r3, [r3, #0]
   b60c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b60c4:	9301      	str	r3, [sp, #4]
   b60c6:	bd08      	pop	{r3, pc}
   b60c8:	00030260 	.word	0x00030260

000b60cc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b60cc:	b508      	push	{r3, lr}
   b60ce:	4b02      	ldr	r3, [pc, #8]	; (b60d8 <log_message+0xc>)
   b60d0:	681b      	ldr	r3, [r3, #0]
   b60d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b60d4:	9301      	str	r3, [sp, #4]
   b60d6:	bd08      	pop	{r3, pc}
   b60d8:	00030260 	.word	0x00030260

000b60dc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b60dc:	b508      	push	{r3, lr}
   b60de:	4b02      	ldr	r3, [pc, #8]	; (b60e8 <set_system_mode+0xc>)
   b60e0:	681b      	ldr	r3, [r3, #0]
   b60e2:	685b      	ldr	r3, [r3, #4]
   b60e4:	9301      	str	r3, [sp, #4]
   b60e6:	bd08      	pop	{r3, pc}
   b60e8:	00030220 	.word	0x00030220

000b60ec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b60ec:	b508      	push	{r3, lr}
   b60ee:	4b02      	ldr	r3, [pc, #8]	; (b60f8 <system_delay_ms+0xc>)
   b60f0:	681b      	ldr	r3, [r3, #0]
   b60f2:	695b      	ldr	r3, [r3, #20]
   b60f4:	9301      	str	r3, [sp, #4]
   b60f6:	bd08      	pop	{r3, pc}
   b60f8:	00030220 	.word	0x00030220

000b60fc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b60fc:	b508      	push	{r3, lr}
   b60fe:	4b02      	ldr	r3, [pc, #8]	; (b6108 <system_thread_set_state+0xc>)
   b6100:	681b      	ldr	r3, [r3, #0]
   b6102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6104:	9301      	str	r3, [sp, #4]
   b6106:	bd08      	pop	{r3, pc}
   b6108:	00030220 	.word	0x00030220

000b610c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b610c:	b508      	push	{r3, lr}
   b610e:	4b03      	ldr	r3, [pc, #12]	; (b611c <system_ctrl_set_app_request_handler+0x10>)
   b6110:	681b      	ldr	r3, [r3, #0]
   b6112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6116:	9301      	str	r3, [sp, #4]
   b6118:	bd08      	pop	{r3, pc}
   b611a:	0000      	.short	0x0000
   b611c:	00030220 	.word	0x00030220

000b6120 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6120:	b508      	push	{r3, lr}
   b6122:	4b03      	ldr	r3, [pc, #12]	; (b6130 <system_ctrl_set_result+0x10>)
   b6124:	681b      	ldr	r3, [r3, #0]
   b6126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b612a:	9301      	str	r3, [sp, #4]
   b612c:	bd08      	pop	{r3, pc}
   b612e:	0000      	.short	0x0000
   b6130:	00030220 	.word	0x00030220

000b6134 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b6134:	b508      	push	{r3, lr}
   b6136:	4b02      	ldr	r3, [pc, #8]	; (b6140 <spark_deviceID+0xc>)
   b6138:	681b      	ldr	r3, [r3, #0]
   b613a:	69db      	ldr	r3, [r3, #28]
   b613c:	9301      	str	r3, [sp, #4]
   b613e:	bd08      	pop	{r3, pc}
   b6140:	00030244 	.word	0x00030244

000b6144 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6144:	b508      	push	{r3, lr}
   b6146:	4b02      	ldr	r3, [pc, #8]	; (b6150 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6148:	681b      	ldr	r3, [r3, #0]
   b614a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b614c:	9301      	str	r3, [sp, #4]
   b614e:	bd08      	pop	{r3, pc}
   b6150:	00030244 	.word	0x00030244

000b6154 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6154:	b508      	push	{r3, lr}
   b6156:	4b02      	ldr	r3, [pc, #8]	; (b6160 <network_connect+0xc>)
   b6158:	681b      	ldr	r3, [r3, #0]
   b615a:	685b      	ldr	r3, [r3, #4]
   b615c:	9301      	str	r3, [sp, #4]
   b615e:	bd08      	pop	{r3, pc}
   b6160:	00030240 	.word	0x00030240

000b6164 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6164:	b508      	push	{r3, lr}
   b6166:	4b02      	ldr	r3, [pc, #8]	; (b6170 <network_connecting+0xc>)
   b6168:	681b      	ldr	r3, [r3, #0]
   b616a:	689b      	ldr	r3, [r3, #8]
   b616c:	9301      	str	r3, [sp, #4]
   b616e:	bd08      	pop	{r3, pc}
   b6170:	00030240 	.word	0x00030240

000b6174 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6174:	b508      	push	{r3, lr}
   b6176:	4b02      	ldr	r3, [pc, #8]	; (b6180 <network_disconnect+0xc>)
   b6178:	681b      	ldr	r3, [r3, #0]
   b617a:	68db      	ldr	r3, [r3, #12]
   b617c:	9301      	str	r3, [sp, #4]
   b617e:	bd08      	pop	{r3, pc}
   b6180:	00030240 	.word	0x00030240

000b6184 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6184:	b508      	push	{r3, lr}
   b6186:	4b02      	ldr	r3, [pc, #8]	; (b6190 <network_ready+0xc>)
   b6188:	681b      	ldr	r3, [r3, #0]
   b618a:	691b      	ldr	r3, [r3, #16]
   b618c:	9301      	str	r3, [sp, #4]
   b618e:	bd08      	pop	{r3, pc}
   b6190:	00030240 	.word	0x00030240

000b6194 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6194:	b508      	push	{r3, lr}
   b6196:	4b02      	ldr	r3, [pc, #8]	; (b61a0 <network_on+0xc>)
   b6198:	681b      	ldr	r3, [r3, #0]
   b619a:	695b      	ldr	r3, [r3, #20]
   b619c:	9301      	str	r3, [sp, #4]
   b619e:	bd08      	pop	{r3, pc}
   b61a0:	00030240 	.word	0x00030240

000b61a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b61a4:	b508      	push	{r3, lr}
   b61a6:	4b02      	ldr	r3, [pc, #8]	; (b61b0 <network_off+0xc>)
   b61a8:	681b      	ldr	r3, [r3, #0]
   b61aa:	699b      	ldr	r3, [r3, #24]
   b61ac:	9301      	str	r3, [sp, #4]
   b61ae:	bd08      	pop	{r3, pc}
   b61b0:	00030240 	.word	0x00030240

000b61b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b61b4:	b508      	push	{r3, lr}
   b61b6:	4b02      	ldr	r3, [pc, #8]	; (b61c0 <network_listen+0xc>)
   b61b8:	681b      	ldr	r3, [r3, #0]
   b61ba:	69db      	ldr	r3, [r3, #28]
   b61bc:	9301      	str	r3, [sp, #4]
   b61be:	bd08      	pop	{r3, pc}
   b61c0:	00030240 	.word	0x00030240

000b61c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b61c4:	b508      	push	{r3, lr}
   b61c6:	4b02      	ldr	r3, [pc, #8]	; (b61d0 <network_listening+0xc>)
   b61c8:	681b      	ldr	r3, [r3, #0]
   b61ca:	6a1b      	ldr	r3, [r3, #32]
   b61cc:	9301      	str	r3, [sp, #4]
   b61ce:	bd08      	pop	{r3, pc}
   b61d0:	00030240 	.word	0x00030240

000b61d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b61d4:	b508      	push	{r3, lr}
   b61d6:	4b02      	ldr	r3, [pc, #8]	; (b61e0 <network_set_listen_timeout+0xc>)
   b61d8:	681b      	ldr	r3, [r3, #0]
   b61da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b61dc:	9301      	str	r3, [sp, #4]
   b61de:	bd08      	pop	{r3, pc}
   b61e0:	00030240 	.word	0x00030240

000b61e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b61e4:	b508      	push	{r3, lr}
   b61e6:	4b02      	ldr	r3, [pc, #8]	; (b61f0 <network_get_listen_timeout+0xc>)
   b61e8:	681b      	ldr	r3, [r3, #0]
   b61ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b61ec:	9301      	str	r3, [sp, #4]
   b61ee:	bd08      	pop	{r3, pc}
   b61f0:	00030240 	.word	0x00030240

000b61f4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b61f4:	b508      	push	{r3, lr}
   b61f6:	4b02      	ldr	r3, [pc, #8]	; (b6200 <network_is_on+0xc>)
   b61f8:	681b      	ldr	r3, [r3, #0]
   b61fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b61fc:	9301      	str	r3, [sp, #4]
   b61fe:	bd08      	pop	{r3, pc}
   b6200:	00030240 	.word	0x00030240

000b6204 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6204:	b508      	push	{r3, lr}
   b6206:	4b02      	ldr	r3, [pc, #8]	; (b6210 <network_is_off+0xc>)
   b6208:	681b      	ldr	r3, [r3, #0]
   b620a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b620c:	9301      	str	r3, [sp, #4]
   b620e:	bd08      	pop	{r3, pc}
   b6210:	00030240 	.word	0x00030240

000b6214 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6214:	b508      	push	{r3, lr}
   b6216:	4b02      	ldr	r3, [pc, #8]	; (b6220 <malloc+0xc>)
   b6218:	681b      	ldr	r3, [r3, #0]
   b621a:	681b      	ldr	r3, [r3, #0]
   b621c:	9301      	str	r3, [sp, #4]
   b621e:	bd08      	pop	{r3, pc}
   b6220:	0003021c 	.word	0x0003021c

000b6224 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6224:	b508      	push	{r3, lr}
   b6226:	4b02      	ldr	r3, [pc, #8]	; (b6230 <free+0xc>)
   b6228:	681b      	ldr	r3, [r3, #0]
   b622a:	685b      	ldr	r3, [r3, #4]
   b622c:	9301      	str	r3, [sp, #4]
   b622e:	bd08      	pop	{r3, pc}
   b6230:	0003021c 	.word	0x0003021c

000b6234 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6234:	b508      	push	{r3, lr}
   b6236:	4b02      	ldr	r3, [pc, #8]	; (b6240 <realloc+0xc>)
   b6238:	681b      	ldr	r3, [r3, #0]
   b623a:	689b      	ldr	r3, [r3, #8]
   b623c:	9301      	str	r3, [sp, #4]
   b623e:	bd08      	pop	{r3, pc}
   b6240:	0003021c 	.word	0x0003021c

000b6244 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6244:	b508      	push	{r3, lr}
   b6246:	4b02      	ldr	r3, [pc, #8]	; (b6250 <vsnprintf+0xc>)
   b6248:	681b      	ldr	r3, [r3, #0]
   b624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b624c:	9301      	str	r3, [sp, #4]
   b624e:	bd08      	pop	{r3, pc}
   b6250:	0003021c 	.word	0x0003021c

000b6254 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6254:	b508      	push	{r3, lr}
   b6256:	4b02      	ldr	r3, [pc, #8]	; (b6260 <__errno+0xc>)
   b6258:	681b      	ldr	r3, [r3, #0]
   b625a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b625c:	9301      	str	r3, [sp, #4]
   b625e:	bd08      	pop	{r3, pc}
   b6260:	0003021c 	.word	0x0003021c

000b6264 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6264:	b508      	push	{r3, lr}
   b6266:	4b02      	ldr	r3, [pc, #8]	; (b6270 <__assert_func+0xc>)
   b6268:	681b      	ldr	r3, [r3, #0]
   b626a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b626c:	9301      	str	r3, [sp, #4]
   b626e:	bd08      	pop	{r3, pc}
   b6270:	0003021c 	.word	0x0003021c

000b6274 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6274:	b508      	push	{r3, lr}
   b6276:	4b02      	ldr	r3, [pc, #8]	; (b6280 <newlib_impure_ptr_callback+0xc>)
   b6278:	681b      	ldr	r3, [r3, #0]
   b627a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b627c:	9301      	str	r3, [sp, #4]
   b627e:	bd08      	pop	{r3, pc}
   b6280:	0003021c 	.word	0x0003021c

000b6284 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6284:	2100      	movs	r1, #0
   b6286:	f7ff bf31 	b.w	b60ec <system_delay_ms>
	...

000b628c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b628c:	4802      	ldr	r0, [pc, #8]	; (b6298 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b628e:	2300      	movs	r3, #0
   b6290:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6292:	f7ff bd63 	b.w	b5d5c <os_mutex_recursive_create>
   b6296:	bf00      	nop
   b6298:	2003e6c4 	.word	0x2003e6c4

000b629c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b629c:	2200      	movs	r2, #0
   b629e:	6840      	ldr	r0, [r0, #4]
   b62a0:	4611      	mov	r1, r2
   b62a2:	f7ff bf8f 	b.w	b61c4 <network_listening>

000b62a6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b62a6:	2200      	movs	r2, #0
   b62a8:	6840      	ldr	r0, [r0, #4]
   b62aa:	4611      	mov	r1, r2
   b62ac:	f7ff bf9a 	b.w	b61e4 <network_get_listen_timeout>

000b62b0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b62b0:	6840      	ldr	r0, [r0, #4]
   b62b2:	2200      	movs	r2, #0
   b62b4:	f7ff bf8e 	b.w	b61d4 <network_set_listen_timeout>

000b62b8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b62b8:	6840      	ldr	r0, [r0, #4]
   b62ba:	2200      	movs	r2, #0
   b62bc:	f081 0101 	eor.w	r1, r1, #1
   b62c0:	f7ff bf78 	b.w	b61b4 <network_listen>

000b62c4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b62c4:	2300      	movs	r3, #0
   b62c6:	6840      	ldr	r0, [r0, #4]
   b62c8:	461a      	mov	r2, r3
   b62ca:	4619      	mov	r1, r3
   b62cc:	f7ff bf6a 	b.w	b61a4 <network_off>

000b62d0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b62d0:	2300      	movs	r3, #0
   b62d2:	6840      	ldr	r0, [r0, #4]
   b62d4:	461a      	mov	r2, r3
   b62d6:	4619      	mov	r1, r3
   b62d8:	f7ff bf5c 	b.w	b6194 <network_on>

000b62dc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b62dc:	2200      	movs	r2, #0
   b62de:	6840      	ldr	r0, [r0, #4]
   b62e0:	4611      	mov	r1, r2
   b62e2:	f7ff bf4f 	b.w	b6184 <network_ready>

000b62e6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b62e6:	2200      	movs	r2, #0
   b62e8:	6840      	ldr	r0, [r0, #4]
   b62ea:	4611      	mov	r1, r2
   b62ec:	f7ff bf3a 	b.w	b6164 <network_connecting>

000b62f0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b62f0:	6840      	ldr	r0, [r0, #4]
   b62f2:	2200      	movs	r2, #0
   b62f4:	2102      	movs	r1, #2
   b62f6:	f7ff bf3d 	b.w	b6174 <network_disconnect>

000b62fa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b62fa:	2300      	movs	r3, #0
   b62fc:	6840      	ldr	r0, [r0, #4]
   b62fe:	461a      	mov	r2, r3
   b6300:	f7ff bf28 	b.w	b6154 <network_connect>

000b6304 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6304:	4b02      	ldr	r3, [pc, #8]	; (b6310 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6306:	2203      	movs	r2, #3
   b6308:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b630a:	4a02      	ldr	r2, [pc, #8]	; (b6314 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b630c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b630e:	4770      	bx	lr
   b6310:	2003e6c8 	.word	0x2003e6c8
   b6314:	000b846c 	.word	0x000b846c

000b6318 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6318:	4770      	bx	lr

000b631a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b631a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b631c:	4606      	mov	r6, r0
   b631e:	4615      	mov	r5, r2
   b6320:	460c      	mov	r4, r1
   b6322:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6324:	42bc      	cmp	r4, r7
   b6326:	d006      	beq.n	b6336 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6328:	6833      	ldr	r3, [r6, #0]
   b632a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b632e:	689b      	ldr	r3, [r3, #8]
   b6330:	4630      	mov	r0, r6
   b6332:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6334:	e7f6      	b.n	b6324 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6336:	4628      	mov	r0, r5
   b6338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b633a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b633a:	7c00      	ldrb	r0, [r0, #16]
   b633c:	2200      	movs	r2, #0
   b633e:	f7ff bd6d 	b.w	b5e1c <hal_i2c_write>

000b6342 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6342:	7c00      	ldrb	r0, [r0, #16]
   b6344:	2100      	movs	r1, #0
   b6346:	f7ff bd71 	b.w	b5e2c <hal_i2c_available>

000b634a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b634a:	7c00      	ldrb	r0, [r0, #16]
   b634c:	2100      	movs	r1, #0
   b634e:	f7ff bd75 	b.w	b5e3c <hal_i2c_read>

000b6352 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6352:	7c00      	ldrb	r0, [r0, #16]
   b6354:	2100      	movs	r1, #0
   b6356:	f7ff bd79 	b.w	b5e4c <hal_i2c_peek>

000b635a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b635a:	7c00      	ldrb	r0, [r0, #16]
   b635c:	2100      	movs	r1, #0
   b635e:	f7ff bd7d 	b.w	b5e5c <hal_i2c_flush>

000b6362 <_ZN7TwoWireD0Ev>:
   b6362:	b510      	push	{r4, lr}
   b6364:	2114      	movs	r1, #20
   b6366:	4604      	mov	r4, r0
   b6368:	f7fd feab 	bl	b40c2 <_ZdlPvj>
   b636c:	4620      	mov	r0, r4
   b636e:	bd10      	pop	{r4, pc}

000b6370 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6370:	b538      	push	{r3, r4, r5, lr}
   b6372:	4604      	mov	r4, r0
   b6374:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b637a:	2200      	movs	r2, #0
   b637c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6380:	4b09      	ldr	r3, [pc, #36]	; (b63a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6382:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6384:	4608      	mov	r0, r1
   b6386:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6388:	4629      	mov	r1, r5
   b638a:	f7ff fd77 	bl	b5e7c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b638e:	30bf      	adds	r0, #191	; 0xbf
   b6390:	d108      	bne.n	b63a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6392:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6394:	07db      	lsls	r3, r3, #31
   b6396:	d505      	bpl.n	b63a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6398:	6868      	ldr	r0, [r5, #4]
   b639a:	f7ff ff43 	bl	b6224 <free>
    free(conf.tx_buffer);
   b639e:	68e8      	ldr	r0, [r5, #12]
   b63a0:	f7ff ff40 	bl	b6224 <free>
}
   b63a4:	4620      	mov	r0, r4
   b63a6:	bd38      	pop	{r3, r4, r5, pc}
   b63a8:	000b84a8 	.word	0x000b84a8

000b63ac <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b63ac:	7c00      	ldrb	r0, [r0, #16]
   b63ae:	2200      	movs	r2, #0
   b63b0:	f7ff bd14 	b.w	b5ddc <hal_i2c_set_speed>

000b63b4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b63b4:	2300      	movs	r3, #0
   b63b6:	7c00      	ldrb	r0, [r0, #16]
   b63b8:	461a      	mov	r2, r3
   b63ba:	4619      	mov	r1, r3
   b63bc:	f7ff bd16 	b.w	b5dec <hal_i2c_begin>

000b63c0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b63c0:	7c00      	ldrb	r0, [r0, #16]
   b63c2:	2200      	movs	r2, #0
   b63c4:	f7ff bd1a 	b.w	b5dfc <hal_i2c_begin_transmission>

000b63c8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b63c8:	b2c9      	uxtb	r1, r1
   b63ca:	f7ff bff9 	b.w	b63c0 <_ZN7TwoWire17beginTransmissionEh>

000b63ce <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b63ce:	7c00      	ldrb	r0, [r0, #16]
   b63d0:	2200      	movs	r2, #0
   b63d2:	f7ff bd1b 	b.w	b5e0c <hal_i2c_end_transmission>

000b63d6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b63d6:	2101      	movs	r1, #1
   b63d8:	f7ff bff9 	b.w	b63ce <_ZN7TwoWire15endTransmissionEh>

000b63dc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b63dc:	4770      	bx	lr

000b63de <_ZN9IPAddressD0Ev>:
   b63de:	b510      	push	{r4, lr}
   b63e0:	2118      	movs	r1, #24
   b63e2:	4604      	mov	r4, r0
   b63e4:	f7fd fe6d 	bl	b40c2 <_ZdlPvj>
   b63e8:	4620      	mov	r0, r4
   b63ea:	bd10      	pop	{r4, pc}

000b63ec <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b63ec:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b63ee:	7d03      	ldrb	r3, [r0, #20]
   b63f0:	2b06      	cmp	r3, #6
{
   b63f2:	b08d      	sub	sp, #52	; 0x34
   b63f4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b63f6:	f100 0704 	add.w	r7, r0, #4
   b63fa:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b63fe:	d012      	beq.n	b6426 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6400:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6404:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6408:	220a      	movs	r2, #10
   b640a:	4630      	mov	r0, r6
   b640c:	f000 f969 	bl	b66e2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6410:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6412:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6414:	d019      	beq.n	b644a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6416:	2c00      	cmp	r4, #0
   b6418:	d0f4      	beq.n	b6404 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b641a:	212e      	movs	r1, #46	; 0x2e
   b641c:	4630      	mov	r0, r6
   b641e:	f000 f951 	bl	b66c4 <_ZN5Print5printEc>
   b6422:	4404      	add	r4, r0
   b6424:	e7ee      	b.n	b6404 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6426:	232f      	movs	r3, #47	; 0x2f
   b6428:	466a      	mov	r2, sp
   b642a:	4639      	mov	r1, r7
   b642c:	200a      	movs	r0, #10
		buf[0] = 0;
   b642e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6432:	f7ff fd33 	bl	b5e9c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6436:	4668      	mov	r0, sp
   b6438:	f7fd fdfa 	bl	b4030 <strlen>
   b643c:	6833      	ldr	r3, [r6, #0]
   b643e:	4602      	mov	r2, r0
   b6440:	68db      	ldr	r3, [r3, #12]
   b6442:	4669      	mov	r1, sp
   b6444:	4630      	mov	r0, r6
   b6446:	4798      	blx	r3
   b6448:	4604      	mov	r4, r0
    }
    return n;
}
   b644a:	4620      	mov	r0, r4
   b644c:	b00d      	add	sp, #52	; 0x34
   b644e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6450 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6450:	b510      	push	{r4, lr}
   b6452:	4b05      	ldr	r3, [pc, #20]	; (b6468 <_ZN9IPAddressC1Ev+0x18>)
   b6454:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6456:	2211      	movs	r2, #17
   b6458:	f840 3b04 	str.w	r3, [r0], #4
   b645c:	2100      	movs	r1, #0
   b645e:	f001 f997 	bl	b7790 <memset>
}
   b6462:	4620      	mov	r0, r4
   b6464:	bd10      	pop	{r4, pc}
   b6466:	bf00      	nop
   b6468:	000b84d0 	.word	0x000b84d0

000b646c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b646c:	4603      	mov	r3, r0
   b646e:	4a07      	ldr	r2, [pc, #28]	; (b648c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6470:	b510      	push	{r4, lr}
   b6472:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6476:	f101 0210 	add.w	r2, r1, #16
   b647a:	f851 4b04 	ldr.w	r4, [r1], #4
   b647e:	f843 4b04 	str.w	r4, [r3], #4
   b6482:	4291      	cmp	r1, r2
   b6484:	d1f9      	bne.n	b647a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6486:	780a      	ldrb	r2, [r1, #0]
   b6488:	701a      	strb	r2, [r3, #0]
}
   b648a:	bd10      	pop	{r4, pc}
   b648c:	000b84d0 	.word	0x000b84d0

000b6490 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6490:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6492:	2b04      	cmp	r3, #4
   b6494:	d104      	bne.n	b64a0 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6496:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6498:	3800      	subs	r0, #0
   b649a:	bf18      	it	ne
   b649c:	2001      	movne	r0, #1
   b649e:	4770      	bx	lr
    } else if (version() == 6) {
   b64a0:	2b06      	cmp	r3, #6
   b64a2:	d107      	bne.n	b64b4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b64a4:	6843      	ldr	r3, [r0, #4]
   b64a6:	b93b      	cbnz	r3, b64b8 <_ZNK9IPAddresscvbEv+0x28>
   b64a8:	6883      	ldr	r3, [r0, #8]
   b64aa:	b92b      	cbnz	r3, b64b8 <_ZNK9IPAddresscvbEv+0x28>
   b64ac:	68c3      	ldr	r3, [r0, #12]
   b64ae:	b91b      	cbnz	r3, b64b8 <_ZNK9IPAddresscvbEv+0x28>
   b64b0:	6900      	ldr	r0, [r0, #16]
   b64b2:	e7f1      	b.n	b6498 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b64b4:	2000      	movs	r0, #0
   b64b6:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b64b8:	2001      	movs	r0, #1
}
   b64ba:	4770      	bx	lr

000b64bc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b64bc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b64be:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b64c2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b64c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b64ca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b64ce:	2304      	movs	r3, #4
   b64d0:	6041      	str	r1, [r0, #4]
   b64d2:	7503      	strb	r3, [r0, #20]
}
   b64d4:	bd10      	pop	{r4, pc}
	...

000b64d8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b64d8:	b507      	push	{r0, r1, r2, lr}
   b64da:	4b06      	ldr	r3, [pc, #24]	; (b64f4 <_ZN9IPAddressC1EPKh+0x1c>)
   b64dc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b64de:	78cb      	ldrb	r3, [r1, #3]
   b64e0:	9300      	str	r3, [sp, #0]
   b64e2:	788b      	ldrb	r3, [r1, #2]
   b64e4:	784a      	ldrb	r2, [r1, #1]
   b64e6:	7809      	ldrb	r1, [r1, #0]
   b64e8:	f7ff ffe8 	bl	b64bc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b64ec:	b003      	add	sp, #12
   b64ee:	f85d fb04 	ldr.w	pc, [sp], #4
   b64f2:	bf00      	nop
   b64f4:	000b84d0 	.word	0x000b84d0

000b64f8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b64f8:	4b01      	ldr	r3, [pc, #4]	; (b6500 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b64fa:	4a02      	ldr	r2, [pc, #8]	; (b6504 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b64fc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b64fe:	4770      	bx	lr
   b6500:	2003e6d0 	.word	0x2003e6d0
   b6504:	000b84dc 	.word	0x000b84dc

000b6508 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6508:	2300      	movs	r3, #0
   b650a:	6840      	ldr	r0, [r0, #4]
   b650c:	461a      	mov	r2, r3
   b650e:	f7ff be21 	b.w	b6154 <network_connect>

000b6512 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6512:	6840      	ldr	r0, [r0, #4]
   b6514:	2200      	movs	r2, #0
   b6516:	2102      	movs	r1, #2
   b6518:	f7ff be2c 	b.w	b6174 <network_disconnect>

000b651c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b651c:	2200      	movs	r2, #0
   b651e:	6840      	ldr	r0, [r0, #4]
   b6520:	4611      	mov	r1, r2
   b6522:	f7ff be1f 	b.w	b6164 <network_connecting>

000b6526 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6526:	2200      	movs	r2, #0
   b6528:	6840      	ldr	r0, [r0, #4]
   b652a:	4611      	mov	r1, r2
   b652c:	f7ff be2a 	b.w	b6184 <network_ready>

000b6530 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6530:	2300      	movs	r3, #0
   b6532:	6840      	ldr	r0, [r0, #4]
   b6534:	461a      	mov	r2, r3
   b6536:	4619      	mov	r1, r3
   b6538:	f7ff be2c 	b.w	b6194 <network_on>

000b653c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b653c:	2300      	movs	r3, #0
   b653e:	6840      	ldr	r0, [r0, #4]
   b6540:	461a      	mov	r2, r3
   b6542:	4619      	mov	r1, r3
   b6544:	f7ff be2e 	b.w	b61a4 <network_off>

000b6548 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6548:	6840      	ldr	r0, [r0, #4]
   b654a:	2100      	movs	r1, #0
   b654c:	f7ff be52 	b.w	b61f4 <network_is_on>

000b6550 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6550:	6840      	ldr	r0, [r0, #4]
   b6552:	2100      	movs	r1, #0
   b6554:	f7ff be56 	b.w	b6204 <network_is_off>

000b6558 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6558:	6840      	ldr	r0, [r0, #4]
   b655a:	2200      	movs	r2, #0
   b655c:	f081 0101 	eor.w	r1, r1, #1
   b6560:	f7ff be28 	b.w	b61b4 <network_listen>

000b6564 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6564:	6840      	ldr	r0, [r0, #4]
   b6566:	2200      	movs	r2, #0
   b6568:	f7ff be34 	b.w	b61d4 <network_set_listen_timeout>

000b656c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b656c:	2200      	movs	r2, #0
   b656e:	6840      	ldr	r0, [r0, #4]
   b6570:	4611      	mov	r1, r2
   b6572:	f7ff be37 	b.w	b61e4 <network_get_listen_timeout>

000b6576 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6576:	2200      	movs	r2, #0
   b6578:	6840      	ldr	r0, [r0, #4]
   b657a:	4611      	mov	r1, r2
   b657c:	f7ff be22 	b.w	b61c4 <network_listening>

000b6580 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6584:	b095      	sub	sp, #84	; 0x54
   b6586:	4614      	mov	r4, r2
   b6588:	460d      	mov	r5, r1
   b658a:	4607      	mov	r7, r0
    IPAddress addr;
   b658c:	f7ff ff60 	bl	b6450 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6590:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6592:	221c      	movs	r2, #28
   b6594:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6596:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6598:	f001 f8fa 	bl	b7790 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b659c:	2340      	movs	r3, #64	; 0x40
   b659e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b65a0:	4620      	mov	r0, r4
   b65a2:	466b      	mov	r3, sp
   b65a4:	aa0c      	add	r2, sp, #48	; 0x30
   b65a6:	2100      	movs	r1, #0
   b65a8:	f7ff fc98 	bl	b5edc <netdb_getaddrinfo>
    if (!r) {
   b65ac:	4604      	mov	r4, r0
   b65ae:	2800      	cmp	r0, #0
   b65b0:	d14b      	bne.n	b664a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b65b2:	4602      	mov	r2, r0
   b65b4:	2101      	movs	r1, #1
   b65b6:	6868      	ldr	r0, [r5, #4]
   b65b8:	f7ff fde4 	bl	b6184 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b65bc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b65be:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b65c0:	4622      	mov	r2, r4
   b65c2:	6868      	ldr	r0, [r5, #4]
   b65c4:	f7ff fdde 	bl	b6184 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b65c8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b65ca:	4681      	mov	r9, r0
        bool ok = false;
   b65cc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b65ce:	2e00      	cmp	r6, #0
   b65d0:	d03b      	beq.n	b664a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b65d2:	2900      	cmp	r1, #0
   b65d4:	d139      	bne.n	b664a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b65d6:	6873      	ldr	r3, [r6, #4]
   b65d8:	2b02      	cmp	r3, #2
   b65da:	d003      	beq.n	b65e4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b65dc:	2b0a      	cmp	r3, #10
   b65de:	d011      	beq.n	b6604 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b65e0:	69f6      	ldr	r6, [r6, #28]
   b65e2:	e7f4      	b.n	b65ce <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b65e4:	f1b8 0f00 	cmp.w	r8, #0
   b65e8:	d0fa      	beq.n	b65e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b65ea:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b65ec:	a806      	add	r0, sp, #24
   b65ee:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b65f0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b65f2:	f7ff ff71 	bl	b64d8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b65f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b65f8:	1d3c      	adds	r4, r7, #4
   b65fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b65fc:	682b      	ldr	r3, [r5, #0]
   b65fe:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6600:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6602:	e7ed      	b.n	b65e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6604:	f1b9 0f00 	cmp.w	r9, #0
   b6608:	d0ea      	beq.n	b65e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b660a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b660c:	2210      	movs	r2, #16
   b660e:	a801      	add	r0, sp, #4
   b6610:	f001 f8be 	bl	b7790 <memset>
                    a.v = 6;
   b6614:	2306      	movs	r3, #6
   b6616:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b661a:	ad01      	add	r5, sp, #4
   b661c:	f104 0308 	add.w	r3, r4, #8
   b6620:	3418      	adds	r4, #24
   b6622:	6818      	ldr	r0, [r3, #0]
   b6624:	6859      	ldr	r1, [r3, #4]
   b6626:	462a      	mov	r2, r5
   b6628:	c203      	stmia	r2!, {r0, r1}
   b662a:	3308      	adds	r3, #8
   b662c:	42a3      	cmp	r3, r4
   b662e:	4615      	mov	r5, r2
   b6630:	d1f7      	bne.n	b6622 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6632:	a901      	add	r1, sp, #4
   b6634:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6636:	ad07      	add	r5, sp, #28
   b6638:	f7ff ff18 	bl	b646c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b663c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b663e:	1d3c      	adds	r4, r7, #4
   b6640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6642:	682b      	ldr	r3, [r5, #0]
   b6644:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6646:	4649      	mov	r1, r9
   b6648:	e7ca      	b.n	b65e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b664a:	9800      	ldr	r0, [sp, #0]
   b664c:	f7ff fc3e 	bl	b5ecc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6650:	4638      	mov	r0, r7
   b6652:	b015      	add	sp, #84	; 0x54
   b6654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6658 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6658:	4b02      	ldr	r3, [pc, #8]	; (b6664 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b665a:	4a03      	ldr	r2, [pc, #12]	; (b6668 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b665c:	601a      	str	r2, [r3, #0]
   b665e:	2200      	movs	r2, #0
   b6660:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b6662:	4770      	bx	lr
   b6664:	2003e6d4 	.word	0x2003e6d4
   b6668:	000b84e8 	.word	0x000b84e8

000b666c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b666e:	4606      	mov	r6, r0
   b6670:	460d      	mov	r5, r1
  size_t n = 0;
   b6672:	188f      	adds	r7, r1, r2
   b6674:	2400      	movs	r4, #0
  while (size--) {
   b6676:	42bd      	cmp	r5, r7
   b6678:	d00c      	beq.n	b6694 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b667a:	6833      	ldr	r3, [r6, #0]
   b667c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6680:	689b      	ldr	r3, [r3, #8]
   b6682:	4630      	mov	r0, r6
   b6684:	4798      	blx	r3
     if (chunk>=0)
   b6686:	1e03      	subs	r3, r0, #0
   b6688:	db01      	blt.n	b668e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b668a:	441c      	add	r4, r3
  while (size--) {
   b668c:	e7f3      	b.n	b6676 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b668e:	2c00      	cmp	r4, #0
   b6690:	bf08      	it	eq
   b6692:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6694:	4620      	mov	r0, r4
   b6696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6698 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6698:	b513      	push	{r0, r1, r4, lr}
   b669a:	4604      	mov	r4, r0
    }
   b669c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b669e:	b159      	cbz	r1, b66b8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b66a0:	9101      	str	r1, [sp, #4]
   b66a2:	f7fd fcc5 	bl	b4030 <strlen>
   b66a6:	6823      	ldr	r3, [r4, #0]
   b66a8:	9901      	ldr	r1, [sp, #4]
   b66aa:	68db      	ldr	r3, [r3, #12]
   b66ac:	4602      	mov	r2, r0
   b66ae:	4620      	mov	r0, r4
    }
   b66b0:	b002      	add	sp, #8
   b66b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b66b6:	4718      	bx	r3
    }
   b66b8:	b002      	add	sp, #8
   b66ba:	bd10      	pop	{r4, pc}

000b66bc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b66bc:	b508      	push	{r3, lr}
  return write(str);
   b66be:	f7ff ffeb 	bl	b6698 <_ZN5Print5writeEPKc>
}
   b66c2:	bd08      	pop	{r3, pc}

000b66c4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b66c4:	6803      	ldr	r3, [r0, #0]
   b66c6:	689b      	ldr	r3, [r3, #8]
   b66c8:	4718      	bx	r3

000b66ca <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b66ca:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b66cc:	210d      	movs	r1, #13
{
   b66ce:	4605      	mov	r5, r0
  size_t n = print('\r');
   b66d0:	f7ff fff8 	bl	b66c4 <_ZN5Print5printEc>
  n += print('\n');
   b66d4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b66d6:	4604      	mov	r4, r0
  n += print('\n');
   b66d8:	4628      	mov	r0, r5
   b66da:	f7ff fff3 	bl	b66c4 <_ZN5Print5printEc>
  return n;
}
   b66de:	4420      	add	r0, r4
   b66e0:	bd38      	pop	{r3, r4, r5, pc}

000b66e2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b66e2:	b530      	push	{r4, r5, lr}
   b66e4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b66e6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b66e8:	2a01      	cmp	r2, #1
  *str = '\0';
   b66ea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b66ee:	bf98      	it	ls
   b66f0:	220a      	movls	r2, #10
   b66f2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b66f4:	460d      	mov	r5, r1
   b66f6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b66fa:	fb01 5312 	mls	r3, r1, r2, r5
   b66fe:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6702:	2b09      	cmp	r3, #9
   b6704:	bf94      	ite	ls
   b6706:	3330      	addls	r3, #48	; 0x30
   b6708:	3337      	addhi	r3, #55	; 0x37
   b670a:	b2db      	uxtb	r3, r3
  } while(n);
   b670c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b670e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6712:	d9ef      	bls.n	b66f4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6714:	4621      	mov	r1, r4
   b6716:	f7ff ffbf 	bl	b6698 <_ZN5Print5writeEPKc>
}
   b671a:	b00b      	add	sp, #44	; 0x2c
   b671c:	bd30      	pop	{r4, r5, pc}

000b671e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b671e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6722:	b086      	sub	sp, #24
   b6724:	af00      	add	r7, sp, #0
   b6726:	4605      	mov	r5, r0
   b6728:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b672a:	1d38      	adds	r0, r7, #4
   b672c:	2114      	movs	r1, #20
{
   b672e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6730:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6732:	f7ff fd87 	bl	b6244 <vsnprintf>

    if (n<bufsize)
   b6736:	2813      	cmp	r0, #19
   b6738:	d80e      	bhi.n	b6758 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b673a:	1d39      	adds	r1, r7, #4
   b673c:	4628      	mov	r0, r5
   b673e:	f7ff ffab 	bl	b6698 <_ZN5Print5writeEPKc>
   b6742:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6744:	b11e      	cbz	r6, b674e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6746:	4628      	mov	r0, r5
   b6748:	f7ff ffbf 	bl	b66ca <_ZN5Print7printlnEv>
   b674c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b674e:	4620      	mov	r0, r4
   b6750:	3718      	adds	r7, #24
   b6752:	46bd      	mov	sp, r7
   b6754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6758:	f100 0308 	add.w	r3, r0, #8
   b675c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6760:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6762:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6766:	4622      	mov	r2, r4
   b6768:	1c41      	adds	r1, r0, #1
   b676a:	683b      	ldr	r3, [r7, #0]
   b676c:	4668      	mov	r0, sp
   b676e:	f7ff fd69 	bl	b6244 <vsnprintf>
  return write(str);
   b6772:	4669      	mov	r1, sp
   b6774:	4628      	mov	r0, r5
   b6776:	f7ff ff8f 	bl	b6698 <_ZN5Print5writeEPKc>
   b677a:	4604      	mov	r4, r0
   b677c:	46c5      	mov	sp, r8
   b677e:	e7e1      	b.n	b6744 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6780 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6780:	4b01      	ldr	r3, [pc, #4]	; (b6788 <_GLOBAL__sub_I_RGB+0x8>)
   b6782:	2200      	movs	r2, #0
   b6784:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6786:	4770      	bx	lr
   b6788:	2003e6dc 	.word	0x2003e6dc

000b678c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b678c:	2100      	movs	r1, #0
   b678e:	f7ff bc15 	b.w	b5fbc <hal_spi_release>

000b6792 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6792:	2100      	movs	r1, #0
   b6794:	f7ff bc0a 	b.w	b5fac <hal_spi_acquire>

000b6798 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6798:	b510      	push	{r4, lr}
   b679a:	4604      	mov	r4, r0
   b679c:	4608      	mov	r0, r1
{
    _spi = spi;
   b679e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b67a0:	f7ff fbe4 	bl	b5f6c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b67a4:	2300      	movs	r3, #0
   b67a6:	6063      	str	r3, [r4, #4]
}
   b67a8:	4620      	mov	r0, r4
   b67aa:	bd10      	pop	{r4, pc}

000b67ac <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b67ac:	b513      	push	{r0, r1, r4, lr}
   b67ae:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b67b0:	7800      	ldrb	r0, [r0, #0]
   b67b2:	f7ff ffee 	bl	b6792 <_ZN8SPIClass4lockEv.isra.0>
   b67b6:	b958      	cbnz	r0, b67d0 <_ZN8SPIClass5beginEv+0x24>
   b67b8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b67ba:	9001      	str	r0, [sp, #4]
   b67bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b67c0:	f7ff fbc4 	bl	b5f4c <hal_spi_begin>
        unlock();
   b67c4:	9801      	ldr	r0, [sp, #4]
    }
}
   b67c6:	b002      	add	sp, #8
   b67c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b67cc:	f7ff bfde 	b.w	b678c <_ZN8SPIClass6unlockEv.isra.0>
   b67d0:	b002      	add	sp, #8
   b67d2:	bd10      	pop	{r4, pc}

000b67d4 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b67d4:	7800      	ldrb	r0, [r0, #0]
   b67d6:	f7ff bfd9 	b.w	b678c <_ZN8SPIClass6unlockEv.isra.0>
	...

000b67dc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b67dc:	0840      	lsrs	r0, r0, #1
{
   b67de:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b67e0:	6018      	str	r0, [r3, #0]
   b67e2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b67e4:	6818      	ldr	r0, [r3, #0]
   b67e6:	4288      	cmp	r0, r1
   b67e8:	b2e5      	uxtb	r5, r4
   b67ea:	d906      	bls.n	b67fa <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b67ec:	3401      	adds	r4, #1
   b67ee:	2c08      	cmp	r4, #8
   b67f0:	d002      	beq.n	b67f8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b67f2:	0840      	lsrs	r0, r0, #1
   b67f4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b67f6:	e7f5      	b.n	b67e4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b67f8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b67fa:	4b02      	ldr	r3, [pc, #8]	; (b6804 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b67fc:	5d5b      	ldrb	r3, [r3, r5]
   b67fe:	7013      	strb	r3, [r2, #0]
}
   b6800:	bd30      	pop	{r4, r5, pc}
   b6802:	bf00      	nop
   b6804:	000b851c 	.word	0x000b851c

000b6808 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b680c:	4606      	mov	r6, r0
   b680e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6810:	7800      	ldrb	r0, [r0, #0]
{
   b6812:	460c      	mov	r4, r1
    CHECK(lock());
   b6814:	f7ff ffbd 	bl	b6792 <_ZN8SPIClass4lockEv.isra.0>
   b6818:	2800      	cmp	r0, #0
   b681a:	db1b      	blt.n	b6854 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b681c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b681e:	2214      	movs	r2, #20
   b6820:	2100      	movs	r1, #0
   b6822:	a809      	add	r0, sp, #36	; 0x24
   b6824:	f000 ffb4 	bl	b7790 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6828:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b682a:	2200      	movs	r2, #0
   b682c:	a909      	add	r1, sp, #36	; 0x24
   b682e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6830:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6834:	f7ff fbaa 	bl	b5f8c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6838:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b683c:	b113      	cbz	r3, b6844 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b683e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6842:	b155      	cbz	r5, b685a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6844:	2700      	movs	r7, #0
   b6846:	46b9      	mov	r9, r7
   b6848:	46b8      	mov	r8, r7
   b684a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b684c:	7923      	ldrb	r3, [r4, #4]
   b684e:	b15d      	cbz	r5, b6868 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6850:	b1c3      	cbz	r3, b6884 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6852:	2000      	movs	r0, #0
}
   b6854:	b00f      	add	sp, #60	; 0x3c
   b6856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b685a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b685e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6862:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6866:	e7f1      	b.n	b684c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6868:	2b00      	cmp	r3, #0
   b686a:	d135      	bne.n	b68d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b686c:	68a3      	ldr	r3, [r4, #8]
   b686e:	4543      	cmp	r3, r8
   b6870:	d108      	bne.n	b6884 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b6872:	f88d 9020 	strb.w	r9, [sp, #32]
   b6876:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b687a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b687e:	89a3      	ldrh	r3, [r4, #12]
   b6880:	429a      	cmp	r2, r3
   b6882:	d0e6      	beq.n	b6852 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6884:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6886:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6888:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b688c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b688e:	ab04      	add	r3, sp, #16
   b6890:	f10d 020f 	add.w	r2, sp, #15
   b6894:	f7ff ffa2 	bl	b67dc <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6898:	7921      	ldrb	r1, [r4, #4]
   b689a:	b985      	cbnz	r5, b68be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b689c:	b989      	cbnz	r1, b68c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b689e:	68a3      	ldr	r3, [r4, #8]
   b68a0:	4543      	cmp	r3, r8
   b68a2:	d30e      	bcc.n	b68c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b68a4:	f88d 9020 	strb.w	r9, [sp, #32]
   b68a8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b68ac:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b68b0:	89a3      	ldrh	r3, [r4, #12]
   b68b2:	429a      	cmp	r2, r3
   b68b4:	d105      	bne.n	b68c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b68b6:	9b04      	ldr	r3, [sp, #16]
   b68b8:	4543      	cmp	r3, r8
   b68ba:	d102      	bne.n	b68c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b68bc:	e7c9      	b.n	b6852 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b68be:	2900      	cmp	r1, #0
   b68c0:	d1f9      	bne.n	b68b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b68c2:	2300      	movs	r3, #0
   b68c4:	9301      	str	r3, [sp, #4]
   b68c6:	7b63      	ldrb	r3, [r4, #13]
   b68c8:	9300      	str	r3, [sp, #0]
   b68ca:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b68ce:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b68d0:	7830      	ldrb	r0, [r6, #0]
   b68d2:	f7ff fb63 	bl	b5f9c <hal_spi_set_settings>
   b68d6:	e7bc      	b.n	b6852 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b68d8:	e9cd 5500 	strd	r5, r5, [sp]
   b68dc:	462b      	mov	r3, r5
   b68de:	462a      	mov	r2, r5
   b68e0:	2101      	movs	r1, #1
   b68e2:	e7f5      	b.n	b68d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b68e4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b68e4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b68e6:	7800      	ldrb	r0, [r0, #0]
   b68e8:	f7ff fb38 	bl	b5f5c <hal_spi_transfer>
}
   b68ec:	b2c0      	uxtb	r0, r0
   b68ee:	bd08      	pop	{r3, pc}

000b68f0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b68f0:	b510      	push	{r4, lr}
   b68f2:	4604      	mov	r4, r0
{
	free(buffer);
   b68f4:	6800      	ldr	r0, [r0, #0]
   b68f6:	f7ff fc95 	bl	b6224 <free>
}
   b68fa:	4620      	mov	r0, r4
   b68fc:	bd10      	pop	{r4, pc}

000b68fe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b68fe:	b510      	push	{r4, lr}
   b6900:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6902:	6800      	ldr	r0, [r0, #0]
   b6904:	b108      	cbz	r0, b690a <_ZN6String10invalidateEv+0xc>
   b6906:	f7ff fc8d 	bl	b6224 <free>
	buffer = NULL;
   b690a:	2300      	movs	r3, #0
	capacity = len = 0;
   b690c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6910:	6023      	str	r3, [r4, #0]
}
   b6912:	bd10      	pop	{r4, pc}

000b6914 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6914:	b538      	push	{r3, r4, r5, lr}
   b6916:	4604      	mov	r4, r0
   b6918:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b691a:	6800      	ldr	r0, [r0, #0]
   b691c:	3101      	adds	r1, #1
   b691e:	f7ff fc89 	bl	b6234 <realloc>
	if (newbuffer) {
   b6922:	b110      	cbz	r0, b692a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6924:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6928:	2001      	movs	r0, #1
	}
	return 0;
}
   b692a:	bd38      	pop	{r3, r4, r5, pc}

000b692c <_ZN6String7reserveEj>:
{
   b692c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b692e:	6803      	ldr	r3, [r0, #0]
{
   b6930:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6932:	b123      	cbz	r3, b693e <_ZN6String7reserveEj+0x12>
   b6934:	6843      	ldr	r3, [r0, #4]
   b6936:	428b      	cmp	r3, r1
   b6938:	d301      	bcc.n	b693e <_ZN6String7reserveEj+0x12>
   b693a:	2001      	movs	r0, #1
}
   b693c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b693e:	4620      	mov	r0, r4
   b6940:	f7ff ffe8 	bl	b6914 <_ZN6String12changeBufferEj>
   b6944:	2800      	cmp	r0, #0
   b6946:	d0f9      	beq.n	b693c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6948:	68a3      	ldr	r3, [r4, #8]
   b694a:	2b00      	cmp	r3, #0
   b694c:	d1f5      	bne.n	b693a <_ZN6String7reserveEj+0xe>
   b694e:	6822      	ldr	r2, [r4, #0]
   b6950:	7013      	strb	r3, [r2, #0]
   b6952:	e7f2      	b.n	b693a <_ZN6String7reserveEj+0xe>

000b6954 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6954:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6956:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6958:	4611      	mov	r1, r2
   b695a:	9201      	str	r2, [sp, #4]
{
   b695c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b695e:	f7ff ffe5 	bl	b692c <_ZN6String7reserveEj>
   b6962:	9a01      	ldr	r2, [sp, #4]
   b6964:	b928      	cbnz	r0, b6972 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6966:	4620      	mov	r0, r4
   b6968:	f7ff ffc9 	bl	b68fe <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b696c:	4620      	mov	r0, r4
   b696e:	b003      	add	sp, #12
   b6970:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6972:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6974:	4629      	mov	r1, r5
   b6976:	6820      	ldr	r0, [r4, #0]
   b6978:	f000 fefc 	bl	b7774 <memcpy>
	buffer[len] = 0;
   b697c:	6822      	ldr	r2, [r4, #0]
   b697e:	68a3      	ldr	r3, [r4, #8]
   b6980:	2100      	movs	r1, #0
   b6982:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6984:	e7f2      	b.n	b696c <_ZN6String4copyEPKcj+0x18>

000b6986 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6986:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6988:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b698a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b698e:	4604      	mov	r4, r0
	len = 0;
   b6990:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6992:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6994:	b141      	cbz	r1, b69a8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6996:	4608      	mov	r0, r1
   b6998:	9101      	str	r1, [sp, #4]
   b699a:	f7fd fb49 	bl	b4030 <strlen>
   b699e:	9901      	ldr	r1, [sp, #4]
   b69a0:	4602      	mov	r2, r0
   b69a2:	4620      	mov	r0, r4
   b69a4:	f7ff ffd6 	bl	b6954 <_ZN6String4copyEPKcj>
}
   b69a8:	4620      	mov	r0, r4
   b69aa:	b002      	add	sp, #8
   b69ac:	bd10      	pop	{r4, pc}

000b69ae <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b69ae:	b513      	push	{r0, r1, r4, lr}
   b69b0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b69b2:	b159      	cbz	r1, b69cc <_ZN6StringaSEPKc+0x1e>
   b69b4:	4608      	mov	r0, r1
   b69b6:	9101      	str	r1, [sp, #4]
   b69b8:	f7fd fb3a 	bl	b4030 <strlen>
   b69bc:	9901      	ldr	r1, [sp, #4]
   b69be:	4602      	mov	r2, r0
   b69c0:	4620      	mov	r0, r4
   b69c2:	f7ff ffc7 	bl	b6954 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b69c6:	4620      	mov	r0, r4
   b69c8:	b002      	add	sp, #8
   b69ca:	bd10      	pop	{r4, pc}
	else invalidate();
   b69cc:	f7ff ff97 	bl	b68fe <_ZN6String10invalidateEv>
   b69d0:	e7f9      	b.n	b69c6 <_ZN6StringaSEPKc+0x18>
	...

000b69d4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b69d4:	4b05      	ldr	r3, [pc, #20]	; (b69ec <_GLOBAL__sub_I_System+0x18>)
   b69d6:	2202      	movs	r2, #2
   b69d8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b69da:	4b05      	ldr	r3, [pc, #20]	; (b69f0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b69dc:	4a05      	ldr	r2, [pc, #20]	; (b69f4 <_GLOBAL__sub_I_System+0x20>)
   b69de:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b69e0:	2000      	movs	r0, #0
   b69e2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b69e6:	f7ff bb79 	b.w	b60dc <set_system_mode>
   b69ea:	bf00      	nop
   b69ec:	2003e6f8 	.word	0x2003e6f8
   b69f0:	2003e6ec 	.word	0x2003e6ec
   b69f4:	ffff0000 	.word	0xffff0000

000b69f8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b69f8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b69fa:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b69fc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6a00:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6a02:	2201      	movs	r2, #1
   b6a04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6a08:	f10d 0107 	add.w	r1, sp, #7
   b6a0c:	47a0      	blx	r4
}
   b6a0e:	b002      	add	sp, #8
   b6a10:	bd10      	pop	{r4, pc}

000b6a12 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6a12:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6a14:	6803      	ldr	r3, [r0, #0]
   b6a16:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6a1c:	46a4      	mov	ip, r4
}
   b6a1e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6a22:	4760      	bx	ip

000b6a24 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6a24:	b513      	push	{r0, r1, r4, lr}
   b6a26:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6a28:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6a2a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6a2e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6a30:	f10d 0107 	add.w	r1, sp, #7
   b6a34:	2201      	movs	r2, #1
   b6a36:	47a0      	blx	r4
}
   b6a38:	b002      	add	sp, #8
   b6a3a:	bd10      	pop	{r4, pc}

000b6a3c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6a3c:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6a3e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6a40:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6a44:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6a48:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6a4a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6a4c:	d008      	beq.n	b6a60 <_ZN9TCPClient4readEv+0x24>
   b6a4e:	6963      	ldr	r3, [r4, #20]
   b6a50:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6a54:	1c51      	adds	r1, r2, #1
   b6a56:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6a5a:	4413      	add	r3, r2
   b6a5c:	7918      	ldrb	r0, [r3, #4]
}
   b6a5e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6a60:	6803      	ldr	r3, [r0, #0]
   b6a62:	691b      	ldr	r3, [r3, #16]
   b6a64:	4798      	blx	r3
   b6a66:	2800      	cmp	r0, #0
   b6a68:	d1f1      	bne.n	b6a4e <_ZN9TCPClient4readEv+0x12>
   b6a6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6a6e:	e7f6      	b.n	b6a5e <_ZN9TCPClient4readEv+0x22>

000b6a70 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6a70:	4770      	bx	lr

000b6a72 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6a72:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6a74:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6a76:	43c0      	mvns	r0, r0
   b6a78:	0fc0      	lsrs	r0, r0, #31
   b6a7a:	4770      	bx	lr

000b6a7c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6a7c:	4770      	bx	lr
	...

000b6a80 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6a80:	4b06      	ldr	r3, [pc, #24]	; (b6a9c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6a82:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6a84:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6a86:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6a8a:	d005      	beq.n	b6a98 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6a8c:	4608      	mov	r0, r1
   b6a8e:	f000 fd59 	bl	b7544 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6a92:	2800      	cmp	r0, #0
   b6a94:	bf08      	it	eq
   b6a96:	2400      	moveq	r4, #0
      }
   b6a98:	4620      	mov	r0, r4
   b6a9a:	bd10      	pop	{r4, pc}
   b6a9c:	000b845c 	.word	0x000b845c

000b6aa0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6aa0:	b510      	push	{r4, lr}
   b6aa2:	21ac      	movs	r1, #172	; 0xac
   b6aa4:	4604      	mov	r4, r0
   b6aa6:	f7fd fb0c 	bl	b40c2 <_ZdlPvj>
   b6aaa:	4620      	mov	r0, r4
   b6aac:	bd10      	pop	{r4, pc}

000b6aae <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6aae:	21ac      	movs	r1, #172	; 0xac
   b6ab0:	f7fd bb07 	b.w	b40c2 <_ZdlPvj>

000b6ab4 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6ab8:	f04f 0800 	mov.w	r8, #0
   b6abc:	b086      	sub	sp, #24
   b6abe:	461c      	mov	r4, r3
   b6ac0:	f8c0 8004 	str.w	r8, [r0, #4]
   b6ac4:	4605      	mov	r5, r0
   b6ac6:	460e      	mov	r6, r1
   b6ac8:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6aca:	4641      	mov	r1, r8
   b6acc:	2210      	movs	r2, #16
   b6ace:	a802      	add	r0, sp, #8
   b6ad0:	f000 fe5e 	bl	b7790 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6ad4:	1c63      	adds	r3, r4, #1
   b6ad6:	d009      	beq.n	b6aec <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6ad8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6adc:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6ae0:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6ae4:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6ae8:	435c      	muls	r4, r3
   b6aea:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6aec:	6968      	ldr	r0, [r5, #20]
   b6aee:	2310      	movs	r3, #16
   b6af0:	9300      	str	r3, [sp, #0]
   b6af2:	6800      	ldr	r0, [r0, #0]
   b6af4:	ab02      	add	r3, sp, #8
   b6af6:	f241 0205 	movw	r2, #4101	; 0x1005
   b6afa:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6afe:	f7ff f9f5 	bl	b5eec <sock_setsockopt>
    if (ret < 0) {
   b6b02:	2800      	cmp	r0, #0
   b6b04:	da07      	bge.n	b6b16 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6b06:	f7ff fba5 	bl	b6254 <__errno>
   b6b0a:	6803      	ldr	r3, [r0, #0]
   b6b0c:	606b      	str	r3, [r5, #4]
        return 0;
   b6b0e:	2000      	movs	r0, #0
}
   b6b10:	b006      	add	sp, #24
   b6b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6b16:	6968      	ldr	r0, [r5, #20]
   b6b18:	2300      	movs	r3, #0
   b6b1a:	6800      	ldr	r0, [r0, #0]
   b6b1c:	463a      	mov	r2, r7
   b6b1e:	4631      	mov	r1, r6
   b6b20:	f7ff fa04 	bl	b5f2c <sock_send>
    if (ret < 0) {
   b6b24:	1e03      	subs	r3, r0, #0
   b6b26:	dbee      	blt.n	b6b06 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6b28:	4618      	mov	r0, r3
   b6b2a:	e7f1      	b.n	b6b10 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6b2c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6b2c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b6b2e:	6984      	ldr	r4, [r0, #24]
   b6b30:	4b0a      	ldr	r3, [pc, #40]	; (b6b5c <_ZN9TCPClientD1Ev+0x30>)
   b6b32:	6003      	str	r3, [r0, #0]
   b6b34:	4605      	mov	r5, r0
   b6b36:	b17c      	cbz	r4, b6b58 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b6b38:	6863      	ldr	r3, [r4, #4]
   b6b3a:	3b01      	subs	r3, #1
   b6b3c:	6063      	str	r3, [r4, #4]
   b6b3e:	b95b      	cbnz	r3, b6b58 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b6b40:	6823      	ldr	r3, [r4, #0]
   b6b42:	4620      	mov	r0, r4
   b6b44:	689b      	ldr	r3, [r3, #8]
   b6b46:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6b48:	68a3      	ldr	r3, [r4, #8]
   b6b4a:	3b01      	subs	r3, #1
   b6b4c:	60a3      	str	r3, [r4, #8]
   b6b4e:	b91b      	cbnz	r3, b6b58 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b6b50:	6823      	ldr	r3, [r4, #0]
   b6b52:	4620      	mov	r0, r4
   b6b54:	68db      	ldr	r3, [r3, #12]
   b6b56:	4798      	blx	r3
   b6b58:	4628      	mov	r0, r5
   b6b5a:	bd38      	pop	{r3, r4, r5, pc}
   b6b5c:	000b8560 	.word	0x000b8560

000b6b60 <_ZN9TCPClientD0Ev>:
   b6b60:	b510      	push	{r4, lr}
   b6b62:	4604      	mov	r4, r0
   b6b64:	f7ff ffe2 	bl	b6b2c <_ZN9TCPClientD1Ev>
   b6b68:	4620      	mov	r0, r4
   b6b6a:	211c      	movs	r1, #28
   b6b6c:	f7fd faa9 	bl	b40c2 <_ZdlPvj>
   b6b70:	4620      	mov	r0, r4
   b6b72:	bd10      	pop	{r4, pc}

000b6b74 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6b74:	b530      	push	{r4, r5, lr}
   b6b76:	b087      	sub	sp, #28
   b6b78:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6b7a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6b7c:	4668      	mov	r0, sp
   b6b7e:	f7ff fcab 	bl	b64d8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6b84:	3404      	adds	r4, #4
   b6b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6b88:	682b      	ldr	r3, [r5, #0]
   b6b8a:	7023      	strb	r3, [r4, #0]
    }
   b6b8c:	b007      	add	sp, #28
   b6b8e:	bd30      	pop	{r4, r5, pc}

000b6b90 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b6b90:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b6b92:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b6b94:	4b05      	ldr	r3, [pc, #20]	; (b6bac <_ZN9TCPClient8remoteIPEv+0x1c>)
   b6b96:	4604      	mov	r4, r0
   b6b98:	358c      	adds	r5, #140	; 0x8c
   b6b9a:	f844 3b04 	str.w	r3, [r4], #4
   b6b9e:	4606      	mov	r6, r0
   b6ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ba4:	682b      	ldr	r3, [r5, #0]
   b6ba6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b6ba8:	4630      	mov	r0, r6
   b6baa:	bd70      	pop	{r4, r5, r6, pc}
   b6bac:	000b84d0 	.word	0x000b84d0

000b6bb0 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6bb4:	4698      	mov	r8, r3
    stop();
   b6bb6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6bb8:	b093      	sub	sp, #76	; 0x4c
   b6bba:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b6bbc:	2400      	movs	r4, #0
    stop();
   b6bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6bc0:	4606      	mov	r6, r0
   b6bc2:	4617      	mov	r7, r2
    stop();
   b6bc4:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6bc6:	4628      	mov	r0, r5
   b6bc8:	466b      	mov	r3, sp
   b6bca:	4622      	mov	r2, r4
   b6bcc:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b6bce:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6bd0:	f7ff f984 	bl	b5edc <netdb_getaddrinfo>
   b6bd4:	4605      	mov	r5, r0
   b6bd6:	2800      	cmp	r0, #0
   b6bd8:	d163      	bne.n	b6ca2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b6bda:	9b00      	ldr	r3, [sp, #0]
   b6bdc:	2b00      	cmp	r3, #0
   b6bde:	d04b      	beq.n	b6c78 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6be0:	695b      	ldr	r3, [r3, #20]
   b6be2:	2b00      	cmp	r3, #0
   b6be4:	d048      	beq.n	b6c78 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b6be6:	a806      	add	r0, sp, #24
   b6be8:	f7ff fc32 	bl	b6450 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6bec:	9b00      	ldr	r3, [sp, #0]
   b6bee:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6bf0:	7863      	ldrb	r3, [r4, #1]
   b6bf2:	2b02      	cmp	r3, #2
   b6bf4:	d104      	bne.n	b6c00 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6bf6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6bf8:	a806      	add	r0, sp, #24
   b6bfa:	f7ff ffbb 	bl	b6b74 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b6bfe:	e026      	b.n	b6c4e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6c00:	2b0a      	cmp	r3, #10
   b6c02:	d124      	bne.n	b6c4e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6c04:	2211      	movs	r2, #17
   b6c06:	4629      	mov	r1, r5
   b6c08:	a801      	add	r0, sp, #4
   b6c0a:	f000 fdc1 	bl	b7790 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6c0e:	68a3      	ldr	r3, [r4, #8]
   b6c10:	2b00      	cmp	r3, #0
   b6c12:	d038      	beq.n	b6c86 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6c14:	f104 0308 	add.w	r3, r4, #8
   b6c18:	f10d 0c04 	add.w	ip, sp, #4
   b6c1c:	3418      	adds	r4, #24
   b6c1e:	6818      	ldr	r0, [r3, #0]
   b6c20:	6859      	ldr	r1, [r3, #4]
   b6c22:	4662      	mov	r2, ip
   b6c24:	c203      	stmia	r2!, {r0, r1}
   b6c26:	3308      	adds	r3, #8
   b6c28:	42a3      	cmp	r3, r4
   b6c2a:	4694      	mov	ip, r2
   b6c2c:	d1f7      	bne.n	b6c1e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6c2e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6c30:	a901      	add	r1, sp, #4
   b6c32:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6c34:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6c38:	f7ff fc18 	bl	b646c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6c3c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6c40:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6c44:	ac07      	add	r4, sp, #28
   b6c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c48:	f8dc 3000 	ldr.w	r3, [ip]
   b6c4c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b6c4e:	a806      	add	r0, sp, #24
   b6c50:	f7ff fc1e 	bl	b6490 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6c54:	b180      	cbz	r0, b6c78 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b6c56:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6c58:	ad07      	add	r5, sp, #28
   b6c5a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b6c5e:	4b12      	ldr	r3, [pc, #72]	; (b6ca8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6c60:	930c      	str	r3, [sp, #48]	; 0x30
   b6c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c64:	ac0d      	add	r4, sp, #52	; 0x34
   b6c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c68:	682b      	ldr	r3, [r5, #0]
   b6c6a:	7023      	strb	r3, [r4, #0]
   b6c6c:	463a      	mov	r2, r7
   b6c6e:	4643      	mov	r3, r8
   b6c70:	a90c      	add	r1, sp, #48	; 0x30
   b6c72:	4630      	mov	r0, r6
   b6c74:	47c8      	blx	r9
   b6c76:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6c78:	9800      	ldr	r0, [sp, #0]
   b6c7a:	f7ff f927 	bl	b5ecc <netdb_freeaddrinfo>
}
   b6c7e:	4628      	mov	r0, r5
   b6c80:	b013      	add	sp, #76	; 0x4c
   b6c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6c86:	68e3      	ldr	r3, [r4, #12]
   b6c88:	2b00      	cmp	r3, #0
   b6c8a:	d1c3      	bne.n	b6c14 <_ZN9TCPClient7connectEPKctm+0x64>
   b6c8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6c90:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b6c94:	f7ff f90a 	bl	b5eac <inet_htonl>
   b6c98:	4581      	cmp	r9, r0
   b6c9a:	d1bb      	bne.n	b6c14 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b6c9c:	f104 0114 	add.w	r1, r4, #20
   b6ca0:	e7aa      	b.n	b6bf8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6ca2:	4625      	mov	r5, r4
   b6ca4:	e7e8      	b.n	b6c78 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6ca6:	bf00      	nop
   b6ca8:	000b84d0 	.word	0x000b84d0

000b6cac <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b6cac:	b538      	push	{r3, r4, r5, lr}
   b6cae:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6cb0:	681a      	ldr	r2, [r3, #0]
   b6cb2:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b6cb4:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b6cb6:	da10      	bge.n	b6cda <_ZN9TCPClient9connectedEv+0x2e>
   b6cb8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6cbc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6cc0:	429a      	cmp	r2, r3
   b6cc2:	d10a      	bne.n	b6cda <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b6cc4:	6803      	ldr	r3, [r0, #0]
   b6cc6:	691b      	ldr	r3, [r3, #16]
   b6cc8:	4798      	blx	r3
        if (!rv) {
   b6cca:	4604      	mov	r4, r0
   b6ccc:	b928      	cbnz	r0, b6cda <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b6cce:	682b      	ldr	r3, [r5, #0]
   b6cd0:	4628      	mov	r0, r5
   b6cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6cd4:	4798      	blx	r3
        rv = available();
   b6cd6:	4620      	mov	r0, r4
}
   b6cd8:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b6cda:	2001      	movs	r0, #1
   b6cdc:	e7fc      	b.n	b6cd8 <_ZN9TCPClient9connectedEv+0x2c>

000b6cde <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b6cde:	b510      	push	{r4, lr}
   b6ce0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6ce2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6ce6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6cea:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b6cec:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6cee:	d005      	beq.n	b6cfc <_ZN9TCPClient4peekEv+0x1e>
   b6cf0:	6963      	ldr	r3, [r4, #20]
   b6cf2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6cf6:	4413      	add	r3, r2
   b6cf8:	7918      	ldrb	r0, [r3, #4]
}
   b6cfa:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6cfc:	6803      	ldr	r3, [r0, #0]
   b6cfe:	691b      	ldr	r3, [r3, #16]
   b6d00:	4798      	blx	r3
   b6d02:	2800      	cmp	r0, #0
   b6d04:	d1f4      	bne.n	b6cf0 <_ZN9TCPClient4peekEv+0x12>
   b6d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6d0a:	e7f6      	b.n	b6cfa <_ZN9TCPClient4peekEv+0x1c>

000b6d0c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d0e:	6943      	ldr	r3, [r0, #20]
   b6d10:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b6d12:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6d16:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6d1a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6d1c:	4605      	mov	r5, r0
   b6d1e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6d20:	d016      	beq.n	b6d50 <_ZN9TCPClient4readEPhj+0x44>
   b6d22:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b6d24:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6d28:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b6d2c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b6d2e:	42bc      	cmp	r4, r7
   b6d30:	bf28      	it	cs
   b6d32:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b6d34:	3304      	adds	r3, #4
   b6d36:	4622      	mov	r2, r4
   b6d38:	4419      	add	r1, r3
   b6d3a:	4630      	mov	r0, r6
   b6d3c:	f000 fd1a 	bl	b7774 <memcpy>
   b6d40:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b6d42:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b6d46:	4423      	add	r3, r4
   b6d48:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b6d4c:	4620      	mov	r0, r4
   b6d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b6d50:	6803      	ldr	r3, [r0, #0]
   b6d52:	691b      	ldr	r3, [r3, #16]
   b6d54:	4798      	blx	r3
   b6d56:	2800      	cmp	r0, #0
   b6d58:	d1e3      	bne.n	b6d22 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b6d5a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b6d5e:	e7f5      	b.n	b6d4c <_ZN9TCPClient4readEPhj+0x40>

000b6d60 <_ZN9TCPClient12flush_bufferEv>:
   b6d60:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b6d62:	2300      	movs	r3, #0
   b6d64:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b6d68:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b6d6a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b6d6e:	4770      	bx	lr

000b6d70 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6d74:	461f      	mov	r7, r3
    stop();
   b6d76:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6d78:	460c      	mov	r4, r1
    stop();
   b6d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6d7c:	b08a      	sub	sp, #40	; 0x28
   b6d7e:	4605      	mov	r5, r0
   b6d80:	4616      	mov	r6, r2
    stop();
   b6d82:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b6d84:	7d23      	ldrb	r3, [r4, #20]
   b6d86:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b6d8a:	2b04      	cmp	r3, #4
   b6d8c:	bf0c      	ite	eq
   b6d8e:	2002      	moveq	r0, #2
   b6d90:	200a      	movne	r0, #10
   b6d92:	2206      	movs	r2, #6
   b6d94:	2101      	movs	r1, #1
   b6d96:	f7ff f8d1 	bl	b5f3c <sock_socket>
   b6d9a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b6d9e:	696b      	ldr	r3, [r5, #20]
   b6da0:	681b      	ldr	r3, [r3, #0]
   b6da2:	2b00      	cmp	r3, #0
   b6da4:	da08      	bge.n	b6db8 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b6da6:	682b      	ldr	r3, [r5, #0]
   b6da8:	4628      	mov	r0, r5
   b6daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6dac:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b6dae:	4798      	blx	r3
}
   b6db0:	4620      	mov	r0, r4
   b6db2:	b00a      	add	sp, #40	; 0x28
   b6db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b6db8:	4628      	mov	r0, r5
   b6dba:	f7ff ffd1 	bl	b6d60 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b6dbe:	b1b7      	cbz	r7, b6dee <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b6dc0:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6dc2:	a903      	add	r1, sp, #12
   b6dc4:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b6dc6:	9303      	str	r3, [sp, #12]
   b6dc8:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6dcc:	f7ff f85e 	bl	b5e8c <if_index_to_name>
   b6dd0:	2800      	cmp	r0, #0
   b6dd2:	d1e8      	bne.n	b6da6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b6dd4:	6968      	ldr	r0, [r5, #20]
   b6dd6:	2306      	movs	r3, #6
   b6dd8:	9300      	str	r3, [sp, #0]
   b6dda:	6800      	ldr	r0, [r0, #0]
   b6ddc:	ab03      	add	r3, sp, #12
   b6dde:	f241 020b 	movw	r2, #4107	; 0x100b
   b6de2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6de6:	f7ff f881 	bl	b5eec <sock_setsockopt>
   b6dea:	2800      	cmp	r0, #0
   b6dec:	d1db      	bne.n	b6da6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b6dee:	221c      	movs	r2, #28
   b6df0:	2100      	movs	r1, #0
   b6df2:	a803      	add	r0, sp, #12
   b6df4:	f000 fccc 	bl	b7790 <memset>
    if (ip.version() == 4) {
   b6df8:	7d23      	ldrb	r3, [r4, #20]
   b6dfa:	2b04      	cmp	r3, #4
   b6dfc:	d11d      	bne.n	b6e3a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b6dfe:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b6e02:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b6e04:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b6e08:	f7ff f858 	bl	b5ebc <inet_htons>
   b6e0c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b6e10:	6860      	ldr	r0, [r4, #4]
   b6e12:	f7ff f84b 	bl	b5eac <inet_htonl>
   b6e16:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b6e18:	696b      	ldr	r3, [r5, #20]
   b6e1a:	221c      	movs	r2, #28
   b6e1c:	6818      	ldr	r0, [r3, #0]
   b6e1e:	a903      	add	r1, sp, #12
   b6e20:	f7ff f874 	bl	b5f0c <sock_connect>
   b6e24:	2800      	cmp	r0, #0
   b6e26:	d1be      	bne.n	b6da6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b6e28:	3404      	adds	r4, #4
   b6e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6e2c:	696d      	ldr	r5, [r5, #20]
   b6e2e:	358c      	adds	r5, #140	; 0x8c
   b6e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6e32:	6823      	ldr	r3, [r4, #0]
   b6e34:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b6e36:	2401      	movs	r4, #1
   b6e38:	e7ba      	b.n	b6db0 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b6e3a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b6e3e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b6e40:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b6e44:	f7ff f83a 	bl	b5ebc <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6e48:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b6e4a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6e4e:	1d23      	adds	r3, r4, #4
   b6e50:	f104 0714 	add.w	r7, r4, #20
   b6e54:	6818      	ldr	r0, [r3, #0]
   b6e56:	6859      	ldr	r1, [r3, #4]
   b6e58:	4632      	mov	r2, r6
   b6e5a:	c203      	stmia	r2!, {r0, r1}
   b6e5c:	3308      	adds	r3, #8
   b6e5e:	42bb      	cmp	r3, r7
   b6e60:	4616      	mov	r6, r2
   b6e62:	d1f7      	bne.n	b6e54 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b6e64:	e7d8      	b.n	b6e18 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b6e68 <_ZN9TCPClient9availableEv>:
{
   b6e68:	b530      	push	{r4, r5, lr}
   b6e6a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b6e6c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b6e70:	b08b      	sub	sp, #44	; 0x2c
   b6e72:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b6e74:	b12b      	cbz	r3, b6e82 <_ZN9TCPClient9availableEv+0x1a>
   b6e76:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b6e7a:	429a      	cmp	r2, r3
   b6e7c:	d101      	bne.n	b6e82 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b6e7e:	f7ff ff6f 	bl	b6d60 <_ZN9TCPClient12flush_bufferEv>
   b6e82:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b6e84:	6808      	ldr	r0, [r1, #0]
   b6e86:	2800      	cmp	r0, #0
   b6e88:	db18      	blt.n	b6ebc <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b6e8a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b6e8e:	2d7f      	cmp	r5, #127	; 0x7f
   b6e90:	d814      	bhi.n	b6ebc <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b6e92:	3104      	adds	r1, #4
   b6e94:	2308      	movs	r3, #8
   b6e96:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b6e9a:	4429      	add	r1, r5
   b6e9c:	f7ff f83e 	bl	b5f1c <sock_recv>
            if (ret > 0) {
   b6ea0:	2800      	cmp	r0, #0
   b6ea2:	dd13      	ble.n	b6ecc <_ZN9TCPClient9availableEv+0x64>
   b6ea4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b6ea6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6eaa:	b90a      	cbnz	r2, b6eb0 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b6eac:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b6eb0:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b6eb2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6eb6:	4410      	add	r0, r2
   b6eb8:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b6ebc:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b6ebe:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b6ec2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b6ec6:	1ac0      	subs	r0, r0, r3
   b6ec8:	b00b      	add	sp, #44	; 0x2c
   b6eca:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b6ecc:	f7ff f9c2 	bl	b6254 <__errno>
   b6ed0:	6803      	ldr	r3, [r0, #0]
   b6ed2:	2b0b      	cmp	r3, #11
   b6ed4:	d0f2      	beq.n	b6ebc <_ZN9TCPClient9availableEv+0x54>
   b6ed6:	f7ff f9bd 	bl	b6254 <__errno>
   b6eda:	6803      	ldr	r3, [r0, #0]
   b6edc:	2b0b      	cmp	r3, #11
   b6ede:	d0ed      	beq.n	b6ebc <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b6ee0:	2320      	movs	r3, #32
   b6ee2:	2500      	movs	r5, #0
   b6ee4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6ee8:	f7ff f9b4 	bl	b6254 <__errno>
   b6eec:	6803      	ldr	r3, [r0, #0]
   b6eee:	9301      	str	r3, [sp, #4]
   b6ef0:	4b08      	ldr	r3, [pc, #32]	; (b6f14 <_ZN9TCPClient9availableEv+0xac>)
   b6ef2:	4909      	ldr	r1, [pc, #36]	; (b6f18 <_ZN9TCPClient9availableEv+0xb0>)
   b6ef4:	9300      	str	r3, [sp, #0]
   b6ef6:	aa02      	add	r2, sp, #8
   b6ef8:	462b      	mov	r3, r5
   b6efa:	2032      	movs	r0, #50	; 0x32
   b6efc:	f7ff f8e6 	bl	b60cc <log_message>
                    sock_close(d_->sock);
   b6f00:	6963      	ldr	r3, [r4, #20]
   b6f02:	6818      	ldr	r0, [r3, #0]
   b6f04:	f7fe fffa 	bl	b5efc <sock_close>
   b6f08:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b6f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6f0e:	601a      	str	r2, [r3, #0]
   b6f10:	e7d4      	b.n	b6ebc <_ZN9TCPClient9availableEv+0x54>
   b6f12:	bf00      	nop
   b6f14:	000b852b 	.word	0x000b852b
   b6f18:	000b8524 	.word	0x000b8524

000b6f1c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6f1c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b6f1e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b6f20:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b6f22:	6818      	ldr	r0, [r3, #0]
   b6f24:	2800      	cmp	r0, #0
   b6f26:	db01      	blt.n	b6f2c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6f28:	f7fe ffe8 	bl	b5efc <sock_close>
   b6f2c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b6f2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6f32:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b6f34:	6960      	ldr	r0, [r4, #20]
   b6f36:	2211      	movs	r2, #17
   b6f38:	2100      	movs	r1, #0
   b6f3a:	308c      	adds	r0, #140	; 0x8c
   b6f3c:	f000 fc28 	bl	b7790 <memset>
    flush_buffer();
   b6f40:	4620      	mov	r0, r4
}
   b6f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b6f46:	f7ff bf0b 	b.w	b6d60 <_ZN9TCPClient12flush_bufferEv>

000b6f4a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b6f4a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b6f4c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b6f4e:	4604      	mov	r4, r0
          total(0) {
   b6f50:	6001      	str	r1, [r0, #0]
   b6f52:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b6f56:	3088      	adds	r0, #136	; 0x88
   b6f58:	f7ff fa7a 	bl	b6450 <_ZN9IPAddressC1Ev>
}
   b6f5c:	4620      	mov	r0, r4
   b6f5e:	bd10      	pop	{r4, pc}

000b6f60 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b6f60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6f62:	2300      	movs	r3, #0
   b6f64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6f68:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b6f6c:	4a0e      	ldr	r2, [pc, #56]	; (b6fa8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b6f6e:	6103      	str	r3, [r0, #16]
   b6f70:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6f72:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b6f74:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6f76:	20ac      	movs	r0, #172	; 0xac
   b6f78:	9101      	str	r1, [sp, #4]
   b6f7a:	f7fd f89c 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b6f7e:	1e05      	subs	r5, r0, #0
   b6f80:	f105 060c 	add.w	r6, r5, #12
   b6f84:	d008      	beq.n	b6f98 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b6f86:	2301      	movs	r3, #1
   b6f88:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6f8c:	4b07      	ldr	r3, [pc, #28]	; (b6fac <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6f8e:	9901      	ldr	r1, [sp, #4]
   b6f90:	602b      	str	r3, [r5, #0]
   b6f92:	4630      	mov	r0, r6
   b6f94:	f7ff ffd9 	bl	b6f4a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b6f98:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b6f9a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b6f9e:	f7ff fedf 	bl	b6d60 <_ZN9TCPClient12flush_bufferEv>
}
   b6fa2:	b002      	add	sp, #8
   b6fa4:	bd70      	pop	{r4, r5, r6, pc}
   b6fa6:	bf00      	nop
   b6fa8:	000b8560 	.word	0x000b8560
   b6fac:	000b8544 	.word	0x000b8544

000b6fb0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b6fb0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b6fb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b6fb6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b6fb8:	f7ff ffd2 	bl	b6f60 <_ZN9TCPClientC1Ei>
}
   b6fbc:	4620      	mov	r0, r4
   b6fbe:	bd10      	pop	{r4, pc}

000b6fc0 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b6fc0:	b510      	push	{r4, lr}
   b6fc2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b6fc4:	6800      	ldr	r0, [r0, #0]
   b6fc6:	2800      	cmp	r0, #0
   b6fc8:	db01      	blt.n	b6fce <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b6fca:	f7fe ff97 	bl	b5efc <sock_close>
    }
}
   b6fce:	4620      	mov	r0, r4
   b6fd0:	bd10      	pop	{r4, pc}

000b6fd2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b6fd2:	300c      	adds	r0, #12
   b6fd4:	f7ff bff4 	b.w	b6fc0 <_ZN9TCPClient4DataD1Ev>

000b6fd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6fd8:	4b02      	ldr	r3, [pc, #8]	; (b6fe4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6fda:	681a      	ldr	r2, [r3, #0]
   b6fdc:	4b02      	ldr	r3, [pc, #8]	; (b6fe8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6fde:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6fe0:	4770      	bx	lr
   b6fe2:	bf00      	nop
   b6fe4:	2003e57c 	.word	0x2003e57c
   b6fe8:	2003e6fc 	.word	0x2003e6fc

000b6fec <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6fec:	4770      	bx	lr

000b6fee <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6fee:	7441      	strb	r1, [r0, #17]
}
   b6ff0:	4770      	bx	lr

000b6ff2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6ff2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6ff4:	7c00      	ldrb	r0, [r0, #16]
   b6ff6:	f7ff f819 	bl	b602c <hal_usart_available_data_for_write>
}
   b6ffa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6ffe:	bd08      	pop	{r3, pc}

000b7000 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7000:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7002:	7c00      	ldrb	r0, [r0, #16]
   b7004:	f7fe ffea 	bl	b5fdc <hal_usart_available>
}
   b7008:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b700c:	bd08      	pop	{r3, pc}

000b700e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b700e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7010:	7c00      	ldrb	r0, [r0, #16]
   b7012:	f7fe fff3 	bl	b5ffc <hal_usart_peek>
}
   b7016:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b701a:	bd08      	pop	{r3, pc}

000b701c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b701c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b701e:	7c00      	ldrb	r0, [r0, #16]
   b7020:	f7fe ffe4 	bl	b5fec <hal_usart_read>
}
   b7024:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7028:	bd08      	pop	{r3, pc}

000b702a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b702a:	7c00      	ldrb	r0, [r0, #16]
   b702c:	f7fe bfee 	b.w	b600c <hal_usart_flush>

000b7030 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7030:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7032:	7c45      	ldrb	r5, [r0, #17]
{
   b7034:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7036:	b12d      	cbz	r5, b7044 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7038:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b703a:	b003      	add	sp, #12
   b703c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7040:	f7fe bfc4 	b.w	b5fcc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7044:	7c00      	ldrb	r0, [r0, #16]
   b7046:	9101      	str	r1, [sp, #4]
   b7048:	f7fe fff0 	bl	b602c <hal_usart_available_data_for_write>
   b704c:	2800      	cmp	r0, #0
   b704e:	9901      	ldr	r1, [sp, #4]
   b7050:	dcf2      	bgt.n	b7038 <_ZN11USARTSerial5writeEh+0x8>
}
   b7052:	4628      	mov	r0, r5
   b7054:	b003      	add	sp, #12
   b7056:	bd30      	pop	{r4, r5, pc}

000b7058 <_ZN11USARTSerialD0Ev>:
   b7058:	b510      	push	{r4, lr}
   b705a:	2114      	movs	r1, #20
   b705c:	4604      	mov	r4, r0
   b705e:	f7fd f830 	bl	b40c2 <_ZdlPvj>
   b7062:	4620      	mov	r0, r4
   b7064:	bd10      	pop	{r4, pc}
	...

000b7068 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7068:	b510      	push	{r4, lr}
   b706a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b706e:	4604      	mov	r4, r0
   b7070:	4608      	mov	r0, r1
   b7072:	4611      	mov	r1, r2
   b7074:	2200      	movs	r2, #0
   b7076:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b707a:	4b04      	ldr	r3, [pc, #16]	; (b708c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b707c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b707e:	2301      	movs	r3, #1
  _serial = serial;
   b7080:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7082:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7084:	f7fe ffda 	bl	b603c <hal_usart_init_ex>
}
   b7088:	4620      	mov	r0, r4
   b708a:	bd10      	pop	{r4, pc}
   b708c:	000b85c8 	.word	0x000b85c8

000b7090 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7090:	7441      	strb	r1, [r0, #17]
}
   b7092:	4770      	bx	lr

000b7094 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7094:	4770      	bx	lr

000b7096 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7096:	4770      	bx	lr

000b7098 <_ZN9USBSerial4readEv>:
{
   b7098:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b709a:	2100      	movs	r1, #0
   b709c:	7c00      	ldrb	r0, [r0, #16]
   b709e:	f7fe fff5 	bl	b608c <HAL_USB_USART_Receive_Data>
}
   b70a2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b70a6:	bd08      	pop	{r3, pc}

000b70a8 <_ZN9USBSerial4peekEv>:
{
   b70a8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b70aa:	2101      	movs	r1, #1
   b70ac:	7c00      	ldrb	r0, [r0, #16]
   b70ae:	f7fe ffed 	bl	b608c <HAL_USB_USART_Receive_Data>
}
   b70b2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b70b6:	bd08      	pop	{r3, pc}

000b70b8 <_ZN9USBSerial17availableForWriteEv>:
{
   b70b8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b70ba:	7c00      	ldrb	r0, [r0, #16]
   b70bc:	f7fe ffde 	bl	b607c <HAL_USB_USART_Available_Data_For_Write>
}
   b70c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b70c4:	bd08      	pop	{r3, pc}

000b70c6 <_ZN9USBSerial9availableEv>:
{
   b70c6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b70c8:	7c00      	ldrb	r0, [r0, #16]
   b70ca:	f7fe ffcf 	bl	b606c <HAL_USB_USART_Available_Data>
}
   b70ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b70d2:	bd08      	pop	{r3, pc}

000b70d4 <_ZN9USBSerial5writeEh>:
{
   b70d4:	b513      	push	{r0, r1, r4, lr}
   b70d6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b70d8:	7c00      	ldrb	r0, [r0, #16]
{
   b70da:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b70dc:	f7fe ffce 	bl	b607c <HAL_USB_USART_Available_Data_For_Write>
   b70e0:	2800      	cmp	r0, #0
   b70e2:	9901      	ldr	r1, [sp, #4]
   b70e4:	dc01      	bgt.n	b70ea <_ZN9USBSerial5writeEh+0x16>
   b70e6:	7c60      	ldrb	r0, [r4, #17]
   b70e8:	b120      	cbz	r0, b70f4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b70ea:	7c20      	ldrb	r0, [r4, #16]
   b70ec:	f7fe ffd6 	bl	b609c <HAL_USB_USART_Send_Data>
   b70f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b70f4:	b002      	add	sp, #8
   b70f6:	bd10      	pop	{r4, pc}

000b70f8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b70f8:	7c00      	ldrb	r0, [r0, #16]
   b70fa:	f7fe bfd7 	b.w	b60ac <HAL_USB_USART_Flush_Data>

000b70fe <_ZN9USBSerialD0Ev>:
   b70fe:	b510      	push	{r4, lr}
   b7100:	2114      	movs	r1, #20
   b7102:	4604      	mov	r4, r0
   b7104:	f7fc ffdd 	bl	b40c2 <_ZdlPvj>
   b7108:	4620      	mov	r0, r4
   b710a:	bd10      	pop	{r4, pc}

000b710c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b710c:	b510      	push	{r4, lr}
   b710e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7112:	4604      	mov	r4, r0
   b7114:	4608      	mov	r0, r1
   b7116:	2100      	movs	r1, #0
   b7118:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b711c:	4b04      	ldr	r3, [pc, #16]	; (b7130 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b711e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7120:	2301      	movs	r3, #1
  _serial = serial;
   b7122:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7124:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7126:	4611      	mov	r1, r2
   b7128:	f7fe ff90 	bl	b604c <HAL_USB_USART_Init>
}
   b712c:	4620      	mov	r0, r4
   b712e:	bd10      	pop	{r4, pc}
   b7130:	000b85f8 	.word	0x000b85f8

000b7134 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7134:	7c00      	ldrb	r0, [r0, #16]
   b7136:	2200      	movs	r2, #0
   b7138:	f7fe bf90 	b.w	b605c <HAL_USB_USART_Begin>

000b713c <_Z19acquireSerialBufferv>:
{
   b713c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b713e:	2214      	movs	r2, #20
{
   b7140:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7142:	2100      	movs	r1, #0
   b7144:	f000 fb24 	bl	b7790 <memset>
}
   b7148:	4620      	mov	r0, r4
   b714a:	bd10      	pop	{r4, pc}

000b714c <_Z16_fetch_usbserialv>:
{
   b714c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b714e:	4c0f      	ldr	r4, [pc, #60]	; (b718c <_Z16_fetch_usbserialv+0x40>)
{
   b7150:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7152:	a803      	add	r0, sp, #12
   b7154:	f7ff fff2 	bl	b713c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7158:	7821      	ldrb	r1, [r4, #0]
   b715a:	f3bf 8f5b 	dmb	ish
   b715e:	f011 0101 	ands.w	r1, r1, #1
   b7162:	d10f      	bne.n	b7184 <_Z16_fetch_usbserialv+0x38>
   b7164:	4620      	mov	r0, r4
   b7166:	9101      	str	r1, [sp, #4]
   b7168:	f7fc ffba 	bl	b40e0 <__cxa_guard_acquire>
   b716c:	9901      	ldr	r1, [sp, #4]
   b716e:	b148      	cbz	r0, b7184 <_Z16_fetch_usbserialv+0x38>
   b7170:	aa03      	add	r2, sp, #12
   b7172:	4807      	ldr	r0, [pc, #28]	; (b7190 <_Z16_fetch_usbserialv+0x44>)
   b7174:	f7ff ffca 	bl	b710c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7178:	4620      	mov	r0, r4
   b717a:	f7fc ffb6 	bl	b40ea <__cxa_guard_release>
   b717e:	4805      	ldr	r0, [pc, #20]	; (b7194 <_Z16_fetch_usbserialv+0x48>)
   b7180:	f000 faf2 	bl	b7768 <atexit>
	return _usbserial;
}
   b7184:	4802      	ldr	r0, [pc, #8]	; (b7190 <_Z16_fetch_usbserialv+0x44>)
   b7186:	b008      	add	sp, #32
   b7188:	bd10      	pop	{r4, pc}
   b718a:	bf00      	nop
   b718c:	2003e700 	.word	0x2003e700
   b7190:	2003e704 	.word	0x2003e704
   b7194:	000b7095 	.word	0x000b7095

000b7198 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7198:	2200      	movs	r2, #0
   b719a:	6840      	ldr	r0, [r0, #4]
   b719c:	4611      	mov	r1, r2
   b719e:	f7fe bff1 	b.w	b6184 <network_ready>

000b71a2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b71a2:	2200      	movs	r2, #0
   b71a4:	6840      	ldr	r0, [r0, #4]
   b71a6:	4611      	mov	r1, r2
   b71a8:	f7ff b80c 	b.w	b61c4 <network_listening>

000b71ac <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b71ac:	2200      	movs	r2, #0
   b71ae:	6840      	ldr	r0, [r0, #4]
   b71b0:	4611      	mov	r1, r2
   b71b2:	f7ff b817 	b.w	b61e4 <network_get_listen_timeout>

000b71b6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b71b6:	6840      	ldr	r0, [r0, #4]
   b71b8:	2200      	movs	r2, #0
   b71ba:	f7ff b80b 	b.w	b61d4 <network_set_listen_timeout>

000b71be <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b71be:	6840      	ldr	r0, [r0, #4]
   b71c0:	2200      	movs	r2, #0
   b71c2:	f081 0101 	eor.w	r1, r1, #1
   b71c6:	f7fe bff5 	b.w	b61b4 <network_listen>

000b71ca <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b71ca:	2300      	movs	r3, #0
   b71cc:	6840      	ldr	r0, [r0, #4]
   b71ce:	461a      	mov	r2, r3
   b71d0:	4619      	mov	r1, r3
   b71d2:	f7fe bfe7 	b.w	b61a4 <network_off>

000b71d6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b71d6:	2300      	movs	r3, #0
   b71d8:	6840      	ldr	r0, [r0, #4]
   b71da:	461a      	mov	r2, r3
   b71dc:	4619      	mov	r1, r3
   b71de:	f7fe bfd9 	b.w	b6194 <network_on>

000b71e2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b71e2:	2200      	movs	r2, #0
   b71e4:	6840      	ldr	r0, [r0, #4]
   b71e6:	4611      	mov	r1, r2
   b71e8:	f7fe bfbc 	b.w	b6164 <network_connecting>

000b71ec <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b71ec:	6840      	ldr	r0, [r0, #4]
   b71ee:	2200      	movs	r2, #0
   b71f0:	2102      	movs	r1, #2
   b71f2:	f7fe bfbf 	b.w	b6174 <network_disconnect>

000b71f6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b71f6:	2300      	movs	r3, #0
   b71f8:	6840      	ldr	r0, [r0, #4]
   b71fa:	461a      	mov	r2, r3
   b71fc:	f7fe bfaa 	b.w	b6154 <network_connect>

000b7200 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7200:	4b02      	ldr	r3, [pc, #8]	; (b720c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7202:	2204      	movs	r2, #4
   b7204:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7206:	4a02      	ldr	r2, [pc, #8]	; (b7210 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7208:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b720a:	4770      	bx	lr
   b720c:	2003e718 	.word	0x2003e718
   b7210:	000b8628 	.word	0x000b8628

000b7214 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7214:	4b01      	ldr	r3, [pc, #4]	; (b721c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7216:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7218:	4770      	bx	lr
   b721a:	bf00      	nop
   b721c:	2003e580 	.word	0x2003e580

000b7220 <serialEventRun>:
{
   b7220:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7222:	4b0b      	ldr	r3, [pc, #44]	; (b7250 <serialEventRun+0x30>)
   b7224:	b143      	cbz	r3, b7238 <serialEventRun+0x18>
   b7226:	f7ff ff91 	bl	b714c <_Z16_fetch_usbserialv>
   b722a:	6803      	ldr	r3, [r0, #0]
   b722c:	691b      	ldr	r3, [r3, #16]
   b722e:	4798      	blx	r3
   b7230:	2800      	cmp	r0, #0
   b7232:	dd01      	ble.n	b7238 <serialEventRun+0x18>
        serialEvent();
   b7234:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7238:	4b06      	ldr	r3, [pc, #24]	; (b7254 <serialEventRun+0x34>)
   b723a:	b143      	cbz	r3, b724e <serialEventRun+0x2e>
   b723c:	f000 f95c 	bl	b74f8 <_Z22__fetch_global_Serial1v>
   b7240:	6803      	ldr	r3, [r0, #0]
   b7242:	691b      	ldr	r3, [r3, #16]
   b7244:	4798      	blx	r3
   b7246:	2800      	cmp	r0, #0
   b7248:	dd01      	ble.n	b724e <serialEventRun+0x2e>
        serialEvent1();
   b724a:	f3af 8000 	nop.w
}
   b724e:	bd08      	pop	{r3, pc}
	...

000b7258 <_post_loop>:
{
   b7258:	b508      	push	{r3, lr}
	serialEventRun();
   b725a:	f7ff ffe1 	bl	b7220 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b725e:	f7fe fd95 	bl	b5d8c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7262:	4b01      	ldr	r3, [pc, #4]	; (b7268 <_post_loop+0x10>)
   b7264:	6018      	str	r0, [r3, #0]
}
   b7266:	bd08      	pop	{r3, pc}
   b7268:	2003e728 	.word	0x2003e728

000b726c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b726c:	4805      	ldr	r0, [pc, #20]	; (b7284 <_Z33system_initialize_user_backup_ramv+0x18>)
   b726e:	4a06      	ldr	r2, [pc, #24]	; (b7288 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7270:	4906      	ldr	r1, [pc, #24]	; (b728c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7272:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7274:	1a12      	subs	r2, r2, r0
   b7276:	f000 fa7d 	bl	b7774 <memcpy>
    __backup_sram_signature = signature;
   b727a:	4b05      	ldr	r3, [pc, #20]	; (b7290 <_Z33system_initialize_user_backup_ramv+0x24>)
   b727c:	4a05      	ldr	r2, [pc, #20]	; (b7294 <_Z33system_initialize_user_backup_ramv+0x28>)
   b727e:	601a      	str	r2, [r3, #0]
}
   b7280:	bd08      	pop	{r3, pc}
   b7282:	bf00      	nop
   b7284:	2003f400 	.word	0x2003f400
   b7288:	2003f404 	.word	0x2003f404
   b728c:	000b8878 	.word	0x000b8878
   b7290:	2003f400 	.word	0x2003f400
   b7294:	9a271c1e 	.word	0x9a271c1e

000b7298 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7298:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b729a:	2300      	movs	r3, #0
   b729c:	9300      	str	r3, [sp, #0]
   b729e:	461a      	mov	r2, r3
   b72a0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b72a4:	f7fe ff3c 	bl	b6120 <system_ctrl_set_result>
}
   b72a8:	b003      	add	sp, #12
   b72aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b72b0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b72b0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b72b2:	8843      	ldrh	r3, [r0, #2]
   b72b4:	2b0a      	cmp	r3, #10
   b72b6:	d008      	beq.n	b72ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b72b8:	2b50      	cmp	r3, #80	; 0x50
   b72ba:	d10b      	bne.n	b72d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b72bc:	4b09      	ldr	r3, [pc, #36]	; (b72e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b72be:	681b      	ldr	r3, [r3, #0]
   b72c0:	b14b      	cbz	r3, b72d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b72c2:	b003      	add	sp, #12
   b72c4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b72c8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b72ca:	f7ff ffe5 	bl	b7298 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b72ce:	b003      	add	sp, #12
   b72d0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b72d4:	2300      	movs	r3, #0
   b72d6:	9300      	str	r3, [sp, #0]
   b72d8:	461a      	mov	r2, r3
   b72da:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b72de:	f7fe ff1f 	bl	b6120 <system_ctrl_set_result>
}
   b72e2:	e7f4      	b.n	b72ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b72e4:	2003e724 	.word	0x2003e724

000b72e8 <module_user_init_hook>:
{
   b72e8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b72ea:	4812      	ldr	r0, [pc, #72]	; (b7334 <module_user_init_hook+0x4c>)
   b72ec:	2100      	movs	r1, #0
   b72ee:	f7fe ffc1 	bl	b6274 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b72f2:	4b11      	ldr	r3, [pc, #68]	; (b7338 <module_user_init_hook+0x50>)
   b72f4:	681a      	ldr	r2, [r3, #0]
   b72f6:	4b11      	ldr	r3, [pc, #68]	; (b733c <module_user_init_hook+0x54>)
   b72f8:	429a      	cmp	r2, r3
   b72fa:	4b11      	ldr	r3, [pc, #68]	; (b7340 <module_user_init_hook+0x58>)
   b72fc:	bf0c      	ite	eq
   b72fe:	2201      	moveq	r2, #1
   b7300:	2200      	movne	r2, #0
   b7302:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7304:	d001      	beq.n	b730a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7306:	f7ff ffb1 	bl	b726c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b730a:	f7fe fd2f 	bl	b5d6c <HAL_RNG_GetRandomNumber>
   b730e:	4604      	mov	r4, r0
    srand(seed);
   b7310:	f000 fa46 	bl	b77a0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7314:	4b0b      	ldr	r3, [pc, #44]	; (b7344 <module_user_init_hook+0x5c>)
   b7316:	b113      	cbz	r3, b731e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7318:	4620      	mov	r0, r4
   b731a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b731e:	2100      	movs	r1, #0
   b7320:	4808      	ldr	r0, [pc, #32]	; (b7344 <module_user_init_hook+0x5c>)
   b7322:	f7fe ff0f 	bl	b6144 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b732a:	4807      	ldr	r0, [pc, #28]	; (b7348 <module_user_init_hook+0x60>)
   b732c:	2100      	movs	r1, #0
   b732e:	f7fe beed 	b.w	b610c <system_ctrl_set_app_request_handler>
   b7332:	bf00      	nop
   b7334:	000b7215 	.word	0x000b7215
   b7338:	2003f400 	.word	0x2003f400
   b733c:	9a271c1e 	.word	0x9a271c1e
   b7340:	2003e720 	.word	0x2003e720
   b7344:	00000000 	.word	0x00000000
   b7348:	000b72b1 	.word	0x000b72b1

000b734c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b734c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b734e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7350:	d902      	bls.n	b7358 <pinAvailable+0xc>
    return false;
   b7352:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7354:	b002      	add	sp, #8
   b7356:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7358:	f1a0 030b 	sub.w	r3, r0, #11
   b735c:	2b02      	cmp	r3, #2
   b735e:	d81a      	bhi.n	b7396 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7360:	4c17      	ldr	r4, [pc, #92]	; (b73c0 <pinAvailable+0x74>)
   b7362:	7821      	ldrb	r1, [r4, #0]
   b7364:	f3bf 8f5b 	dmb	ish
   b7368:	f011 0101 	ands.w	r1, r1, #1
   b736c:	d10b      	bne.n	b7386 <pinAvailable+0x3a>
   b736e:	4620      	mov	r0, r4
   b7370:	9101      	str	r1, [sp, #4]
   b7372:	f7fc feb5 	bl	b40e0 <__cxa_guard_acquire>
   b7376:	9901      	ldr	r1, [sp, #4]
   b7378:	b128      	cbz	r0, b7386 <pinAvailable+0x3a>
   b737a:	4812      	ldr	r0, [pc, #72]	; (b73c4 <pinAvailable+0x78>)
   b737c:	f7ff fa0c 	bl	b6798 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7380:	4620      	mov	r0, r4
   b7382:	f7fc feb2 	bl	b40ea <__cxa_guard_release>
   b7386:	4b0f      	ldr	r3, [pc, #60]	; (b73c4 <pinAvailable+0x78>)
   b7388:	7818      	ldrb	r0, [r3, #0]
   b738a:	f7fe fdf7 	bl	b5f7c <hal_spi_is_enabled>
   b738e:	2800      	cmp	r0, #0
   b7390:	d1df      	bne.n	b7352 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7392:	2001      	movs	r0, #1
   b7394:	e7de      	b.n	b7354 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7396:	2801      	cmp	r0, #1
   b7398:	d809      	bhi.n	b73ae <pinAvailable+0x62>
   b739a:	f000 f86d 	bl	b7478 <_Z19__fetch_global_Wirev>
   b739e:	2100      	movs	r1, #0
   b73a0:	7c00      	ldrb	r0, [r0, #16]
   b73a2:	f7fe fd63 	bl	b5e6c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b73a6:	f080 0001 	eor.w	r0, r0, #1
   b73aa:	b2c0      	uxtb	r0, r0
   b73ac:	e7d2      	b.n	b7354 <pinAvailable+0x8>
   b73ae:	3809      	subs	r0, #9
   b73b0:	2801      	cmp	r0, #1
   b73b2:	d8ee      	bhi.n	b7392 <pinAvailable+0x46>
   b73b4:	f000 f8a0 	bl	b74f8 <_Z22__fetch_global_Serial1v>
   b73b8:	7c00      	ldrb	r0, [r0, #16]
   b73ba:	f7fe fe2f 	bl	b601c <hal_usart_is_enabled>
   b73be:	e7f2      	b.n	b73a6 <pinAvailable+0x5a>
   b73c0:	2003e6b8 	.word	0x2003e6b8
   b73c4:	2003e6bc 	.word	0x2003e6bc

000b73c8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b73c8:	2823      	cmp	r0, #35	; 0x23
{
   b73ca:	b538      	push	{r3, r4, r5, lr}
   b73cc:	4604      	mov	r4, r0
   b73ce:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b73d0:	d80a      	bhi.n	b73e8 <pinMode+0x20>
   b73d2:	29ff      	cmp	r1, #255	; 0xff
   b73d4:	d008      	beq.n	b73e8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b73d6:	f7ff ffb9 	bl	b734c <pinAvailable>
   b73da:	b128      	cbz	r0, b73e8 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b73dc:	4629      	mov	r1, r5
   b73de:	4620      	mov	r0, r4
}
   b73e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b73e4:	f7fe bcda 	b.w	b5d9c <hal_gpio_mode>
}
   b73e8:	bd38      	pop	{r3, r4, r5, pc}

000b73ea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b73ea:	b538      	push	{r3, r4, r5, lr}
   b73ec:	4604      	mov	r4, r0
   b73ee:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b73f0:	f7fe fcdc 	bl	b5dac <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b73f4:	28ff      	cmp	r0, #255	; 0xff
   b73f6:	d010      	beq.n	b741a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b73f8:	2806      	cmp	r0, #6
   b73fa:	d804      	bhi.n	b7406 <digitalWrite+0x1c>
   b73fc:	234d      	movs	r3, #77	; 0x4d
   b73fe:	fa23 f000 	lsr.w	r0, r3, r0
   b7402:	07c3      	lsls	r3, r0, #31
   b7404:	d409      	bmi.n	b741a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7406:	4620      	mov	r0, r4
   b7408:	f7ff ffa0 	bl	b734c <pinAvailable>
   b740c:	b128      	cbz	r0, b741a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b740e:	4629      	mov	r1, r5
   b7410:	4620      	mov	r0, r4
}
   b7412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b7416:	f7fe bcd1 	b.w	b5dbc <hal_gpio_write>
}
   b741a:	bd38      	pop	{r3, r4, r5, pc}

000b741c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b741c:	b510      	push	{r4, lr}
   b741e:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b7420:	f7fe fcc4 	bl	b5dac <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7424:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7426:	b2db      	uxtb	r3, r3
   b7428:	2b01      	cmp	r3, #1
   b742a:	d908      	bls.n	b743e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b742c:	4620      	mov	r0, r4
   b742e:	f7ff ff8d 	bl	b734c <pinAvailable>
   b7432:	b120      	cbz	r0, b743e <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b7434:	4620      	mov	r0, r4
}
   b7436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b743a:	f7fe bcc7 	b.w	b5dcc <hal_gpio_read>
}
   b743e:	2000      	movs	r0, #0
   b7440:	bd10      	pop	{r4, pc}

000b7442 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7442:	4770      	bx	lr

000b7444 <_Z17acquireWireBufferv>:
{
   b7444:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7446:	4b0a      	ldr	r3, [pc, #40]	; (b7470 <_Z17acquireWireBufferv+0x2c>)
   b7448:	6003      	str	r3, [r0, #0]
   b744a:	2301      	movs	r3, #1
{
   b744c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b744e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7450:	4908      	ldr	r1, [pc, #32]	; (b7474 <_Z17acquireWireBufferv+0x30>)
   b7452:	2020      	movs	r0, #32
   b7454:	f000 f874 	bl	b7540 <_ZnajRKSt9nothrow_t>
	};
   b7458:	2520      	movs	r5, #32
   b745a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b745c:	4905      	ldr	r1, [pc, #20]	; (b7474 <_Z17acquireWireBufferv+0x30>)
	};
   b745e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7460:	4628      	mov	r0, r5
   b7462:	f000 f86d 	bl	b7540 <_ZnajRKSt9nothrow_t>
	};
   b7466:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b746a:	4620      	mov	r0, r4
   b746c:	bd38      	pop	{r3, r4, r5, pc}
   b746e:	bf00      	nop
   b7470:	00010018 	.word	0x00010018
   b7474:	000b865c 	.word	0x000b865c

000b7478 <_Z19__fetch_global_Wirev>:
{
   b7478:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b747a:	4d0e      	ldr	r5, [pc, #56]	; (b74b4 <_Z19__fetch_global_Wirev+0x3c>)
   b747c:	7829      	ldrb	r1, [r5, #0]
   b747e:	f3bf 8f5b 	dmb	ish
   b7482:	f011 0401 	ands.w	r4, r1, #1
{
   b7486:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7488:	d111      	bne.n	b74ae <_Z19__fetch_global_Wirev+0x36>
   b748a:	4628      	mov	r0, r5
   b748c:	f7fc fe28 	bl	b40e0 <__cxa_guard_acquire>
   b7490:	b168      	cbz	r0, b74ae <_Z19__fetch_global_Wirev+0x36>
   b7492:	4668      	mov	r0, sp
   b7494:	f7ff ffd6 	bl	b7444 <_Z17acquireWireBufferv>
   b7498:	466a      	mov	r2, sp
   b749a:	4621      	mov	r1, r4
   b749c:	4806      	ldr	r0, [pc, #24]	; (b74b8 <_Z19__fetch_global_Wirev+0x40>)
   b749e:	f7fe ff67 	bl	b6370 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b74a2:	4628      	mov	r0, r5
   b74a4:	f7fc fe21 	bl	b40ea <__cxa_guard_release>
   b74a8:	4804      	ldr	r0, [pc, #16]	; (b74bc <_Z19__fetch_global_Wirev+0x44>)
   b74aa:	f000 f95d 	bl	b7768 <atexit>
	return wire;
}
   b74ae:	4802      	ldr	r0, [pc, #8]	; (b74b8 <_Z19__fetch_global_Wirev+0x40>)
   b74b0:	b007      	add	sp, #28
   b74b2:	bd30      	pop	{r4, r5, pc}
   b74b4:	2003e72c 	.word	0x2003e72c
   b74b8:	2003e730 	.word	0x2003e730
   b74bc:	000b7443 	.word	0x000b7443

000b74c0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b74c0:	4770      	bx	lr
	...

000b74c4 <_Z20acquireSerial1Bufferv>:
{
   b74c4:	b538      	push	{r3, r4, r5, lr}
   b74c6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b74c8:	2514      	movs	r5, #20
   b74ca:	462a      	mov	r2, r5
   b74cc:	2100      	movs	r1, #0
   b74ce:	f000 f95f 	bl	b7790 <memset>
   b74d2:	8025      	strh	r5, [r4, #0]
   b74d4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b74d6:	4907      	ldr	r1, [pc, #28]	; (b74f4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b74d8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b74da:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b74dc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b74de:	f000 f82f 	bl	b7540 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b74e2:	4904      	ldr	r1, [pc, #16]	; (b74f4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b74e4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b74e6:	4628      	mov	r0, r5
   b74e8:	f000 f82a 	bl	b7540 <_ZnajRKSt9nothrow_t>
    };
   b74ec:	60e0      	str	r0, [r4, #12]
}
   b74ee:	4620      	mov	r0, r4
   b74f0:	bd38      	pop	{r3, r4, r5, pc}
   b74f2:	bf00      	nop
   b74f4:	000b865c 	.word	0x000b865c

000b74f8 <_Z22__fetch_global_Serial1v>:
{
   b74f8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b74fa:	4d0e      	ldr	r5, [pc, #56]	; (b7534 <_Z22__fetch_global_Serial1v+0x3c>)
   b74fc:	7829      	ldrb	r1, [r5, #0]
   b74fe:	f3bf 8f5b 	dmb	ish
   b7502:	f011 0401 	ands.w	r4, r1, #1
{
   b7506:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7508:	d111      	bne.n	b752e <_Z22__fetch_global_Serial1v+0x36>
   b750a:	4628      	mov	r0, r5
   b750c:	f7fc fde8 	bl	b40e0 <__cxa_guard_acquire>
   b7510:	b168      	cbz	r0, b752e <_Z22__fetch_global_Serial1v+0x36>
   b7512:	a801      	add	r0, sp, #4
   b7514:	f7ff ffd6 	bl	b74c4 <_Z20acquireSerial1Bufferv>
   b7518:	aa01      	add	r2, sp, #4
   b751a:	4621      	mov	r1, r4
   b751c:	4806      	ldr	r0, [pc, #24]	; (b7538 <_Z22__fetch_global_Serial1v+0x40>)
   b751e:	f7ff fda3 	bl	b7068 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7522:	4628      	mov	r0, r5
   b7524:	f7fc fde1 	bl	b40ea <__cxa_guard_release>
   b7528:	4804      	ldr	r0, [pc, #16]	; (b753c <_Z22__fetch_global_Serial1v+0x44>)
   b752a:	f000 f91d 	bl	b7768 <atexit>
    return serial1;
}
   b752e:	4802      	ldr	r0, [pc, #8]	; (b7538 <_Z22__fetch_global_Serial1v+0x40>)
   b7530:	b007      	add	sp, #28
   b7532:	bd30      	pop	{r4, r5, pc}
   b7534:	2003e744 	.word	0x2003e744
   b7538:	2003e748 	.word	0x2003e748
   b753c:	000b74c1 	.word	0x000b74c1

000b7540 <_ZnajRKSt9nothrow_t>:
   b7540:	f7fc bdbb 	b.w	b40ba <_Znaj>

000b7544 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7544:	4901      	ldr	r1, [pc, #4]	; (b754c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7546:	f000 b8f9 	b.w	b773c <_ZNKSt9type_infoeqERKS_>
   b754a:	bf00      	nop
   b754c:	000b8678 	.word	0x000b8678

000b7550 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7550:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7552:	2400      	movs	r4, #0
   b7554:	2310      	movs	r3, #16
   b7556:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b755a:	6803      	ldr	r3, [r0, #0]
   b755c:	4615      	mov	r5, r2
   b755e:	699e      	ldr	r6, [r3, #24]
   b7560:	6812      	ldr	r2, [r2, #0]
   b7562:	466b      	mov	r3, sp
   b7564:	e9cd 4400 	strd	r4, r4, [sp]
   b7568:	47b0      	blx	r6
   b756a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b756e:	f003 0306 	and.w	r3, r3, #6
   b7572:	2b06      	cmp	r3, #6
   b7574:	bf03      	ittte	eq
   b7576:	9b00      	ldreq	r3, [sp, #0]
   b7578:	602b      	streq	r3, [r5, #0]
   b757a:	2001      	moveq	r0, #1
   b757c:	4620      	movne	r0, r4
   b757e:	b004      	add	sp, #16
   b7580:	bd70      	pop	{r4, r5, r6, pc}

000b7582 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7582:	9800      	ldr	r0, [sp, #0]
   b7584:	4290      	cmp	r0, r2
   b7586:	bf14      	ite	ne
   b7588:	2001      	movne	r0, #1
   b758a:	2006      	moveq	r0, #6
   b758c:	4770      	bx	lr
	...

000b7590 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7590:	b510      	push	{r4, lr}
   b7592:	4b03      	ldr	r3, [pc, #12]	; (b75a0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7594:	6003      	str	r3, [r0, #0]
   b7596:	4604      	mov	r4, r0
   b7598:	f000 f8cd 	bl	b7736 <_ZNSt9type_infoD1Ev>
   b759c:	4620      	mov	r0, r4
   b759e:	bd10      	pop	{r4, pc}
   b75a0:	000b86b8 	.word	0x000b86b8

000b75a4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b75a4:	b510      	push	{r4, lr}
   b75a6:	4604      	mov	r4, r0
   b75a8:	f7ff fff2 	bl	b7590 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b75ac:	4620      	mov	r0, r4
   b75ae:	2108      	movs	r1, #8
   b75b0:	f7fc fd87 	bl	b40c2 <_ZdlPvj>
   b75b4:	4620      	mov	r0, r4
   b75b6:	bd10      	pop	{r4, pc}

000b75b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b75b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b75bc:	461f      	mov	r7, r3
   b75be:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b75c2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b75c6:	4598      	cmp	r8, r3
   b75c8:	4606      	mov	r6, r0
   b75ca:	4615      	mov	r5, r2
   b75cc:	d107      	bne.n	b75de <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b75ce:	9907      	ldr	r1, [sp, #28]
   b75d0:	f000 f8b4 	bl	b773c <_ZNKSt9type_infoeqERKS_>
   b75d4:	b118      	cbz	r0, b75de <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b75d6:	7165      	strb	r5, [r4, #5]
   b75d8:	2000      	movs	r0, #0
   b75da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b75de:	4639      	mov	r1, r7
   b75e0:	4630      	mov	r0, r6
   b75e2:	f000 f8ab 	bl	b773c <_ZNKSt9type_infoeqERKS_>
   b75e6:	2800      	cmp	r0, #0
   b75e8:	d0f6      	beq.n	b75d8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b75ea:	2301      	movs	r3, #1
   b75ec:	f8c4 8000 	str.w	r8, [r4]
   b75f0:	7125      	strb	r5, [r4, #4]
   b75f2:	71a3      	strb	r3, [r4, #6]
   b75f4:	e7f0      	b.n	b75d8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b75f6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b75f6:	b538      	push	{r3, r4, r5, lr}
   b75f8:	4615      	mov	r5, r2
   b75fa:	461c      	mov	r4, r3
   b75fc:	f000 f89e 	bl	b773c <_ZNKSt9type_infoeqERKS_>
   b7600:	b120      	cbz	r0, b760c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7602:	2308      	movs	r3, #8
   b7604:	60e3      	str	r3, [r4, #12]
   b7606:	2306      	movs	r3, #6
   b7608:	6025      	str	r5, [r4, #0]
   b760a:	7123      	strb	r3, [r4, #4]
   b760c:	bd38      	pop	{r3, r4, r5, pc}

000b760e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b760e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7610:	4605      	mov	r5, r0
   b7612:	460c      	mov	r4, r1
   b7614:	9201      	str	r2, [sp, #4]
   b7616:	461e      	mov	r6, r3
   b7618:	f000 f890 	bl	b773c <_ZNKSt9type_infoeqERKS_>
   b761c:	b950      	cbnz	r0, b7634 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b761e:	2e03      	cmp	r6, #3
   b7620:	d808      	bhi.n	b7634 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7622:	6823      	ldr	r3, [r4, #0]
   b7624:	9a01      	ldr	r2, [sp, #4]
   b7626:	695b      	ldr	r3, [r3, #20]
   b7628:	4629      	mov	r1, r5
   b762a:	4620      	mov	r0, r4
   b762c:	b002      	add	sp, #8
   b762e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7632:	4718      	bx	r3
   b7634:	b002      	add	sp, #8
   b7636:	bd70      	pop	{r4, r5, r6, pc}

000b7638 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7638:	b510      	push	{r4, lr}
   b763a:	4b03      	ldr	r3, [pc, #12]	; (b7648 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b763c:	6003      	str	r3, [r0, #0]
   b763e:	4604      	mov	r4, r0
   b7640:	f7ff ffa6 	bl	b7590 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7644:	4620      	mov	r0, r4
   b7646:	bd10      	pop	{r4, pc}
   b7648:	000b8718 	.word	0x000b8718

000b764c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b764c:	b510      	push	{r4, lr}
   b764e:	4604      	mov	r4, r0
   b7650:	f7ff fff2 	bl	b7638 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7654:	4620      	mov	r0, r4
   b7656:	210c      	movs	r1, #12
   b7658:	f7fc fd33 	bl	b40c2 <_ZdlPvj>
   b765c:	4620      	mov	r0, r4
   b765e:	bd10      	pop	{r4, pc}

000b7660 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7662:	9f08      	ldr	r7, [sp, #32]
   b7664:	4297      	cmp	r7, r2
   b7666:	4605      	mov	r5, r0
   b7668:	460e      	mov	r6, r1
   b766a:	4614      	mov	r4, r2
   b766c:	d00a      	beq.n	b7684 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b766e:	68a8      	ldr	r0, [r5, #8]
   b7670:	6802      	ldr	r2, [r0, #0]
   b7672:	9708      	str	r7, [sp, #32]
   b7674:	6a15      	ldr	r5, [r2, #32]
   b7676:	4631      	mov	r1, r6
   b7678:	4622      	mov	r2, r4
   b767a:	46ac      	mov	ip, r5
   b767c:	b003      	add	sp, #12
   b767e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7682:	4760      	bx	ip
   b7684:	4619      	mov	r1, r3
   b7686:	9301      	str	r3, [sp, #4]
   b7688:	f000 f858 	bl	b773c <_ZNKSt9type_infoeqERKS_>
   b768c:	9b01      	ldr	r3, [sp, #4]
   b768e:	2800      	cmp	r0, #0
   b7690:	d0ed      	beq.n	b766e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7692:	2006      	movs	r0, #6
   b7694:	b003      	add	sp, #12
   b7696:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7698 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7698:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b769c:	460d      	mov	r5, r1
   b769e:	4619      	mov	r1, r3
   b76a0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b76a4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b76a8:	4681      	mov	r9, r0
   b76aa:	4617      	mov	r7, r2
   b76ac:	4698      	mov	r8, r3
   b76ae:	f000 f845 	bl	b773c <_ZNKSt9type_infoeqERKS_>
   b76b2:	b190      	cbz	r0, b76da <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b76b4:	2d00      	cmp	r5, #0
   b76b6:	6034      	str	r4, [r6, #0]
   b76b8:	7137      	strb	r7, [r6, #4]
   b76ba:	db09      	blt.n	b76d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b76bc:	1961      	adds	r1, r4, r5
   b76be:	458a      	cmp	sl, r1
   b76c0:	bf0c      	ite	eq
   b76c2:	2106      	moveq	r1, #6
   b76c4:	2101      	movne	r1, #1
   b76c6:	71b1      	strb	r1, [r6, #6]
   b76c8:	2000      	movs	r0, #0
   b76ca:	b001      	add	sp, #4
   b76cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b76d0:	3502      	adds	r5, #2
   b76d2:	d1f9      	bne.n	b76c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b76d4:	2301      	movs	r3, #1
   b76d6:	71b3      	strb	r3, [r6, #6]
   b76d8:	e7f6      	b.n	b76c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b76da:	4554      	cmp	r4, sl
   b76dc:	d106      	bne.n	b76ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b76de:	4659      	mov	r1, fp
   b76e0:	4648      	mov	r0, r9
   b76e2:	f000 f82b 	bl	b773c <_ZNKSt9type_infoeqERKS_>
   b76e6:	b108      	cbz	r0, b76ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b76e8:	7177      	strb	r7, [r6, #5]
   b76ea:	e7ed      	b.n	b76c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b76ec:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b76f0:	6803      	ldr	r3, [r0, #0]
   b76f2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b76f6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b76fa:	69dc      	ldr	r4, [r3, #28]
   b76fc:	463a      	mov	r2, r7
   b76fe:	4643      	mov	r3, r8
   b7700:	4629      	mov	r1, r5
   b7702:	46a4      	mov	ip, r4
   b7704:	b001      	add	sp, #4
   b7706:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b770a:	4760      	bx	ip

000b770c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b770c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7710:	4607      	mov	r7, r0
   b7712:	460c      	mov	r4, r1
   b7714:	4615      	mov	r5, r2
   b7716:	461e      	mov	r6, r3
   b7718:	f7ff ff6d 	bl	b75f6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b771c:	b948      	cbnz	r0, b7732 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b771e:	68b8      	ldr	r0, [r7, #8]
   b7720:	6803      	ldr	r3, [r0, #0]
   b7722:	699f      	ldr	r7, [r3, #24]
   b7724:	462a      	mov	r2, r5
   b7726:	4633      	mov	r3, r6
   b7728:	4621      	mov	r1, r4
   b772a:	46bc      	mov	ip, r7
   b772c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7730:	4760      	bx	ip
   b7732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7736 <_ZNSt9type_infoD1Ev>:
   b7736:	4770      	bx	lr

000b7738 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7738:	2000      	movs	r0, #0
   b773a:	4770      	bx	lr

000b773c <_ZNKSt9type_infoeqERKS_>:
   b773c:	4281      	cmp	r1, r0
   b773e:	b508      	push	{r3, lr}
   b7740:	d00e      	beq.n	b7760 <_ZNKSt9type_infoeqERKS_+0x24>
   b7742:	6840      	ldr	r0, [r0, #4]
   b7744:	7803      	ldrb	r3, [r0, #0]
   b7746:	2b2a      	cmp	r3, #42	; 0x2a
   b7748:	d00c      	beq.n	b7764 <_ZNKSt9type_infoeqERKS_+0x28>
   b774a:	6849      	ldr	r1, [r1, #4]
   b774c:	780b      	ldrb	r3, [r1, #0]
   b774e:	2b2a      	cmp	r3, #42	; 0x2a
   b7750:	bf08      	it	eq
   b7752:	3101      	addeq	r1, #1
   b7754:	f7fc fc62 	bl	b401c <strcmp>
   b7758:	fab0 f080 	clz	r0, r0
   b775c:	0940      	lsrs	r0, r0, #5
   b775e:	bd08      	pop	{r3, pc}
   b7760:	2001      	movs	r0, #1
   b7762:	e7fc      	b.n	b775e <_ZNKSt9type_infoeqERKS_+0x22>
   b7764:	2000      	movs	r0, #0
   b7766:	e7fa      	b.n	b775e <_ZNKSt9type_infoeqERKS_+0x22>

000b7768 <atexit>:
   b7768:	2300      	movs	r3, #0
   b776a:	4601      	mov	r1, r0
   b776c:	461a      	mov	r2, r3
   b776e:	4618      	mov	r0, r3
   b7770:	f000 b844 	b.w	b77fc <__register_exitproc>

000b7774 <memcpy>:
   b7774:	440a      	add	r2, r1
   b7776:	4291      	cmp	r1, r2
   b7778:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b777c:	d100      	bne.n	b7780 <memcpy+0xc>
   b777e:	4770      	bx	lr
   b7780:	b510      	push	{r4, lr}
   b7782:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7786:	f803 4f01 	strb.w	r4, [r3, #1]!
   b778a:	4291      	cmp	r1, r2
   b778c:	d1f9      	bne.n	b7782 <memcpy+0xe>
   b778e:	bd10      	pop	{r4, pc}

000b7790 <memset>:
   b7790:	4402      	add	r2, r0
   b7792:	4603      	mov	r3, r0
   b7794:	4293      	cmp	r3, r2
   b7796:	d100      	bne.n	b779a <memset+0xa>
   b7798:	4770      	bx	lr
   b779a:	f803 1b01 	strb.w	r1, [r3], #1
   b779e:	e7f9      	b.n	b7794 <memset+0x4>

000b77a0 <srand>:
   b77a0:	b538      	push	{r3, r4, r5, lr}
   b77a2:	4b10      	ldr	r3, [pc, #64]	; (b77e4 <srand+0x44>)
   b77a4:	681d      	ldr	r5, [r3, #0]
   b77a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b77a8:	4604      	mov	r4, r0
   b77aa:	b9b3      	cbnz	r3, b77da <srand+0x3a>
   b77ac:	2018      	movs	r0, #24
   b77ae:	f7fe fd31 	bl	b6214 <malloc>
   b77b2:	4602      	mov	r2, r0
   b77b4:	63a8      	str	r0, [r5, #56]	; 0x38
   b77b6:	b920      	cbnz	r0, b77c2 <srand+0x22>
   b77b8:	4b0b      	ldr	r3, [pc, #44]	; (b77e8 <srand+0x48>)
   b77ba:	480c      	ldr	r0, [pc, #48]	; (b77ec <srand+0x4c>)
   b77bc:	2142      	movs	r1, #66	; 0x42
   b77be:	f7fe fd51 	bl	b6264 <__assert_func>
   b77c2:	490b      	ldr	r1, [pc, #44]	; (b77f0 <srand+0x50>)
   b77c4:	4b0b      	ldr	r3, [pc, #44]	; (b77f4 <srand+0x54>)
   b77c6:	e9c0 1300 	strd	r1, r3, [r0]
   b77ca:	4b0b      	ldr	r3, [pc, #44]	; (b77f8 <srand+0x58>)
   b77cc:	6083      	str	r3, [r0, #8]
   b77ce:	230b      	movs	r3, #11
   b77d0:	8183      	strh	r3, [r0, #12]
   b77d2:	2100      	movs	r1, #0
   b77d4:	2001      	movs	r0, #1
   b77d6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b77da:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b77dc:	2200      	movs	r2, #0
   b77de:	611c      	str	r4, [r3, #16]
   b77e0:	615a      	str	r2, [r3, #20]
   b77e2:	bd38      	pop	{r3, r4, r5, pc}
   b77e4:	2003e580 	.word	0x2003e580
   b77e8:	000b8751 	.word	0x000b8751
   b77ec:	000b8768 	.word	0x000b8768
   b77f0:	abcd330e 	.word	0xabcd330e
   b77f4:	e66d1234 	.word	0xe66d1234
   b77f8:	0005deec 	.word	0x0005deec

000b77fc <__register_exitproc>:
   b77fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7800:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b78bc <__register_exitproc+0xc0>
   b7804:	4606      	mov	r6, r0
   b7806:	f8d8 0000 	ldr.w	r0, [r8]
   b780a:	461f      	mov	r7, r3
   b780c:	460d      	mov	r5, r1
   b780e:	4691      	mov	r9, r2
   b7810:	f000 f856 	bl	b78c0 <__retarget_lock_acquire_recursive>
   b7814:	4b25      	ldr	r3, [pc, #148]	; (b78ac <__register_exitproc+0xb0>)
   b7816:	681c      	ldr	r4, [r3, #0]
   b7818:	b934      	cbnz	r4, b7828 <__register_exitproc+0x2c>
   b781a:	4c25      	ldr	r4, [pc, #148]	; (b78b0 <__register_exitproc+0xb4>)
   b781c:	601c      	str	r4, [r3, #0]
   b781e:	4b25      	ldr	r3, [pc, #148]	; (b78b4 <__register_exitproc+0xb8>)
   b7820:	b113      	cbz	r3, b7828 <__register_exitproc+0x2c>
   b7822:	681b      	ldr	r3, [r3, #0]
   b7824:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7828:	6863      	ldr	r3, [r4, #4]
   b782a:	2b1f      	cmp	r3, #31
   b782c:	dd07      	ble.n	b783e <__register_exitproc+0x42>
   b782e:	f8d8 0000 	ldr.w	r0, [r8]
   b7832:	f000 f847 	bl	b78c4 <__retarget_lock_release_recursive>
   b7836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b783a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b783e:	b34e      	cbz	r6, b7894 <__register_exitproc+0x98>
   b7840:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7844:	b988      	cbnz	r0, b786a <__register_exitproc+0x6e>
   b7846:	4b1c      	ldr	r3, [pc, #112]	; (b78b8 <__register_exitproc+0xbc>)
   b7848:	b923      	cbnz	r3, b7854 <__register_exitproc+0x58>
   b784a:	f8d8 0000 	ldr.w	r0, [r8]
   b784e:	f000 f838 	bl	b78c2 <__retarget_lock_release>
   b7852:	e7f0      	b.n	b7836 <__register_exitproc+0x3a>
   b7854:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7858:	f7fe fcdc 	bl	b6214 <malloc>
   b785c:	2800      	cmp	r0, #0
   b785e:	d0f4      	beq.n	b784a <__register_exitproc+0x4e>
   b7860:	2300      	movs	r3, #0
   b7862:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7866:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b786a:	6863      	ldr	r3, [r4, #4]
   b786c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7870:	2201      	movs	r2, #1
   b7872:	409a      	lsls	r2, r3
   b7874:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7878:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b787c:	4313      	orrs	r3, r2
   b787e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7882:	2e02      	cmp	r6, #2
   b7884:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7888:	bf02      	ittt	eq
   b788a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b788e:	4313      	orreq	r3, r2
   b7890:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7894:	6863      	ldr	r3, [r4, #4]
   b7896:	f8d8 0000 	ldr.w	r0, [r8]
   b789a:	1c5a      	adds	r2, r3, #1
   b789c:	3302      	adds	r3, #2
   b789e:	6062      	str	r2, [r4, #4]
   b78a0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b78a4:	f000 f80e 	bl	b78c4 <__retarget_lock_release_recursive>
   b78a8:	2000      	movs	r0, #0
   b78aa:	e7c6      	b.n	b783a <__register_exitproc+0x3e>
   b78ac:	2003e7e8 	.word	0x2003e7e8
   b78b0:	2003e75c 	.word	0x2003e75c
   b78b4:	00000000 	.word	0x00000000
   b78b8:	000b6215 	.word	0x000b6215
   b78bc:	2003e5e4 	.word	0x2003e5e4

000b78c0 <__retarget_lock_acquire_recursive>:
   b78c0:	4770      	bx	lr

000b78c2 <__retarget_lock_release>:
   b78c2:	4770      	bx	lr

000b78c4 <__retarget_lock_release_recursive>:
   b78c4:	4770      	bx	lr

000b78c6 <link_code_end>:
	...

000b78c8 <link_const_data_start>:
   b78c8:	514d0400 	.word	0x514d0400
   b78cc:	00045454 	.word	0x00045454
   b78d0:	49514d06 	.word	0x49514d06
   b78d4:	03706473 	.word	0x03706473

000b78d8 <dynalib_user>:
   b78d8:	000b4041 000b407d 000b40a5 000b40a9     A@..}@...@...@..
   b78e8:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   b78f8:	72697620 6c617574 62614c00 4c003731      virtual.Lab17.L
   b7908:	37316261 6e6e6f43 65746365 616c0064     ab17Connected.la
   b7918:	68742e62 6c637765 6d6f632e               b.thewcl.com.

000b7925 <_ZL4font>:
   b7925:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   b7935:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   b7945:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   b7955:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   b7965:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   b7975:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   b7985:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   b7995:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   b79a5:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   b79b5:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   b79c5:	00000000 5f000000 07000000 14000700     ......._........
   b79d5:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   b79e5:	00502056 00030708 41221c00 22410000     V P......."A..A"
   b79f5:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   b7a05:	08080800 00000808 20006060 02040810     ........``. ....
   b7a15:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   b7a25:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   b7a35:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   b7a45:	00001e29 00000014 00003440 22140800     ).......@4....."
   b7a55:	14141441 41001414 02081422 06095901     A......A"....Y..
   b7a65:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   b7a75:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   b7a85:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   b7a95:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   b7aa5:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   b7ab5:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   b7ac5:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   b7ad5:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   b7ae5:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   b7af5:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   b7b05:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   b7b15:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   b7b25:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   b7b35:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   b7b45:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   b7b55:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   b7b65:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   b7b75:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   b7b85:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   b7b95:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   b7ba5:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   b7bb5:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   b7bc5:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   b7bd5:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   b7be5:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   b7bf5:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   b7c05:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   b7c15:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   b7c25:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   b7c35:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   b7c45:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   b7c55:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   b7c65:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   b7c75:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   b7c85:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   b7c95:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   b7ca5:	00ff0000 ff101010 14141400 101000ff     ................
   b7cb5:	10ff00ff f010f010 fc141414 f7141400     ................
   b7cc5:	0000ff00 14ff00ff fc04f414 10171414     ................
   b7cd5:	1f10101f 14141f10 10001f14 00f01010     ................
   b7ce5:	1f000000 10101010 1010101f 0010f010     ................
   b7cf5:	10ff0000 10101010 10101010 000010ff     ................
   b7d05:	0014ff00 ff00ff00 101f0000 fc000017     ................
   b7d15:	1414f404 14171017 f404f414 00ff0000     ................
   b7d25:	141414f7 14141414 14f700f7 14171414     ................
   b7d35:	101f1010 1414141f 101014f4 00f010f0     ................
   b7d45:	1f101f00 1f000000 00000014 000014fc     ................
   b7d55:	10f010f0 ff10ff10 ff141414 10101014     ................
   b7d65:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   b7d75:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   b7d85:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   b7d95:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   b7da5:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   b7db5:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   b7dc5:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   b7dd5:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   b7de5:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   b7df5:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   b7e05:	00000018 30001010 0101ff40 01011f00     .......0@.......
   b7e15:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....
   b7e25:	                                         ...

000b7e28 <_ZTV12Adafruit_GFX>:
	...
   b7e38:	000b4869 000b666d 000b40c9 000b426f     iH..mf...@..oB..
   b7e48:	000b4271 000b42a3 000b427f 000b4291     qB...B...B...B..
   b7e58:	000b41b1 000b426f 000b449b 000b4499     .A..oB...D...D..
   b7e68:	000b42bb 000b42f9 000b4333 000b4379     .B...B..3C..yC..
   b7e78:	000b4395 000b4419 61666564 20746c75     .C...D..default 
   b7e88:	42534d00 42534c00 50533c00 74655349     .MSB.LSB.<SPISet
   b7e98:	676e6974 65642073 6c756166 3c003e74     tings default>.<
   b7ea8:	53495053 69747465 2073676e 75257325     SPISettings %s%u
   b7eb8:	20732520 45444f4d 003e7525               %s MODE%u>.

000b7ec4 <_ZTVN8particle11SPISettingsE>:
	...
   b7ecc:	000b4999 000b496b 000b496d              .I..kI..mI..

000b7ed8 <_ZL12splash1_data>:
   b7ed8:	00000000 00800100 00000000 00000000     ................
   b7ee8:	00008003 00000000 07000000 000000c0     ................
   b7ef8:	00000000 c0070000 00000000 00000000     ................
   b7f08:	00c00f00 00000000 00000000 0000e01f     ................
   b7f18:	00000000 1f000000 000000e0 00000000     ................
   b7f28:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
   b7f40:	0000f07f 00000000 7ff81f00 000000f0     ................
   b7f50:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
   b7f60:	00f07fff 00000000 ff1f0000 0000e0fb     ................
   b7f70:	00000000 f9ff0f00 0000c0ff 00000000     ................
   b7f80:	fff9ff0f 000000f8 07000000 fffff1ff     ................
   b7f90:	00000000 fc030000 80ffff73 00000000     ........s.......
   b7fa0:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
   b7fb0:	000000ff 00000000 fc1ffe7f 00000000     ................
   b7fc0:	3f000000 00f8ffff 00000000 df0f0000     ...?............
   b7fd0:	0000e0ff 00000000 ff191f00 000000c0     ................
   b7fe0:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
   b7ff0:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
   b8000:	00000000 fcffff00 00000000 00000000     ................
   b8010:	00feffff 00000000 ff000000 0000feff     ................
   b8020:	00000000 efff0100 000000fe 00000000     ................
   b8030:	fecfff01 00000000 03000000 00fe07ff     ................
   b8040:	00000000 fc030000 0000fe07 00000000     ................
   b8050:	03f00300 000000fe 00000000 fe008001     ................
	...
   b8068:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
   b8080:	0000000c 07000000 00fc0080 00c00300     ................
   b8090:	80070000 0000fc01 0000c003 01800700     ................
   b80a0:	030000fc 000000c0 e0018007 1e000000     ................
   b80b0:	07000000 00e00180 001e0000 9ff7e37f     ................
   b80c0:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
   b80d0:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
   b80e0:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
   b80f0:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
   b8100:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
   b8110:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
   b8120:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
   b8130:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
   b8140:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
   b8150:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
   b8160:	ffffff00 ffffffff c0ffffff ffffffff     ................
   b8170:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
   b8180:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
   b8190:	5b6bfdff c0fd6adb                       ..k[.j..

000b8198 <_ZL12splash2_data>:
   b8198:	00600000 00000000 00000000 00000000     ..`.............
   b81a8:	0000e000 00000000 00000000 01000000     ................
   b81b8:	000000e0 00000000 00000000 f0010000     ................
	...
   b81d4:	00f00300 00000000 00000000 00000000     ................
   b81e4:	0000f007 00000000 00000000 07000000     ................
   b81f4:	000000f8 00000000 00000000 f80f0000     ................
   b8204:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   b8214:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   b8224:	00c00300 010000fe ffff00e0 000000f8     ................
   b8234:	f000c003 0f000000 7ffe7f00 030000c0     ................
   b8244:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   b8254:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   b8264:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   b8274:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   b8284:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   b8294:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   b82a4:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   b82b4:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   b82c4:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   b82d4:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   b82e4:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   b82f4:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   b8304:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   b8314:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   b832c:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   b833c:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   b834c:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   b835c:	ff7f000f a5feffff 198d9dad 060000e0     ................
   b836c:	ffff7f00 adb5feff e07eb5ed              ..........~.

000b8378 <_ZTV16Adafruit_SSD1306>:
	...
   b8380:	000b49ed 000b4a05 000b4869 000b666d     .I...J..iH..mf..
   b8390:	000b4a19 000b426f 000b4271 000b42a3     .J..oB..qB...B..
   b83a0:	000b427f 000b4291 000b41b1 000b426f     .B...B...A..oB..
   b83b0:	000b449b 000b4bb7 000b515f 000b5111     .D...K.._Q...Q..
   b83c0:	000b4333 000b4379 000b4395 000b4419     3C..yC...C...D..

000b83d0 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b83d0:	e0c08000 fefcf8f0                       ........

000b83d8 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b83d8:	07030100 7f3f1f0f                       ......?.

000b83e0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b83e0:	a880d5ae                                ....

000b83e4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b83e4:	8d4000d3                                ..@.

000b83e8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b83e8:	c8a10020                                 ...

000b83ec <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b83ec:	a6a440db                                 .@....

000b83f2 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b83f2:	8f8102da                                ....

000b83f6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b83f6:	                                         ...

000b83f9 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b83f9:	                                         ...

000b83fc <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b83fc:	21ff0022 00000000                       "..!....

000b8404 <_ZTV16OledWingAdafruit>:
	...
   b840c:	000b5385 000b53a5 000b4869 000b666d     .S...S..iH..mf..
   b841c:	000b4a19 000b426f 000b4271 000b42a3     .J..oB..qB...B..
   b842c:	000b427f 000b4291 000b41b1 000b426f     .B...B...A..oB..
   b843c:	000b449b 000b4bb7 000b515f 000b5111     .D...K.._Q...Q..
   b844c:	000b4333 000b4379 000b4395 000b4419     3C..yC...C...D..

000b845c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b8464 <_ZTVN5spark13EthernetClassE>:
	...
   b846c:	000b62fb 000b62f1 000b62e7 000b62dd     .b...b...b...b..
   b847c:	000b62d1 000b62c5 000b6549 000b6551     .b...b..Ie..Qe..
   b848c:	000b62b9 000b62b1 000b62a7 000b629d     .b...b...b...b..
   b849c:	000b6581                                .e..

000b84a0 <_ZTV7TwoWire>:
	...
   b84a8:	000b6319 000b6363 000b633b 000b631b     .c..cc..;c...c..
   b84b8:	000b6343 000b634b 000b6353 000b635b     Cc..Kc..Sc..[c..

000b84c8 <_ZTV9IPAddress>:
	...
   b84d0:	000b63ed 000b63dd 000b63df 00707061     .c...c...c..app.

000b84e0 <_ZTVN5spark12NetworkClassE>:
	...
   b84e8:	000b6509 000b6513 000b651d 000b6527     .e...e...e..'e..
   b84f8:	000b6531 000b653d 000b6549 000b6551     1e..=e..Ie..Qe..
   b8508:	000b6559 000b6565 000b656d 000b6577     Ye..ee..me..we..
   b8518:	000b6581                                .e..

000b851c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b851c:	18100800 38302820 69726977 7200676e     .... (08wiring.r
   b852c:	20766365 6f727265 203d2072 00006425     ecv error = %d..

000b853c <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8544:	000b6a7d 000b6aa1 000b6fd3 000b6aaf     }j...j...o...j..
   b8554:	000b6a81                                .j..

000b8558 <_ZTV9TCPClient>:
	...
   b8560:	000b6b2d 000b6b61 000b69f9 000b6a13     -k..ak...i...j..
   b8570:	000b6e69 000b6a3d 000b6cdf 000b6a71     in..=j...l..qj..
   b8580:	000b6d71 000b6bb1 000b6d0d 000b6f1d     qm...k...m...o..
   b8590:	000b6cad 000b6a73 000b6a25 000b6ab5     .l..sj..%j...j..
   b85a0:	000b6b91 252d5925 64252d6d 3a482554     .k..%Y-%m-%dT%H:
   b85b0:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000b85c0 <_ZTV11USARTSerial>:
	...
   b85c8:	000b6fed 000b7059 000b7031 000b666d     .o..Yp..1p..mf..
   b85d8:	000b7001 000b701d 000b700f 000b702b     .p...p...p..+p..
   b85e8:	000b6fef 000b6ff3                       .o...o..

000b85f0 <_ZTV9USBSerial>:
	...
   b85f8:	000b7097 000b70ff 000b70d5 000b666d     .p...p...p..mf..
   b8608:	000b70c7 000b7099 000b70a9 000b70f9     .p...p...p...p..
   b8618:	000b70b9 000b7091                       .p...p..

000b8620 <_ZTVN5spark9WiFiClassE>:
	...
   b8628:	000b71f7 000b71ed 000b71e3 000b7199     .q...q...q...q..
   b8638:	000b71d7 000b71cb 000b6549 000b6551     .q...q..Ie..Qe..
   b8648:	000b71bf 000b71b7 000b71ad 000b71a3     .q...q...q...q..
   b8658:	000b6581                                .e..

000b865c <_ZSt7nothrow>:
	...

000b865d <_ZTSSt19_Sp_make_shared_tag>:
   b865d:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b866d:	5f646572 00676174                        red_tag....

000b8678 <_ZTISt19_Sp_make_shared_tag>:
   b8678:	000b86b8 000b865d                       ....]...

000b8680 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b8680:	000b8718 000b868c 000b873c              ........<...

000b868c <_ZTSN10__cxxabiv117__class_type_infoE>:
   b868c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b869c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b86ac:	00000045                                E...

000b86b0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b86b0:	00000000 000b8680 000b7591 000b75a5     .........u...u..
   b86c0:	000b7739 000b7739 000b760f 000b7551     9w..9w...v..Qu..
   b86d0:	000b75f7 000b75b9 000b7583              .u...u...u..

000b86dc <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b86dc:	000b8718 000b86e8 000b8680              ............

000b86e8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b86e8:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b86f8:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b8708:	456f666e 00000000                       nfoE....

000b8710 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b8710:	00000000 000b86dc 000b7639 000b764d     ........9v..Mv..
   b8720:	000b7739 000b7739 000b760f 000b7551     9w..9w...v..Qu..
   b8730:	000b770d 000b7699 000b7661              .w...v..av..

000b873c <_ZTISt9type_info>:
   b873c:	000b86b8 000b8744                       ....D...

000b8744 <_ZTSSt9type_info>:
   b8744:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   b8754:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   b8764:	00646564 706d742f 6e656a2f 736e696b     ded./tmp/jenkins
   b8774:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   b8784:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   b8794:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   b87a4:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   b87b4:	696c6474 61722f62 632e646e               tdlib/rand.c.

000b87c1 <link_const_data_end>:
   b87c1:	00          	.byte	0x00
	...

000b87c4 <link_constructors_location>:
   b87c4:	000b4175 	.word	0x000b4175
   b87c8:	000b628d 	.word	0x000b628d
   b87cc:	000b6305 	.word	0x000b6305
   b87d0:	000b64f9 	.word	0x000b64f9
   b87d4:	000b6659 	.word	0x000b6659
   b87d8:	000b6781 	.word	0x000b6781
   b87dc:	000b69d5 	.word	0x000b69d5
   b87e0:	000b6fd9 	.word	0x000b6fd9
   b87e4:	000b7201 	.word	0x000b7201
